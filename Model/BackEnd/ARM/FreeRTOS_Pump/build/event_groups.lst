ARM GAS  /tmp/ccSfhCVW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"event_groups.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTestWaitCondition,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvTestWaitCondition:
  25              	.LFB149:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /tmp/ccSfhCVW.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "stm32f7xx_hal.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
ARM GAS  /tmp/ccSfhCVW.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** PRIVILEGED_FUNCTION static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, c
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
ARM GAS  /tmp/ccSfhCVW.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group. */
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
ARM GAS  /tmp/ccSfhCVW.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
ARM GAS  /tmp/ccSfhCVW.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
ARM GAS  /tmp/ccSfhCVW.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
ARM GAS  /tmp/ccSfhCVW.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
ARM GAS  /tmp/ccSfhCVW.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Prevent compiler warnings when trace macros are not used. */
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdFALSE;
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
ARM GAS  /tmp/ccSfhCVW.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
ARM GAS  /tmp/ccSfhCVW.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
ARM GAS  /tmp/ccSfhCVW.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCK
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 635:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and	cannot therefore have any bits set. */
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBit
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 641:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 647:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 648:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 649:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 650:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 654:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 655:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 656:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 657:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
ARM GAS  /tmp/ccSfhCVW.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 661:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 665:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 668:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 672:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 674:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 676:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 680:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 682:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 683:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  27              		.loc 1 684 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 686:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 687:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  33              		.loc 1 687 0
  34 0000 1AB9     		cbnz	r2, .L2
 688:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 689:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 690:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 691:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  35              		.loc 1 691 0
  36 0002 0842     		tst	r0, r1
  37 0004 06D1     		bne	.L4
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  38              		.loc 1 685 0
  39 0006 0020     		movs	r0, #0
  40              	.LVL1:
  41 0008 7047     		bx	lr
  42              	.LVL2:
  43              	.L2:
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 694:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 695:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 696:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 697:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 698:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  /tmp/ccSfhCVW.s 			page 14


 699:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 700:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 701:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 702:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 703:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 704:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  44              		.loc 1 704 0
  45 000a 0840     		ands	r0, r0, r1
  46              	.LVL3:
  47 000c 8842     		cmp	r0, r1
  48 000e 03D0     		beq	.L5
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  49              		.loc 1 685 0
  50 0010 0020     		movs	r0, #0
  51 0012 7047     		bx	lr
  52              	.LVL4:
  53              	.L4:
 693:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  54              		.loc 1 693 0
  55 0014 0120     		movs	r0, #1
  56              	.LVL5:
  57 0016 7047     		bx	lr
  58              	.L5:
 705:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 706:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  59              		.loc 1 706 0
  60 0018 0120     		movs	r0, #1
  61              	.LVL6:
 707:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 708:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 709:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 710:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 711:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 712:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 713:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 714:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 715:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
  62              		.loc 1 715 0
  63 001a 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE149:
  67              		.section	.text.xEventGroupCreate,"ax",%progbits
  68              		.align	2
  69              		.global	xEventGroupCreate
  70              		.thumb
  71              		.thumb_func
  73              	xEventGroupCreate:
  74              	.LFB140:
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  75              		.loc 1 176 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79 0000 10B5     		push	{r4, lr}
  80              	.LCFI0:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 4, -8
ARM GAS  /tmp/ccSfhCVW.s 			page 15


  83              		.cfi_offset 14, -4
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  84              		.loc 1 180 0
  85 0002 1820     		movs	r0, #24
  86 0004 FFF7FEFF 		bl	pvPortMalloc
  87              	.LVL7:
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
  88              		.loc 1 182 0
  89 0008 0446     		mov	r4, r0
  90 000a 20B1     		cbz	r0, .L7
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  91              		.loc 1 184 0
  92 000c 0023     		movs	r3, #0
  93 000e 40F8043B 		str	r3, [r0], #4
  94              	.LVL8:
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  95              		.loc 1 185 0
  96 0012 FFF7FEFF 		bl	vListInitialise
  97              	.LVL9:
  98              	.L7:
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  99              		.loc 1 204 0
 100 0016 2046     		mov	r0, r4
 101 0018 10BD     		pop	{r4, pc}
 102              		.cfi_endproc
 103              	.LFE140:
 105 001a 00BF     		.section	.text.xEventGroupWaitBits,"ax",%progbits
 106              		.align	2
 107              		.global	xEventGroupWaitBits
 108              		.thumb
 109              		.thumb_func
 111              	xEventGroupWaitBits:
 112              	.LFB142:
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 113              		.loc 1 326 0
 114              		.cfi_startproc
 115              		@ args = 4, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL10:
 118 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 119              	.LCFI1:
 120              		.cfi_def_cfa_offset 32
 121              		.cfi_offset 3, -32
 122              		.cfi_offset 4, -28
 123              		.cfi_offset 5, -24
 124              		.cfi_offset 6, -20
 125              		.cfi_offset 7, -16
 126              		.cfi_offset 8, -12
 127              		.cfi_offset 9, -8
 128              		.cfi_offset 14, -4
 129 0004 089F     		ldr	r7, [sp, #32]
 130              	.LVL11:
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 131              		.loc 1 334 0
 132 0006 50B9     		cbnz	r0, .L10
 133              	.LBB31:
 134              	.LBB32:
ARM GAS  /tmp/ccSfhCVW.s 			page 16


 135              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
ARM GAS  /tmp/ccSfhCVW.s 			page 17


  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccSfhCVW.s 			page 18


 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccSfhCVW.s 			page 19


 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccSfhCVW.s 			page 20


 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 136              		.loc 2 237 0
 137              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 138 0008 4FF05003 			mov r3, #80												
 139 000c 72B6     		cpsid i													
 140 000e 83F31188 		msr basepri, r3											
 141 0012 BFF36F8F 		isb														
 142 0016 BFF34F8F 		dsb														
 143 001a 62B6     		cpsie i													
 144              	
 145              	@ 0 "" 2
 146              	.LVL12:
 147              		.thumb
 148              	.L11:
 149              	.LBE32:
 150              	.LBE31:
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 151              		.loc 1 334 0 discriminator 1
 152 001c FEE7     		b	.L11
 153              	.LVL13:
 154              	.L10:
 155 001e 0646     		mov	r6, r0
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 156              		.loc 1 335 0
 157 0020 11F07F4F 		tst	r1, #-16777216
 158 0024 0AD0     		beq	.L12
 159              	.LBB33:
 160              	.LBB34:
 161              		.loc 2 237 0
 162              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 163 0026 4FF05003 			mov r3, #80												
 164 002a 72B6     		cpsid i													
 165 002c 83F31188 		msr basepri, r3											
 166 0030 BFF36F8F 		isb														
 167 0034 BFF34F8F 		dsb														
 168 0038 62B6     		cpsie i													
 169              	
 170              	@ 0 "" 2
 171              	.LVL14:
 172              		.thumb
 173              	.L13:
 174              	.LBE34:
 175              	.LBE33:
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 176              		.loc 1 335 0 discriminator 2
 177 003a FEE7     		b	.L13
 178              	.LVL15:
 179              	.L12:
ARM GAS  /tmp/ccSfhCVW.s 			page 21


 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 180              		.loc 1 336 0
 181 003c 51B9     		cbnz	r1, .L14
 182              	.LBB35:
 183              	.LBB36:
 184              		.loc 2 237 0
 185              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 186 003e 4FF05003 			mov r3, #80												
 187 0042 72B6     		cpsid i													
 188 0044 83F31188 		msr basepri, r3											
 189 0048 BFF36F8F 		isb														
 190 004c BFF34F8F 		dsb														
 191 0050 62B6     		cpsie i													
 192              	
 193              	@ 0 "" 2
 194              	.LVL16:
 195              		.thumb
 196              	.L15:
 197              	.LBE36:
 198              	.LBE35:
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 199              		.loc 1 336 0 discriminator 3
 200 0052 FEE7     		b	.L15
 201              	.LVL17:
 202              	.L14:
 203 0054 9946     		mov	r9, r3
 204 0056 9046     		mov	r8, r2
 205 0058 0D46     		mov	r5, r1
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 206              		.loc 1 339 0
 207 005a FFF7FEFF 		bl	xTaskGetSchedulerState
 208              	.LVL18:
 209 005e 10B9     		cbnz	r0, .L27
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 210              		.loc 1 339 0 is_stmt 0 discriminator 2
 211 0060 1FB9     		cbnz	r7, .L28
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 212              		.loc 1 339 0
 213 0062 0123     		movs	r3, #1
 214 0064 02E0     		b	.L16
 215              	.L27:
 216 0066 0123     		movs	r3, #1
 217 0068 00E0     		b	.L16
 218              	.L28:
 219 006a 0023     		movs	r3, #0
 220              	.L16:
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 221              		.loc 1 339 0 discriminator 6
 222 006c 53B9     		cbnz	r3, .L17
 223              	.LBB37:
 224              	.LBB38:
 225              		.loc 2 237 0 is_stmt 1
 226              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 227 006e 4FF05003 			mov r3, #80												
 228 0072 72B6     		cpsid i													
 229 0074 83F31188 		msr basepri, r3											
 230 0078 BFF36F8F 		isb														
ARM GAS  /tmp/ccSfhCVW.s 			page 22


 231 007c BFF34F8F 		dsb														
 232 0080 62B6     		cpsie i													
 233              	
 234              	@ 0 "" 2
 235              	.LVL19:
 236              		.thumb
 237              	.L18:
 238              	.LBE38:
 239              	.LBE37:
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 240              		.loc 1 339 0 discriminator 4
 241 0082 FEE7     		b	.L18
 242              	.L17:
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 243              		.loc 1 343 0
 244 0084 FFF7FEFF 		bl	vTaskSuspendAll
 245              	.LVL20:
 246              	.LBB39:
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 247              		.loc 1 345 0
 248 0088 3468     		ldr	r4, [r6]
 249              	.LVL21:
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 250              		.loc 1 348 0
 251 008a 2046     		mov	r0, r4
 252 008c 2946     		mov	r1, r5
 253 008e 4A46     		mov	r2, r9
 254 0090 FFF7FEFF 		bl	prvTestWaitCondition
 255              	.LVL22:
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 256              		.loc 1 350 0
 257 0094 38B1     		cbz	r0, .L19
 258              	.LVL23:
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 259              		.loc 1 358 0
 260 0096 B8F1000F 		cmp	r8, #0
 261 009a 18D0     		beq	.L29
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 262              		.loc 1 360 0
 263 009c 24EA0503 		bic	r3, r4, r5
 264 00a0 3360     		str	r3, [r6]
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 265              		.loc 1 355 0
 266 00a2 0027     		movs	r7, #0
 267 00a4 14E0     		b	.L20
 268              	.LVL24:
 269              	.L19:
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 270              		.loc 1 367 0
 271 00a6 9FB1     		cbz	r7, .L20
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 272              		.loc 1 379 0
 273 00a8 B8F1000F 		cmp	r8, #0
 274 00ac 01D1     		bne	.L30
 275              	.LBE39:
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 276              		.loc 1 328 0
ARM GAS  /tmp/ccSfhCVW.s 			page 23


 277 00ae 0021     		movs	r1, #0
 278 00b0 01E0     		b	.L21
 279              	.L30:
 280              	.LBB40:
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 281              		.loc 1 381 0
 282 00b2 4FF08071 		mov	r1, #16777216
 283              	.L21:
 284              	.LVL25:
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 285              		.loc 1 388 0
 286 00b6 B9F1000F 		cmp	r9, #0
 287 00ba 01D0     		beq	.L22
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 288              		.loc 1 390 0
 289 00bc 41F08061 		orr	r1, r1, #67108864
 290              	.LVL26:
 291              	.L22:
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 292              		.loc 1 400 0
 293 00c0 301D     		adds	r0, r6, #4
 294              	.LVL27:
 295 00c2 2943     		orrs	r1, r1, r5
 296              	.LVL28:
 297 00c4 3A46     		mov	r2, r7
 298 00c6 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 299              	.LVL29:
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 300              		.loc 1 405 0
 301 00ca 0024     		movs	r4, #0
 302              	.LVL30:
 303 00cc 00E0     		b	.L20
 304              	.LVL31:
 305              	.L29:
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 306              		.loc 1 355 0
 307 00ce 0027     		movs	r7, #0
 308              	.LVL32:
 309              	.L20:
 310              	.LBE40:
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 311              		.loc 1 410 0
 312 00d0 FFF7FEFF 		bl	xTaskResumeAll
 313              	.LVL33:
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 314              		.loc 1 412 0
 315 00d4 0FB3     		cbz	r7, .L23
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 316              		.loc 1 414 0
 317 00d6 38B9     		cbnz	r0, .L24
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 318              		.loc 1 416 0
 319 00d8 4FF08052 		mov	r2, #268435456
 320 00dc 104B     		ldr	r3, .L32
 321 00de 1A60     		str	r2, [r3]
 322              	@ 416 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 323 00e0 BFF34F8F 		dsb
ARM GAS  /tmp/ccSfhCVW.s 			page 24


 324              	@ 0 "" 2
 325              	@ 416 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 326 00e4 BFF36F8F 		isb
 327              	@ 0 "" 2
 328              		.thumb
 329              	.L24:
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 330              		.loc 1 427 0
 331 00e8 FFF7FEFF 		bl	uxTaskResetEventItemValue
 332              	.LVL34:
 333 00ec 0446     		mov	r4, r0
 334              	.LVL35:
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 335              		.loc 1 429 0
 336 00ee 10F0007F 		tst	r0, #33554432
 337 00f2 10D1     		bne	.L25
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 338              		.loc 1 431 0
 339 00f4 FFF7FEFF 		bl	vPortEnterCritical
 340              	.LVL36:
 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 341              		.loc 1 434 0
 342 00f8 3468     		ldr	r4, [r6]
 343              	.LVL37:
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 344              		.loc 1 438 0
 345 00fa 2046     		mov	r0, r4
 346 00fc 2946     		mov	r1, r5
 347 00fe 4A46     		mov	r2, r9
 348 0100 FFF7FEFF 		bl	prvTestWaitCondition
 349              	.LVL38:
 350 0104 28B1     		cbz	r0, .L26
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 351              		.loc 1 440 0
 352 0106 B8F1000F 		cmp	r8, #0
 353 010a 02D0     		beq	.L26
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 354              		.loc 1 442 0
 355 010c 24EA0505 		bic	r5, r4, r5
 356              	.LVL39:
 357 0110 3560     		str	r5, [r6]
 358              	.L26:
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 359              		.loc 1 454 0
 360 0112 FFF7FEFF 		bl	vPortExitCritical
 361              	.LVL40:
 362              	.L25:
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 363              		.loc 1 465 0
 364 0116 24F07F44 		bic	r4, r4, #-16777216
 365              	.LVL41:
 366              	.L23:
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 367              		.loc 1 470 0
 368 011a 2046     		mov	r0, r4
 369 011c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 370              	.LVL42:
ARM GAS  /tmp/ccSfhCVW.s 			page 25


 371              	.L33:
 372              		.align	2
 373              	.L32:
 374 0120 04ED00E0 		.word	-536810236
 375              		.cfi_endproc
 376              	.LFE142:
 378              		.section	.text.xEventGroupClearBits,"ax",%progbits
 379              		.align	2
 380              		.global	xEventGroupClearBits
 381              		.thumb
 382              		.thumb_func
 384              	xEventGroupClearBits:
 385              	.LFB143:
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 386              		.loc 1 474 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              	.LVL43:
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 391              		.loc 1 480 0
 392 0000 50B9     		cbnz	r0, .L35
 393              	.LBB41:
 394              	.LBB42:
 395              		.loc 2 237 0
 396              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 397 0002 4FF05003 			mov r3, #80												
 398 0006 72B6     		cpsid i													
 399 0008 83F31188 		msr basepri, r3											
 400 000c BFF36F8F 		isb														
 401 0010 BFF34F8F 		dsb														
 402 0014 62B6     		cpsie i													
 403              	
 404              	@ 0 "" 2
 405              	.LVL44:
 406              		.thumb
 407              	.L36:
 408              	.LBE42:
 409              	.LBE41:
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 410              		.loc 1 480 0 discriminator 1
 411 0016 FEE7     		b	.L36
 412              	.L35:
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 413              		.loc 1 474 0
 414 0018 70B5     		push	{r4, r5, r6, lr}
 415              	.LCFI2:
 416              		.cfi_def_cfa_offset 16
 417              		.cfi_offset 4, -16
 418              		.cfi_offset 5, -12
 419              		.cfi_offset 6, -8
 420              		.cfi_offset 14, -4
 421 001a 0546     		mov	r5, r0
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 422              		.loc 1 481 0
 423 001c 11F07F4F 		tst	r1, #-16777216
 424 0020 0AD0     		beq	.L37
ARM GAS  /tmp/ccSfhCVW.s 			page 26


 425              	.LBB43:
 426              	.LBB44:
 427              		.loc 2 237 0
 428              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 429 0022 4FF05003 			mov r3, #80												
 430 0026 72B6     		cpsid i													
 431 0028 83F31188 		msr basepri, r3											
 432 002c BFF36F8F 		isb														
 433 0030 BFF34F8F 		dsb														
 434 0034 62B6     		cpsie i													
 435              	
 436              	@ 0 "" 2
 437              	.LVL45:
 438              		.thumb
 439              	.L38:
 440              	.LBE44:
 441              	.LBE43:
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 442              		.loc 1 481 0 discriminator 2
 443 0036 FEE7     		b	.L38
 444              	.L37:
 445 0038 0C46     		mov	r4, r1
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 446              		.loc 1 483 0
 447 003a FFF7FEFF 		bl	vPortEnterCritical
 448              	.LVL46:
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 449              		.loc 1 489 0
 450 003e 2E68     		ldr	r6, [r5]
 451              	.LVL47:
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 452              		.loc 1 492 0
 453 0040 26EA0401 		bic	r1, r6, r4
 454 0044 2960     		str	r1, [r5]
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 455              		.loc 1 494 0
 456 0046 FFF7FEFF 		bl	vPortExitCritical
 457              	.LVL48:
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 458              		.loc 1 497 0
 459 004a 3046     		mov	r0, r6
 460 004c 70BD     		pop	{r4, r5, r6, pc}
 461              		.cfi_endproc
 462              	.LFE143:
 464 004e 00BF     		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 465              		.align	2
 466              		.global	xEventGroupGetBitsFromISR
 467              		.thumb
 468              		.thumb_func
 470              	xEventGroupGetBitsFromISR:
 471              	.LFB144:
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 472              		.loc 1 516 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
ARM GAS  /tmp/ccSfhCVW.s 			page 27


 477              	.LVL49:
 478              	.LBB45:
 479              	.LBB46:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 480              		.loc 2 255 0
 481              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 482 0000 EFF31183 			mrs r3, basepri											
 483 0004 4FF05002 		mov r2, #80												
 484 0008 72B6     		cpsid i													
 485 000a 82F31188 		msr basepri, r2											
 486 000e BFF36F8F 		isb														
 487 0012 BFF34F8F 		dsb														
 488 0016 62B6     		cpsie i													
 489              	
 490              	@ 0 "" 2
 491              	.LVL50:
 492              		.thumb
 493              	.LBE46:
 494              	.LBE45:
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 495              		.loc 1 523 0
 496 0018 0068     		ldr	r0, [r0]
 497              	.LVL51:
 498              	.LBB47:
 499              	.LBB48:
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
ARM GAS  /tmp/ccSfhCVW.s 			page 28


 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 272:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 274:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 275:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 500              		.loc 2 275 0
 501              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 502 001a 83F31188 			msr basepri, r3	
 503              	@ 0 "" 2
 504              		.thumb
 505              	.LBE48:
 506              	.LBE47:
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 507              		.loc 1 528 0
 508 001e 7047     		bx	lr
 509              		.cfi_endproc
 510              	.LFE144:
 512              		.section	.text.xEventGroupSetBits,"ax",%progbits
 513              		.align	2
 514              		.global	xEventGroupSetBits
 515              		.thumb
 516              		.thumb_func
 518              	xEventGroupSetBits:
 519              	.LFB145:
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 520              		.loc 1 532 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              	.LVL52:
 525 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 526              	.LCFI3:
 527              		.cfi_def_cfa_offset 24
 528              		.cfi_offset 3, -24
 529              		.cfi_offset 4, -20
 530              		.cfi_offset 5, -16
 531              		.cfi_offset 6, -12
 532              		.cfi_offset 7, -8
 533              		.cfi_offset 14, -4
 534              	.LVL53:
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 535              		.loc 1 542 0
 536 0002 50B9     		cbnz	r0, .L42
 537              	.LBB49:
 538              	.LBB50:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 539              		.loc 2 237 0
 540              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 541 0004 4FF05003 			mov r3, #80												
 542 0008 72B6     		cpsid i													
 543 000a 83F31188 		msr basepri, r3											
 544 000e BFF36F8F 		isb														
 545 0012 BFF34F8F 		dsb														
 546 0016 62B6     		cpsie i													
 547              	
 548              	@ 0 "" 2
 549              	.LVL54:
ARM GAS  /tmp/ccSfhCVW.s 			page 29


 550              		.thumb
 551              	.L43:
 552              	.LBE50:
 553              	.LBE49:
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 554              		.loc 1 542 0 discriminator 1
 555 0018 FEE7     		b	.L43
 556              	.L42:
 557 001a 0446     		mov	r4, r0
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 558              		.loc 1 543 0
 559 001c 11F07F4F 		tst	r1, #-16777216
 560 0020 0AD0     		beq	.L44
 561              	.LBB51:
 562              	.LBB52:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 563              		.loc 2 237 0
 564              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 565 0022 4FF05003 			mov r3, #80												
 566 0026 72B6     		cpsid i													
 567 0028 83F31188 		msr basepri, r3											
 568 002c BFF36F8F 		isb														
 569 0030 BFF34F8F 		dsb														
 570 0034 62B6     		cpsie i													
 571              	
 572              	@ 0 "" 2
 573              	.LVL55:
 574              		.thumb
 575              	.L45:
 576              	.LBE52:
 577              	.LBE51:
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 578              		.loc 1 543 0 discriminator 2
 579 0036 FEE7     		b	.L45
 580              	.L44:
 581 0038 0D46     		mov	r5, r1
 582              	.LVL56:
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 583              		.loc 1 546 0
 584 003a 00F10C06 		add	r6, r0, #12
 585              	.LVL57:
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 586              		.loc 1 547 0
 587 003e FFF7FEFF 		bl	vTaskSuspendAll
 588              	.LVL58:
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 589              		.loc 1 551 0
 590 0042 2069     		ldr	r0, [r4, #16]
 591              	.LVL59:
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 592              		.loc 1 554 0
 593 0044 2168     		ldr	r1, [r4]
 594 0046 2943     		orrs	r1, r1, r5
 595 0048 2160     		str	r1, [r4]
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 596              		.loc 1 536 0
 597 004a 0025     		movs	r5, #0
ARM GAS  /tmp/ccSfhCVW.s 			page 30


 598              	.LVL60:
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 599              		.loc 1 557 0
 600 004c 1FE0     		b	.L46
 601              	.LVL61:
 602              	.L51:
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 603              		.loc 1 559 0
 604 004e 4768     		ldr	r7, [r0, #4]
 605              	.LVL62:
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 606              		.loc 1 560 0
 607 0050 0168     		ldr	r1, [r0]
 608              	.LVL63:
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 609              		.loc 1 565 0
 610 0052 21F07F43 		bic	r3, r1, #-16777216
 611              	.LVL64:
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 612              		.loc 1 567 0
 613 0056 11F0806F 		tst	r1, #67108864
 614 005a 04D1     		bne	.L47
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 615              		.loc 1 570 0
 616 005c 2268     		ldr	r2, [r4]
 617 005e 1A42     		tst	r2, r3
 618 0060 07D1     		bne	.L52
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 619              		.loc 1 561 0
 620 0062 0022     		movs	r2, #0
 621 0064 08E0     		b	.L48
 622              	.L47:
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 623              		.loc 1 579 0
 624 0066 2268     		ldr	r2, [r4]
 625 0068 1A40     		ands	r2, r2, r3
 626 006a 9A42     		cmp	r2, r3
 627 006c 03D0     		beq	.L53
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 628              		.loc 1 561 0
 629 006e 0022     		movs	r2, #0
 630 0070 02E0     		b	.L48
 631              	.L52:
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 632              		.loc 1 572 0
 633 0072 0122     		movs	r2, #1
 634 0074 00E0     		b	.L48
 635              	.L53:
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 636              		.loc 1 582 0
 637 0076 0122     		movs	r2, #1
 638              	.L48:
 639              	.LVL65:
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 640              		.loc 1 589 0
 641 0078 42B1     		cbz	r2, .L49
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
ARM GAS  /tmp/ccSfhCVW.s 			page 31


 642              		.loc 1 592 0
 643 007a 11F0807F 		tst	r1, #16777216
 644 007e 00D0     		beq	.L50
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 645              		.loc 1 594 0
 646 0080 1D43     		orrs	r5, r5, r3
 647              	.LVL66:
 648              	.L50:
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 649              		.loc 1 606 0
 650 0082 2168     		ldr	r1, [r4]
 651              	.LVL67:
 652 0084 41F00071 		orr	r1, r1, #33554432
 653 0088 FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 654              	.LVL68:
 655              	.L49:
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 656              		.loc 1 612 0
 657 008c 3846     		mov	r0, r7
 658              	.LVL69:
 659              	.L46:
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 660              		.loc 1 557 0
 661 008e B042     		cmp	r0, r6
 662 0090 DDD1     		bne	.L51
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 663              		.loc 1 617 0
 664 0092 2368     		ldr	r3, [r4]
 665 0094 23EA0503 		bic	r3, r3, r5
 666 0098 2360     		str	r3, [r4]
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 667              		.loc 1 619 0
 668 009a FFF7FEFF 		bl	xTaskResumeAll
 669              	.LVL70:
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 670              		.loc 1 622 0
 671 009e 2068     		ldr	r0, [r4]
 672 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 673              		.cfi_endproc
 674              	.LFE145:
 676 00a2 00BF     		.section	.text.xEventGroupSync,"ax",%progbits
 677              		.align	2
 678              		.global	xEventGroupSync
 679              		.thumb
 680              		.thumb_func
 682              	xEventGroupSync:
 683              	.LFB141:
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 684              		.loc 1 210 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              	.LVL71:
 689 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 690              	.LCFI4:
 691              		.cfi_def_cfa_offset 24
 692              		.cfi_offset 4, -24
ARM GAS  /tmp/ccSfhCVW.s 			page 32


 693              		.cfi_offset 5, -20
 694              		.cfi_offset 6, -16
 695              		.cfi_offset 7, -12
 696              		.cfi_offset 8, -8
 697              		.cfi_offset 14, -4
 698 0004 1546     		mov	r5, r2
 699              	.LVL72:
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 700              		.loc 1 216 0
 701 0006 12F07F4F 		tst	r2, #-16777216
 702 000a 0AD0     		beq	.L56
 703              	.LBB53:
 704              	.LBB54:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 705              		.loc 2 237 0
 706              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 707 000c 4FF05003 			mov r3, #80												
 708 0010 72B6     		cpsid i													
 709 0012 83F31188 		msr basepri, r3											
 710 0016 BFF36F8F 		isb														
 711 001a BFF34F8F 		dsb														
 712 001e 62B6     		cpsie i													
 713              	
 714              	@ 0 "" 2
 715              	.LVL73:
 716              		.thumb
 717              	.L57:
 718              	.LBE54:
 719              	.LBE53:
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 720              		.loc 1 216 0 discriminator 1
 721 0020 FEE7     		b	.L57
 722              	.LVL74:
 723              	.L56:
 724 0022 0646     		mov	r6, r0
 725              	.LVL75:
 726 0024 0C46     		mov	r4, r1
 727 0026 1F46     		mov	r7, r3
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 728              		.loc 1 217 0
 729 0028 52B9     		cbnz	r2, .L58
 730              	.LBB55:
 731              	.LBB56:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 732              		.loc 2 237 0
 733              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 734 002a 4FF05003 			mov r3, #80												
 735 002e 72B6     		cpsid i													
 736 0030 83F31188 		msr basepri, r3											
 737 0034 BFF36F8F 		isb														
 738 0038 BFF34F8F 		dsb														
 739 003c 62B6     		cpsie i													
 740              	
 741              	@ 0 "" 2
 742              	.LVL76:
 743              		.thumb
 744              	.L59:
ARM GAS  /tmp/ccSfhCVW.s 			page 33


 745              	.LBE56:
 746              	.LBE55:
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 747              		.loc 1 217 0 discriminator 2
 748 003e FEE7     		b	.L59
 749              	.LVL77:
 750              	.L58:
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 751              		.loc 1 220 0
 752 0040 FFF7FEFF 		bl	xTaskGetSchedulerState
 753              	.LVL78:
 754 0044 10B9     		cbnz	r0, .L70
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 755              		.loc 1 220 0 is_stmt 0 discriminator 2
 756 0046 1FB9     		cbnz	r7, .L71
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 757              		.loc 1 220 0
 758 0048 0123     		movs	r3, #1
 759 004a 02E0     		b	.L60
 760              	.L70:
 761 004c 0123     		movs	r3, #1
 762 004e 00E0     		b	.L60
 763              	.L71:
 764 0050 0023     		movs	r3, #0
 765              	.L60:
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 766              		.loc 1 220 0 discriminator 6
 767 0052 53B9     		cbnz	r3, .L61
 768              	.LBB57:
 769              	.LBB58:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 770              		.loc 2 237 0 is_stmt 1
 771              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 772 0054 4FF05003 			mov r3, #80												
 773 0058 72B6     		cpsid i													
 774 005a 83F31188 		msr basepri, r3											
 775 005e BFF36F8F 		isb														
 776 0062 BFF34F8F 		dsb														
 777 0066 62B6     		cpsie i													
 778              	
 779              	@ 0 "" 2
 780              	.LVL79:
 781              		.thumb
 782              	.L62:
 783              	.LBE58:
 784              	.LBE57:
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 785              		.loc 1 220 0 discriminator 3
 786 0068 FEE7     		b	.L62
 787              	.L61:
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 788              		.loc 1 224 0
 789 006a FFF7FEFF 		bl	vTaskSuspendAll
 790              	.LVL80:
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 791              		.loc 1 226 0
 792 006e D6F80080 		ldr	r8, [r6]
ARM GAS  /tmp/ccSfhCVW.s 			page 34


 793              	.LVL81:
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 794              		.loc 1 228 0
 795 0072 3046     		mov	r0, r6
 796 0074 2146     		mov	r1, r4
 797 0076 FFF7FEFF 		bl	xEventGroupSetBits
 798              	.LVL82:
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 799              		.loc 1 230 0
 800 007a 48EA0404 		orr	r4, r8, r4
 801              	.LVL83:
 802 007e 04EA0503 		and	r3, r4, r5
 803 0082 AB42     		cmp	r3, r5
 804 0084 05D1     		bne	.L63
 805              	.LVL84:
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 806              		.loc 1 237 0
 807 0086 3368     		ldr	r3, [r6]
 808 0088 23EA0503 		bic	r3, r3, r5
 809 008c 3360     		str	r3, [r6]
 810              	.LVL85:
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 811              		.loc 1 239 0
 812 008e 0027     		movs	r7, #0
 813 0090 09E0     		b	.L64
 814              	.LVL86:
 815              	.L63:
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 816              		.loc 1 243 0
 817 0092 3FB1     		cbz	r7, .L65
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 818              		.loc 1 250 0
 819 0094 301D     		adds	r0, r6, #4
 820 0096 45F0A061 		orr	r1, r5, #83886080
 821 009a 3A46     		mov	r2, r7
 822 009c FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 823              	.LVL87:
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 824              		.loc 1 256 0
 825 00a0 0024     		movs	r4, #0
 826 00a2 00E0     		b	.L64
 827              	.LVL88:
 828              	.L65:
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 829              		.loc 1 262 0
 830 00a4 3468     		ldr	r4, [r6]
 831              	.LVL89:
 832              	.L64:
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 833              		.loc 1 266 0
 834 00a6 FFF7FEFF 		bl	xTaskResumeAll
 835              	.LVL90:
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 836              		.loc 1 268 0
 837 00aa E7B1     		cbz	r7, .L66
 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 838              		.loc 1 270 0
ARM GAS  /tmp/ccSfhCVW.s 			page 35


 839 00ac 38B9     		cbnz	r0, .L67
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 840              		.loc 1 272 0
 841 00ae 4FF08052 		mov	r2, #268435456
 842 00b2 0E4B     		ldr	r3, .L73
 843 00b4 1A60     		str	r2, [r3]
 844              	@ 272 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 845 00b6 BFF34F8F 		dsb
 846              	@ 0 "" 2
 847              	@ 272 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 848 00ba BFF36F8F 		isb
 849              	@ 0 "" 2
 850              		.thumb
 851              	.L67:
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 852              		.loc 1 283 0
 853 00be FFF7FEFF 		bl	uxTaskResetEventItemValue
 854              	.LVL91:
 855 00c2 0446     		mov	r4, r0
 856              	.LVL92:
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 857              		.loc 1 285 0
 858 00c4 10F0007F 		tst	r0, #33554432
 859 00c8 0BD1     		bne	.L68
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 860              		.loc 1 288 0
 861 00ca FFF7FEFF 		bl	vPortEnterCritical
 862              	.LVL93:
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 863              		.loc 1 290 0
 864 00ce 3468     		ldr	r4, [r6]
 865              	.LVL94:
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 866              		.loc 1 296 0
 867 00d0 04EA0503 		and	r3, r4, r5
 868 00d4 AB42     		cmp	r3, r5
 869 00d6 02D1     		bne	.L69
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 870              		.loc 1 298 0
 871 00d8 24EA0505 		bic	r5, r4, r5
 872              	.LVL95:
 873 00dc 3560     		str	r5, [r6]
 874              	.L69:
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 875              		.loc 1 305 0
 876 00de FFF7FEFF 		bl	vPortExitCritical
 877              	.LVL96:
 878              	.L68:
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 879              		.loc 1 316 0
 880 00e2 24F07F44 		bic	r4, r4, #-16777216
 881              	.LVL97:
 882              	.L66:
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 883              		.loc 1 322 0
 884 00e6 2046     		mov	r0, r4
 885 00e8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/ccSfhCVW.s 			page 36


 886              	.LVL98:
 887              	.L74:
 888              		.align	2
 889              	.L73:
 890 00ec 04ED00E0 		.word	-536810236
 891              		.cfi_endproc
 892              	.LFE141:
 894              		.section	.text.vEventGroupDelete,"ax",%progbits
 895              		.align	2
 896              		.global	vEventGroupDelete
 897              		.thumb
 898              		.thumb_func
 900              	vEventGroupDelete:
 901              	.LFB146:
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 902              		.loc 1 626 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906              	.LVL99:
 907 0000 10B5     		push	{r4, lr}
 908              	.LCFI5:
 909              		.cfi_def_cfa_offset 8
 910              		.cfi_offset 4, -8
 911              		.cfi_offset 14, -4
 912 0002 0446     		mov	r4, r0
 913              	.LVL100:
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 914              		.loc 1 630 0
 915 0004 FFF7FEFF 		bl	vTaskSuspendAll
 916              	.LVL101:
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 917              		.loc 1 634 0
 918 0008 13E0     		b	.L76
 919              	.L79:
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 920              		.loc 1 638 0
 921 000a 2069     		ldr	r0, [r4, #16]
 922 000c 04F10C03 		add	r3, r4, #12
 923 0010 9842     		cmp	r0, r3
 924 0012 0AD1     		bne	.L77
 925              	.LBB59:
 926              	.LBB60:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 927              		.loc 2 237 0
 928              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 929 0014 4FF05003 			mov r3, #80												
 930 0018 72B6     		cpsid i													
 931 001a 83F31188 		msr basepri, r3											
 932 001e BFF36F8F 		isb														
 933 0022 BFF34F8F 		dsb														
 934 0026 62B6     		cpsie i													
 935              	
 936              	@ 0 "" 2
 937              	.LVL102:
 938              		.thumb
 939              	.L78:
ARM GAS  /tmp/ccSfhCVW.s 			page 37


 940              	.LBE60:
 941              	.LBE59:
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 942              		.loc 1 638 0 discriminator 1
 943 0028 FEE7     		b	.L78
 944              	.L77:
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 945              		.loc 1 639 0
 946 002a 4FF00071 		mov	r1, #33554432
 947 002e FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 948              	.LVL103:
 949              	.L76:
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 950              		.loc 1 634 0
 951 0032 6368     		ldr	r3, [r4, #4]
 952 0034 002B     		cmp	r3, #0
 953 0036 E8D1     		bne	.L79
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 954              		.loc 1 646 0
 955 0038 2046     		mov	r0, r4
 956 003a FFF7FEFF 		bl	vPortFree
 957              	.LVL104:
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 958              		.loc 1 663 0
 959 003e FFF7FEFF 		bl	xTaskResumeAll
 960              	.LVL105:
 961 0042 10BD     		pop	{r4, pc}
 962              		.cfi_endproc
 963              	.LFE146:
 965              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 966              		.align	2
 967              		.global	vEventGroupSetBitsCallback
 968              		.thumb
 969              		.thumb_func
 971              	vEventGroupSetBitsCallback:
 972              	.LFB147:
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 973              		.loc 1 670 0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 0
 976              		@ frame_needed = 0, uses_anonymous_args = 0
 977              	.LVL106:
 978 0000 08B5     		push	{r3, lr}
 979              	.LCFI6:
 980              		.cfi_def_cfa_offset 8
 981              		.cfi_offset 3, -8
 982              		.cfi_offset 14, -4
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 983              		.loc 1 671 0
 984 0002 FFF7FEFF 		bl	xEventGroupSetBits
 985              	.LVL107:
 986 0006 08BD     		pop	{r3, pc}
 987              		.cfi_endproc
 988              	.LFE147:
 990              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 991              		.align	2
 992              		.global	vEventGroupClearBitsCallback
ARM GAS  /tmp/ccSfhCVW.s 			page 38


 993              		.thumb
 994              		.thumb_func
 996              	vEventGroupClearBitsCallback:
 997              	.LFB148:
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 998              		.loc 1 678 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 0
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002              	.LVL108:
 1003 0000 08B5     		push	{r3, lr}
 1004              	.LCFI7:
 1005              		.cfi_def_cfa_offset 8
 1006              		.cfi_offset 3, -8
 1007              		.cfi_offset 14, -4
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1008              		.loc 1 679 0
 1009 0002 FFF7FEFF 		bl	xEventGroupClearBits
 1010              	.LVL109:
 1011 0006 08BD     		pop	{r3, pc}
 1012              		.cfi_endproc
 1013              	.LFE148:
 1015              		.text
 1016              	.Letext0:
 1017              		.file 3 "/home/reglisse/opt/gcc-arm-none-eabi-4_9-2015q3/lib/gcc/arm-none-eabi/4.9.3/include/stdde
 1018              		.file 4 "/home/reglisse/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/machine/_default_ty
 1019              		.file 5 "/home/reglisse/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/sys/_stdint.h"
 1020              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1021              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
 1022              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1023              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 1024              		.file 10 "Drivers/CMSIS/Include/core_cm7.h"
ARM GAS  /tmp/ccSfhCVW.s 			page 39


DEFINED SYMBOLS
                            *ABS*:00000000 event_groups.c
     /tmp/ccSfhCVW.s:20     .text.prvTestWaitCondition:00000000 $t
     /tmp/ccSfhCVW.s:24     .text.prvTestWaitCondition:00000000 prvTestWaitCondition
     /tmp/ccSfhCVW.s:68     .text.xEventGroupCreate:00000000 $t
     /tmp/ccSfhCVW.s:73     .text.xEventGroupCreate:00000000 xEventGroupCreate
     /tmp/ccSfhCVW.s:106    .text.xEventGroupWaitBits:00000000 $t
     /tmp/ccSfhCVW.s:111    .text.xEventGroupWaitBits:00000000 xEventGroupWaitBits
     /tmp/ccSfhCVW.s:374    .text.xEventGroupWaitBits:00000120 $d
     /tmp/ccSfhCVW.s:379    .text.xEventGroupClearBits:00000000 $t
     /tmp/ccSfhCVW.s:384    .text.xEventGroupClearBits:00000000 xEventGroupClearBits
     /tmp/ccSfhCVW.s:465    .text.xEventGroupGetBitsFromISR:00000000 $t
     /tmp/ccSfhCVW.s:470    .text.xEventGroupGetBitsFromISR:00000000 xEventGroupGetBitsFromISR
     /tmp/ccSfhCVW.s:513    .text.xEventGroupSetBits:00000000 $t
     /tmp/ccSfhCVW.s:518    .text.xEventGroupSetBits:00000000 xEventGroupSetBits
     /tmp/ccSfhCVW.s:677    .text.xEventGroupSync:00000000 $t
     /tmp/ccSfhCVW.s:682    .text.xEventGroupSync:00000000 xEventGroupSync
     /tmp/ccSfhCVW.s:890    .text.xEventGroupSync:000000ec $d
     /tmp/ccSfhCVW.s:895    .text.vEventGroupDelete:00000000 $t
     /tmp/ccSfhCVW.s:900    .text.vEventGroupDelete:00000000 vEventGroupDelete
     /tmp/ccSfhCVW.s:966    .text.vEventGroupSetBitsCallback:00000000 $t
     /tmp/ccSfhCVW.s:971    .text.vEventGroupSetBitsCallback:00000000 vEventGroupSetBitsCallback
     /tmp/ccSfhCVW.s:991    .text.vEventGroupClearBitsCallback:00000000 $t
     /tmp/ccSfhCVW.s:996    .text.vEventGroupClearBitsCallback:00000000 vEventGroupClearBitsCallback
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
xTaskRemoveFromUnorderedEventList
vPortFree
