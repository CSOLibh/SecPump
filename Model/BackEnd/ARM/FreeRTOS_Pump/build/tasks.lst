ARM GAS  /tmp/ccLSYPfk.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvTaskIsTaskSuspended:
  25              	.LFB149:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /tmp/ccLSYPfk.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stm32f7xx_hal.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  /tmp/ccLSYPfk.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
ARM GAS  /tmp/ccLSYPfk.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
ARM GAS  /tmp/ccLSYPfk.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
ARM GAS  /tmp/ccLSYPfk.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
ARM GAS  /tmp/ccLSYPfk.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFA
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a t
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of e
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
ARM GAS  /tmp/ccLSYPfk.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseTaskLists( void );
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static void prvDeleteTCB( TCB_t *pxTCB );
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
ARM GAS  /tmp/ccLSYPfk.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvCheckTasksWaitingTermination( void );
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const Base
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArr
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcN
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte );
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TickType_t prvGetExpectedIdleTime( void );
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ); /*lint !e971 Unqualified char types are allowed f
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB );
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccLSYPfk.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
ARM GAS  /tmp/ccLSYPfk.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
ARM GAS  /tmp/ccLSYPfk.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
ARM GAS  /tmp/ccLSYPfk.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  /tmp/ccLSYPfk.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  /tmp/ccLSYPfk.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccLSYPfk.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccLSYPfk.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccLSYPfk.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  /tmp/ccLSYPfk.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccLSYPfk.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccLSYPfk.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/ccLSYPfk.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccLSYPfk.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccLSYPfk.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccLSYPfk.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1658 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1666 0
  34 0000 0246     		mov	r2, r0
  35 0002 50B9     		cbnz	r0, .L2
  36              	.LBB90:
  37              	.LBB91:
  38              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     This file is part of the FreeRTOS distribution.
ARM GAS  /tmp/ccLSYPfk.s 			page 31


   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
ARM GAS  /tmp/ccLSYPfk.s 			page 32


  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
ARM GAS  /tmp/ccLSYPfk.s 			page 33


 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
ARM GAS  /tmp/ccLSYPfk.s 			page 34


 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
ARM GAS  /tmp/ccLSYPfk.s 			page 35


 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
  39              		.loc 2 237 0
  40              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  41 0004 4FF05003 			mov r3, #80												
  42 0008 72B6     		cpsid i													
  43 000a 83F31188 		msr basepri, r3											
  44 000e BFF36F8F 		isb														
  45 0012 BFF34F8F 		dsb														
  46 0016 62B6     		cpsie i													
  47              	
  48              	@ 0 "" 2
  49              	.LVL1:
  50              		.thumb
  51              	.L3:
  52              	.LBE91:
  53              	.LBE90:
  54              		.loc 1 1666 0 discriminator 1
  55 0018 FEE7     		b	.L3
  56              	.L2:
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  57              		.loc 1 1669 0
  58 001a 4169     		ldr	r1, [r0, #20]
  59 001c 0A4B     		ldr	r3, .L12
  60 001e 9942     		cmp	r1, r3
  61 0020 01D1     		bne	.L7
  62 0022 0123     		movs	r3, #1
  63 0024 00E0     		b	.L4
  64              	.L7:
  65 0026 0023     		movs	r3, #0
  66              	.L4:
  67              		.loc 1 1669 0 is_stmt 0 discriminator 4
  68 0028 43B1     		cbz	r3, .L8
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  69              		.loc 1 1672 0 is_stmt 1
  70 002a 926A     		ldr	r2, [r2, #40]
  71 002c 0749     		ldr	r1, .L12+4
  72 002e 8A42     		cmp	r2, r1
  73 0030 06D0     		beq	.L9
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  74              		.loc 1 1676 0
  75 0032 02B1     		cbz	r2, .L6
  76 0034 0023     		movs	r3, #0
  77              	.L6:
  78              		.loc 1 1676 0 is_stmt 0 discriminator 4
  79 0036 2BB9     		cbnz	r3, .L11
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  80              		.loc 1 1659 0 is_stmt 1
  81 0038 0020     		movs	r0, #0
  82              	.LVL2:
ARM GAS  /tmp/ccLSYPfk.s 			page 36


  83 003a 7047     		bx	lr
  84              	.LVL3:
  85              	.L8:
  86 003c 0020     		movs	r0, #0
  87              	.LVL4:
  88 003e 7047     		bx	lr
  89              	.LVL5:
  90              	.L9:
  91 0040 0020     		movs	r0, #0
  92              	.LVL6:
  93 0042 7047     		bx	lr
  94              	.LVL7:
  95              	.L11:
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  96              		.loc 1 1678 0
  97 0044 0120     		movs	r0, #1
  98              	.LVL8:
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  99              		.loc 1 1696 0
 100 0046 7047     		bx	lr
 101              	.L13:
 102              		.align	2
 103              	.L12:
 104 0048 00000000 		.word	.LANCHOR0
 105 004c 00000000 		.word	.LANCHOR1
 106              		.cfi_endproc
 107              	.LFE149:
 109              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 110              		.align	2
 111              		.thumb
 112              		.thumb_func
 114              	prvResetNextTaskUnblockTime:
 115              	.LFB173:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 37


1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
ARM GAS  /tmp/ccLSYPfk.s 			page 38


1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccLSYPfk.s 			page 39


1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
ARM GAS  /tmp/ccLSYPfk.s 			page 40


1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
ARM GAS  /tmp/ccLSYPfk.s 			page 41


1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/ccLSYPfk.s 			page 42


1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
ARM GAS  /tmp/ccLSYPfk.s 			page 43


2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 44


2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  /tmp/ccLSYPfk.s 			page 45


2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccLSYPfk.s 			page 46


2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 47


2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
ARM GAS  /tmp/ccLSYPfk.s 			page 48


2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
ARM GAS  /tmp/ccLSYPfk.s 			page 49


2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
ARM GAS  /tmp/ccLSYPfk.s 			page 50


2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
ARM GAS  /tmp/ccLSYPfk.s 			page 51


2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccLSYPfk.s 			page 52


2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
ARM GAS  /tmp/ccLSYPfk.s 			page 53


2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 54


2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccLSYPfk.s 			page 55


2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
ARM GAS  /tmp/ccLSYPfk.s 			page 56


2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
ARM GAS  /tmp/ccLSYPfk.s 			page 57


2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 58


2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccLSYPfk.s 			page 59


2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccLSYPfk.s 			page 60


3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccLSYPfk.s 			page 61


3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
ARM GAS  /tmp/ccLSYPfk.s 			page 62


3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
ARM GAS  /tmp/ccLSYPfk.s 			page 63


3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
ARM GAS  /tmp/ccLSYPfk.s 			page 64


3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccLSYPfk.s 			page 65


3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
ARM GAS  /tmp/ccLSYPfk.s 			page 66


3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
ARM GAS  /tmp/ccLSYPfk.s 			page 67


3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
ARM GAS  /tmp/ccLSYPfk.s 			page 68


3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
ARM GAS  /tmp/ccLSYPfk.s 			page 69


3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccLSYPfk.s 			page 70


3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 116              		.loc 1 3637 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccLSYPfk.s 			page 71


 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 121              		.loc 1 3640 0
 122 0000 0A4B     		ldr	r3, .L19
 123 0002 1B68     		ldr	r3, [r3]
 124 0004 1B68     		ldr	r3, [r3]
 125 0006 0BB9     		cbnz	r3, .L18
 126 0008 0123     		movs	r3, #1
 127 000a 00E0     		b	.L15
 128              	.L18:
 129 000c 0023     		movs	r3, #0
 130              	.L15:
 131              		.loc 1 3640 0 is_stmt 0 discriminator 4
 132 000e 23B1     		cbz	r3, .L16
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 133              		.loc 1 3646 0 is_stmt 1
 134 0010 4FF0FF32 		mov	r2, #-1
 135 0014 064B     		ldr	r3, .L19+4
 136 0016 1A60     		str	r2, [r3]
 137 0018 7047     		bx	lr
 138              	.L16:
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 139              		.loc 1 3654 0
 140 001a 044B     		ldr	r3, .L19
 141 001c 1B68     		ldr	r3, [r3]
 142 001e DB68     		ldr	r3, [r3, #12]
 143 0020 DB68     		ldr	r3, [r3, #12]
 144              	.LVL9:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 145              		.loc 1 3655 0
 146 0022 5A68     		ldr	r2, [r3, #4]
 147 0024 024B     		ldr	r3, .L19+4
 148              	.LVL10:
 149 0026 1A60     		str	r2, [r3]
 150 0028 7047     		bx	lr
 151              	.L20:
 152 002a 00BF     		.align	2
 153              	.L19:
 154 002c 00000000 		.word	.LANCHOR2
 155 0030 00000000 		.word	.LANCHOR3
 156              		.cfi_endproc
 157              	.LFE173:
ARM GAS  /tmp/ccLSYPfk.s 			page 72


 159              		.section	.text.prvDeleteTCB,"ax",%progbits
 160              		.align	2
 161              		.thumb
 162              		.thumb_func
 164              	prvDeleteTCB:
 165              	.LFB172:
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 166              		.loc 1 3583 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              	.LVL11:
 171 0000 10B5     		push	{r4, lr}
 172              	.LCFI0:
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 4, -8
 175              		.cfi_offset 14, -4
 176 0002 0446     		mov	r4, r0
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 177              		.loc 1 3601 0
 178 0004 006B     		ldr	r0, [r0, #48]
 179              	.LVL12:
 180 0006 FFF7FEFF 		bl	vPortFree
 181              	.LVL13:
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 182              		.loc 1 3602 0
 183 000a 2046     		mov	r0, r4
 184 000c FFF7FEFF 		bl	vPortFree
 185              	.LVL14:
 186 0010 10BD     		pop	{r4, pc}
 187              		.cfi_endproc
 188              	.LFE172:
 190 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 191              		.align	2
 192              		.thumb
 193              		.thumb_func
 195              	prvInitialiseNewTask:
 196              	.LFB141:
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 197              		.loc 1 776 0
 198              		.cfi_startproc
 199              		@ args = 16, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              	.LVL15:
 202 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 203              	.LCFI1:
 204              		.cfi_def_cfa_offset 32
 205              		.cfi_offset 4, -32
 206              		.cfi_offset 5, -28
 207              		.cfi_offset 6, -24
 208              		.cfi_offset 7, -20
 209              		.cfi_offset 8, -16
 210              		.cfi_offset 9, -12
 211              		.cfi_offset 10, -8
 212              		.cfi_offset 14, -4
 213 0004 8146     		mov	r9, r0
 214 0006 9846     		mov	r8, r3
ARM GAS  /tmp/ccLSYPfk.s 			page 73


 215 0008 089D     		ldr	r5, [sp, #32]
 216 000a 099F     		ldr	r7, [sp, #36]
 217 000c 0A9C     		ldr	r4, [sp, #40]
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 218              		.loc 1 808 0
 219 000e 236B     		ldr	r3, [r4, #48]
 220              	.LVL16:
 221 0010 6FF04046 		mvn	r6, #-1073741824
 222 0014 1644     		add	r6, r6, r2
 223 0016 03EB8606 		add	r6, r3, r6, lsl #2
 224              	.LVL17:
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225              		.loc 1 809 0
 226 001a 26F00706 		bic	r6, r6, #7
 227              	.LVL18:
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 228              		.loc 1 828 0
 229 001e 0023     		movs	r3, #0
 230 0020 06E0     		b	.L24
 231              	.LVL19:
 232              	.L26:
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233              		.loc 1 830 0
 234 0022 C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 235 0024 E218     		adds	r2, r4, r3
 236 0026 82F83400 		strb	r0, [r2, #52]
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 237              		.loc 1 835 0
 238 002a CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 239 002c 12B1     		cbz	r2, .L25
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 240              		.loc 1 828 0 discriminator 2
 241 002e 0133     		adds	r3, r3, #1
 242              	.LVL20:
 243              	.L24:
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 244              		.loc 1 828 0 is_stmt 0 discriminator 1
 245 0030 0F2B     		cmp	r3, #15
 246 0032 F6D9     		bls	.L26
 247              	.L25:
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 248              		.loc 1 847 0 is_stmt 1
 249 0034 0023     		movs	r3, #0
 250              	.LVL21:
 251 0036 84F84330 		strb	r3, [r4, #67]
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 252              		.loc 1 851 0
 253 003a 062D     		cmp	r5, #6
 254 003c 00D9     		bls	.L27
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 255              		.loc 1 853 0
 256 003e 0625     		movs	r5, #6
 257              	.L27:
 258              	.LVL22:
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 259              		.loc 1 860 0
 260 0040 E562     		str	r5, [r4, #44]
ARM GAS  /tmp/ccLSYPfk.s 			page 74


 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 261              		.loc 1 863 0
 262 0042 6564     		str	r5, [r4, #68]
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 263              		.loc 1 864 0
 264 0044 4FF0000A 		mov	r10, #0
 265 0048 C4F848A0 		str	r10, [r4, #72]
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 266              		.loc 1 868 0
 267 004c 201D     		adds	r0, r4, #4
 268 004e FFF7FEFF 		bl	vListInitialiseItem
 269              	.LVL23:
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270              		.loc 1 869 0
 271 0052 04F11800 		add	r0, r4, #24
 272 0056 FFF7FEFF 		bl	vListInitialiseItem
 273              	.LVL24:
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274              		.loc 1 873 0
 275 005a 2461     		str	r4, [r4, #16]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 276              		.loc 1 876 0
 277 005c C5F10705 		rsb	r5, r5, #7
 278              	.LVL25:
 279 0060 A561     		str	r5, [r4, #24]
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 280              		.loc 1 877 0
 281 0062 6462     		str	r4, [r4, #36]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 282              		.loc 1 919 0
 283 0064 C4F84CA0 		str	r10, [r4, #76]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 284              		.loc 1 920 0
 285 0068 84F850A0 		strb	r10, [r4, #80]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 286              		.loc 1 947 0
 287 006c 3046     		mov	r0, r6
 288 006e 4946     		mov	r1, r9
 289 0070 4246     		mov	r2, r8
 290 0072 FFF7FEFF 		bl	pxPortInitialiseStack
 291              	.LVL26:
 292 0076 2060     		str	r0, [r4]
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 293              		.loc 1 951 0
 294 0078 07B1     		cbz	r7, .L23
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 295              		.loc 1 955 0
 296 007a 3C60     		str	r4, [r7]
 297              	.L23:
 298 007c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 299              		.cfi_endproc
 300              	.LFE141:
 302              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 303              		.align	2
 304              		.thumb
 305              		.thumb_func
 307              	prvInitialiseTaskLists:
ARM GAS  /tmp/ccLSYPfk.s 			page 75


 308              	.LFB170:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 309              		.loc 1 3335 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313 0000 38B5     		push	{r3, r4, r5, lr}
 314              	.LCFI2:
 315              		.cfi_def_cfa_offset 16
 316              		.cfi_offset 3, -16
 317              		.cfi_offset 4, -12
 318              		.cfi_offset 5, -8
 319              		.cfi_offset 14, -4
 320              	.LVL27:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 321              		.loc 1 3338 0
 322 0002 0024     		movs	r4, #0
 323 0004 07E0     		b	.L32
 324              	.LVL28:
 325              	.L33:
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 326              		.loc 1 3340 0 discriminator 3
 327 0006 04EB8403 		add	r3, r4, r4, lsl #2
 328 000a 9B00     		lsls	r3, r3, #2
 329 000c 0E48     		ldr	r0, .L35
 330 000e 1844     		add	r0, r0, r3
 331 0010 FFF7FEFF 		bl	vListInitialise
 332              	.LVL29:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 333              		.loc 1 3338 0 discriminator 3
 334 0014 0134     		adds	r4, r4, #1
 335              	.LVL30:
 336              	.L32:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 337              		.loc 1 3338 0 is_stmt 0 discriminator 1
 338 0016 062C     		cmp	r4, #6
 339 0018 F5D9     		bls	.L33
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 340              		.loc 1 3343 0 is_stmt 1
 341 001a 0C4D     		ldr	r5, .L35+4
 342 001c 2846     		mov	r0, r5
 343 001e FFF7FEFF 		bl	vListInitialise
 344              	.LVL31:
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 345              		.loc 1 3344 0
 346 0022 0B4C     		ldr	r4, .L35+8
 347              	.LVL32:
 348 0024 2046     		mov	r0, r4
 349 0026 FFF7FEFF 		bl	vListInitialise
 350              	.LVL33:
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 351              		.loc 1 3345 0
 352 002a 0A48     		ldr	r0, .L35+12
 353 002c FFF7FEFF 		bl	vListInitialise
 354              	.LVL34:
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 355              		.loc 1 3349 0
ARM GAS  /tmp/ccLSYPfk.s 			page 76


 356 0030 0948     		ldr	r0, .L35+16
 357 0032 FFF7FEFF 		bl	vListInitialise
 358              	.LVL35:
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 359              		.loc 1 3355 0
 360 0036 0948     		ldr	r0, .L35+20
 361 0038 FFF7FEFF 		bl	vListInitialise
 362              	.LVL36:
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 363              		.loc 1 3361 0
 364 003c 084B     		ldr	r3, .L35+24
 365 003e 1D60     		str	r5, [r3]
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 366              		.loc 1 3362 0
 367 0040 084B     		ldr	r3, .L35+28
 368 0042 1C60     		str	r4, [r3]
 369 0044 38BD     		pop	{r3, r4, r5, pc}
 370              	.L36:
 371 0046 00BF     		.align	2
 372              	.L35:
 373 0048 00000000 		.word	.LANCHOR4
 374 004c 00000000 		.word	.LANCHOR5
 375 0050 00000000 		.word	.LANCHOR6
 376 0054 00000000 		.word	.LANCHOR1
 377 0058 00000000 		.word	.LANCHOR7
 378 005c 00000000 		.word	.LANCHOR0
 379 0060 00000000 		.word	.LANCHOR2
 380 0064 00000000 		.word	.LANCHOR8
 381              		.cfi_endproc
 382              	.LFE170:
 384              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 385              		.align	2
 386              		.thumb
 387              		.thumb_func
 389              	prvAddNewTaskToReadyList:
 390              	.LFB142:
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 391              		.loc 1 965 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              	.LVL37:
 396 0000 10B5     		push	{r4, lr}
 397              	.LCFI3:
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 4, -8
 400              		.cfi_offset 14, -4
 401 0002 0446     		mov	r4, r0
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 402              		.loc 1 968 0
 403 0004 FFF7FEFF 		bl	vPortEnterCritical
 404              	.LVL38:
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 405              		.loc 1 970 0
 406 0008 204A     		ldr	r2, .L42
 407 000a 1368     		ldr	r3, [r2]
 408 000c 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccLSYPfk.s 			page 77


 409 000e 1360     		str	r3, [r2]
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 410              		.loc 1 971 0
 411 0010 1F4B     		ldr	r3, .L42+4
 412 0012 1B68     		ldr	r3, [r3]
 413 0014 3BB9     		cbnz	r3, .L38
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414              		.loc 1 975 0
 415 0016 1E4B     		ldr	r3, .L42+4
 416 0018 1C60     		str	r4, [r3]
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 417              		.loc 1 977 0
 418 001a 1368     		ldr	r3, [r2]
 419 001c 012B     		cmp	r3, #1
 420 001e 0DD1     		bne	.L39
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 421              		.loc 1 982 0
 422 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 423              	.LVL39:
 424 0024 0AE0     		b	.L39
 425              	.L38:
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 426              		.loc 1 994 0
 427 0026 1B4B     		ldr	r3, .L42+8
 428 0028 1B68     		ldr	r3, [r3]
 429 002a 3BB9     		cbnz	r3, .L39
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 430              		.loc 1 996 0
 431 002c 184B     		ldr	r3, .L42+4
 432 002e 1B68     		ldr	r3, [r3]
 433 0030 DA6A     		ldr	r2, [r3, #44]
 434 0032 E36A     		ldr	r3, [r4, #44]
 435 0034 9A42     		cmp	r2, r3
 436 0036 01D8     		bhi	.L39
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 437              		.loc 1 998 0
 438 0038 154B     		ldr	r3, .L42+4
 439 003a 1C60     		str	r4, [r3]
 440              	.L39:
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441              		.loc 1 1011 0
 442 003c 164A     		ldr	r2, .L42+12
 443 003e 1368     		ldr	r3, [r2]
 444 0040 0133     		adds	r3, r3, #1
 445 0042 1360     		str	r3, [r2]
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 446              		.loc 1 1021 0
 447 0044 E06A     		ldr	r0, [r4, #44]
 448 0046 0123     		movs	r3, #1
 449 0048 8340     		lsls	r3, r3, r0
 450 004a 1449     		ldr	r1, .L42+16
 451 004c 0A68     		ldr	r2, [r1]
 452 004e 1343     		orrs	r3, r3, r2
 453 0050 0B60     		str	r3, [r1]
 454 0052 00EB8000 		add	r0, r0, r0, lsl #2
 455 0056 8000     		lsls	r0, r0, #2
 456 0058 114B     		ldr	r3, .L42+20
ARM GAS  /tmp/ccLSYPfk.s 			page 78


 457 005a 1844     		add	r0, r0, r3
 458 005c 211D     		adds	r1, r4, #4
 459 005e FFF7FEFF 		bl	vListInsertEnd
 460              	.LVL40:
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461              		.loc 1 1025 0
 462 0062 FFF7FEFF 		bl	vPortExitCritical
 463              	.LVL41:
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 464              		.loc 1 1027 0
 465 0066 0B4B     		ldr	r3, .L42+8
 466 0068 1B68     		ldr	r3, [r3]
 467 006a 6BB1     		cbz	r3, .L37
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 468              		.loc 1 1031 0
 469 006c 084B     		ldr	r3, .L42+4
 470 006e 1B68     		ldr	r3, [r3]
 471 0070 DA6A     		ldr	r2, [r3, #44]
 472 0072 E36A     		ldr	r3, [r4, #44]
 473 0074 9A42     		cmp	r2, r3
 474 0076 07D2     		bcs	.L37
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 475              		.loc 1 1033 0
 476 0078 4FF08052 		mov	r2, #268435456
 477 007c 094B     		ldr	r3, .L42+24
 478 007e 1A60     		str	r2, [r3]
 479              	@ 1033 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 480 0080 BFF34F8F 		dsb
 481              	@ 0 "" 2
 482              	@ 1033 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 483 0084 BFF36F8F 		isb
 484              	@ 0 "" 2
 485              		.thumb
 486              	.L37:
 487 0088 10BD     		pop	{r4, pc}
 488              	.LVL42:
 489              	.L43:
 490 008a 00BF     		.align	2
 491              	.L42:
 492 008c 00000000 		.word	.LANCHOR9
 493 0090 00000000 		.word	.LANCHOR10
 494 0094 00000000 		.word	.LANCHOR11
 495 0098 00000000 		.word	.LANCHOR12
 496 009c 00000000 		.word	.LANCHOR13
 497 00a0 00000000 		.word	.LANCHOR4
 498 00a4 04ED00E0 		.word	-536810236
 499              		.cfi_endproc
 500              	.LFE142:
 502              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 503              		.align	2
 504              		.thumb
 505              		.thumb_func
 507              	prvAddCurrentTaskToDelayedList:
 508              	.LFB186:
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccLSYPfk.s 			page 79


3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
ARM GAS  /tmp/ccLSYPfk.s 			page 80


3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 81


3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
ARM GAS  /tmp/ccLSYPfk.s 			page 82


3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
ARM GAS  /tmp/ccLSYPfk.s 			page 83


3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
ARM GAS  /tmp/ccLSYPfk.s 			page 84


3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
ARM GAS  /tmp/ccLSYPfk.s 			page 85


4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
ARM GAS  /tmp/ccLSYPfk.s 			page 86


4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  /tmp/ccLSYPfk.s 			page 87


4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
ARM GAS  /tmp/ccLSYPfk.s 			page 88


4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccLSYPfk.s 			page 89


4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 90


4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  /tmp/ccLSYPfk.s 			page 91


4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
ARM GAS  /tmp/ccLSYPfk.s 			page 92


4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 93


4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/ccLSYPfk.s 			page 94


4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccLSYPfk.s 			page 95


4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
ARM GAS  /tmp/ccLSYPfk.s 			page 96


4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  /tmp/ccLSYPfk.s 			page 97


4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 509              		.loc 1 4694 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              	.LVL43:
 514 0000 70B5     		push	{r4, r5, r6, lr}
 515              	.LCFI4:
 516              		.cfi_def_cfa_offset 16
 517              		.cfi_offset 4, -16
 518              		.cfi_offset 5, -12
 519              		.cfi_offset 6, -8
 520              		.cfi_offset 14, -4
 521 0002 0446     		mov	r4, r0
 522 0004 0E46     		mov	r6, r1
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 523              		.loc 1 4696 0
 524 0006 1F4B     		ldr	r3, .L50
 525 0008 1D68     		ldr	r5, [r3]
 526              	.LVL44:
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 527              		.loc 1 4709 0
 528 000a 1F4B     		ldr	r3, .L50+4
 529 000c 1868     		ldr	r0, [r3]
 530              	.LVL45:
 531 000e 0430     		adds	r0, r0, #4
 532 0010 FFF7FEFF 		bl	uxListRemove
 533              	.LVL46:
 534 0014 48B9     		cbnz	r0, .L45
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 535              		.loc 1 4713 0
 536 0016 1C4B     		ldr	r3, .L50+4
ARM GAS  /tmp/ccLSYPfk.s 			page 98


 537 0018 1B68     		ldr	r3, [r3]
 538 001a DA6A     		ldr	r2, [r3, #44]
 539 001c 0123     		movs	r3, #1
 540 001e 9340     		lsls	r3, r3, r2
 541 0020 1A49     		ldr	r1, .L50+8
 542 0022 0A68     		ldr	r2, [r1]
 543 0024 22EA0303 		bic	r3, r2, r3
 544 0028 0B60     		str	r3, [r1]
 545              	.L45:
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 546              		.loc 1 4722 0
 547 002a B4F1FF3F 		cmp	r4, #-1
 548 002e 14BF     		ite	ne
 549 0030 0023     		movne	r3, #0
 550 0032 0123     		moveq	r3, #1
 551 0034 002E     		cmp	r6, #0
 552 0036 08BF     		it	eq
 553 0038 0023     		moveq	r3, #0
 554 003a 33B1     		cbz	r3, .L46
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 555              		.loc 1 4727 0
 556 003c 124B     		ldr	r3, .L50+4
 557 003e 1968     		ldr	r1, [r3]
 558 0040 1348     		ldr	r0, .L50+12
 559 0042 0431     		adds	r1, r1, #4
 560 0044 FFF7FEFF 		bl	vListInsertEnd
 561              	.LVL47:
 562 0048 70BD     		pop	{r4, r5, r6, pc}
 563              	.LVL48:
 564              	.L46:
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 565              		.loc 1 4734 0
 566 004a 2C44     		add	r4, r4, r5
 567              	.LVL49:
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 568              		.loc 1 4737 0
 569 004c 0E4B     		ldr	r3, .L50+4
ARM GAS  /tmp/ccLSYPfk.s 			page 99


 570 004e 1B68     		ldr	r3, [r3]
 571 0050 5C60     		str	r4, [r3, #4]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 572              		.loc 1 4739 0
 573 0052 AC42     		cmp	r4, r5
 574 0054 07D2     		bcs	.L48
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 575              		.loc 1 4743 0
 576 0056 0F4B     		ldr	r3, .L50+16
 577 0058 1868     		ldr	r0, [r3]
 578 005a 0B4B     		ldr	r3, .L50+4
 579 005c 1968     		ldr	r1, [r3]
 580 005e 0431     		adds	r1, r1, #4
 581 0060 FFF7FEFF 		bl	vListInsert
 582              	.LVL50:
 583 0064 70BD     		pop	{r4, r5, r6, pc}
 584              	.LVL51:
 585              	.L48:
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 586              		.loc 1 4749 0
 587 0066 0C4B     		ldr	r3, .L50+20
 588 0068 1868     		ldr	r0, [r3]
 589 006a 074B     		ldr	r3, .L50+4
 590 006c 1968     		ldr	r1, [r3]
 591 006e 0431     		adds	r1, r1, #4
 592 0070 FFF7FEFF 		bl	vListInsert
 593              	.LVL52:
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 594              		.loc 1 4754 0
 595 0074 094B     		ldr	r3, .L50+24
 596 0076 1B68     		ldr	r3, [r3]
 597 0078 9C42     		cmp	r4, r3
 598 007a 01D2     		bcs	.L44
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 599              		.loc 1 4756 0
 600 007c 074B     		ldr	r3, .L50+24
 601 007e 1C60     		str	r4, [r3]
 602              	.L44:
 603 0080 70BD     		pop	{r4, r5, r6, pc}
 604              	.LVL53:
 605              	.L51:
 606 0082 00BF     		.align	2
 607              	.L50:
ARM GAS  /tmp/ccLSYPfk.s 			page 100


 608 0084 00000000 		.word	.LANCHOR14
 609 0088 00000000 		.word	.LANCHOR10
 610 008c 00000000 		.word	.LANCHOR13
 611 0090 00000000 		.word	.LANCHOR0
 612 0094 00000000 		.word	.LANCHOR8
 613 0098 00000000 		.word	.LANCHOR2
 614 009c 00000000 		.word	.LANCHOR3
 615              		.cfi_endproc
 616              	.LFE186:
 618              		.section	.text.xTaskCreate,"ax",%progbits
 619              		.align	2
 620              		.global	xTaskCreate
 621              		.thumb
 622              		.thumb_func
 624              	xTaskCreate:
 625              	.LFB140:
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 626              		.loc 1 683 0
 627              		.cfi_startproc
 628              		@ args = 8, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              	.LVL54:
 631 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 632              	.LCFI5:
 633              		.cfi_def_cfa_offset 28
 634              		.cfi_offset 4, -28
 635              		.cfi_offset 5, -24
 636              		.cfi_offset 6, -20
 637              		.cfi_offset 7, -16
 638              		.cfi_offset 8, -12
 639              		.cfi_offset 9, -8
 640              		.cfi_offset 14, -4
 641 0004 85B0     		sub	sp, sp, #20
 642              	.LCFI6:
 643              		.cfi_def_cfa_offset 48
 644 0006 8046     		mov	r8, r0
 645 0008 0F46     		mov	r7, r1
 646 000a 1546     		mov	r5, r2
 647 000c 1E46     		mov	r6, r3
 648              	.LBB92:
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649              		.loc 1 717 0
 650 000e 9000     		lsls	r0, r2, #2
 651              	.LVL55:
 652 0010 FFF7FEFF 		bl	pvPortMalloc
 653              	.LVL56:
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 654              		.loc 1 719 0
 655 0014 60B1     		cbz	r0, .L56
 656 0016 8146     		mov	r9, r0
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657              		.loc 1 722 0
 658 0018 5420     		movs	r0, #84
 659              	.LVL57:
 660 001a FFF7FEFF 		bl	pvPortMalloc
 661              	.LVL58:
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccLSYPfk.s 			page 101


 662              		.loc 1 724 0
 663 001e 0446     		mov	r4, r0
 664 0020 10B1     		cbz	r0, .L54
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 665              		.loc 1 727 0
 666 0022 C0F83090 		str	r9, [r0, #48]
 667 0026 04E0     		b	.L53
 668              	.L54:
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 669              		.loc 1 733 0
 670 0028 4846     		mov	r0, r9
 671              	.LVL59:
 672 002a FFF7FEFF 		bl	vPortFree
 673              	.LVL60:
 674 002e 00E0     		b	.L53
 675              	.LVL61:
 676              	.L56:
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 677              		.loc 1 738 0
 678 0030 0024     		movs	r4, #0
 679              	.LVL62:
 680              	.L53:
 681              	.LBE92:
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 682              		.loc 1 743 0
 683 0032 8CB1     		cbz	r4, .L57
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 684              		.loc 1 753 0
 685 0034 0C9B     		ldr	r3, [sp, #48]
 686 0036 0093     		str	r3, [sp]
 687 0038 0D9B     		ldr	r3, [sp, #52]
 688 003a 0193     		str	r3, [sp, #4]
 689 003c 0294     		str	r4, [sp, #8]
 690 003e 0023     		movs	r3, #0
 691 0040 0393     		str	r3, [sp, #12]
 692 0042 4046     		mov	r0, r8
 693 0044 3946     		mov	r1, r7
 694 0046 2A46     		mov	r2, r5
 695 0048 3346     		mov	r3, r6
 696 004a FFF7FEFF 		bl	prvInitialiseNewTask
 697              	.LVL63:
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 698              		.loc 1 754 0
 699 004e 2046     		mov	r0, r4
 700 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 701              	.LVL64:
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 702              		.loc 1 755 0
 703 0054 0120     		movs	r0, #1
 704 0056 01E0     		b	.L55
 705              	.LVL65:
 706              	.L57:
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 707              		.loc 1 759 0
 708 0058 4FF0FF30 		mov	r0, #-1
 709              	.L55:
 710              	.LVL66:
ARM GAS  /tmp/ccLSYPfk.s 			page 102


 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 711              		.loc 1 763 0
 712 005c 05B0     		add	sp, sp, #20
 713              	.LCFI7:
 714              		.cfi_def_cfa_offset 28
 715              		@ sp needed
 716 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 717              		.cfi_endproc
 718              	.LFE140:
 720 0062 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 721              		.align	2
 722              		.global	vTaskDelete
 723              		.thumb
 724              		.thumb_func
 726              	vTaskDelete:
 727              	.LFB143:
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 728              		.loc 1 1050 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              	.LVL67:
 733 0000 38B5     		push	{r3, r4, r5, lr}
 734              	.LCFI8:
 735              		.cfi_def_cfa_offset 16
 736              		.cfi_offset 3, -16
 737              		.cfi_offset 4, -12
 738              		.cfi_offset 5, -8
 739              		.cfi_offset 14, -4
 740 0002 0446     		mov	r4, r0
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741              		.loc 1 1053 0
 742 0004 FFF7FEFF 		bl	vPortEnterCritical
 743              	.LVL68:
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 744              		.loc 1 1057 0
 745 0008 0CB9     		cbnz	r4, .L60
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746              		.loc 1 1057 0 is_stmt 0 discriminator 1
 747 000a 2B4B     		ldr	r3, .L69
 748 000c 1C68     		ldr	r4, [r3]
 749              	.LVL69:
 750              	.L60:
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 751              		.loc 1 1060 0 is_stmt 1 discriminator 4
 752 000e 251D     		adds	r5, r4, #4
 753 0010 2846     		mov	r0, r5
 754 0012 FFF7FEFF 		bl	uxListRemove
 755              	.LVL70:
 756 0016 70B9     		cbnz	r0, .L61
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 757              		.loc 1 1062 0
 758 0018 E26A     		ldr	r2, [r4, #44]
 759 001a 02EB8203 		add	r3, r2, r2, lsl #2
 760 001e 9B00     		lsls	r3, r3, #2
 761 0020 2649     		ldr	r1, .L69+4
 762 0022 CB58     		ldr	r3, [r1, r3]
ARM GAS  /tmp/ccLSYPfk.s 			page 103


 763 0024 3BB9     		cbnz	r3, .L61
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764              		.loc 1 1062 0 is_stmt 0 discriminator 1
 765 0026 0123     		movs	r3, #1
 766 0028 03FA02F2 		lsl	r2, r3, r2
 767 002c 2449     		ldr	r1, .L69+8
 768 002e 0B68     		ldr	r3, [r1]
 769 0030 23EA0203 		bic	r3, r3, r2
 770 0034 0B60     		str	r3, [r1]
 771              	.L61:
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 772              		.loc 1 1070 0 is_stmt 1
 773 0036 A36A     		ldr	r3, [r4, #40]
 774 0038 1BB1     		cbz	r3, .L62
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 775              		.loc 1 1072 0
 776 003a 04F11800 		add	r0, r4, #24
 777 003e FFF7FEFF 		bl	uxListRemove
 778              	.LVL71:
 779              	.L62:
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780              		.loc 1 1083 0
 781 0042 204A     		ldr	r2, .L69+12
 782 0044 1368     		ldr	r3, [r2]
 783 0046 0133     		adds	r3, r3, #1
 784 0048 1360     		str	r3, [r2]
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 785              		.loc 1 1085 0
 786 004a 1B4B     		ldr	r3, .L69
 787 004c 1B68     		ldr	r3, [r3]
 788 004e 9C42     		cmp	r4, r3
 789 0050 08D1     		bne	.L63
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 790              		.loc 1 1092 0
 791 0052 1D48     		ldr	r0, .L69+16
 792 0054 2946     		mov	r1, r5
 793 0056 FFF7FEFF 		bl	vListInsertEnd
 794              	.LVL72:
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 795              		.loc 1 1097 0
 796 005a 1C4A     		ldr	r2, .L69+20
 797 005c 1368     		ldr	r3, [r2]
 798 005e 0133     		adds	r3, r3, #1
 799 0060 1360     		str	r3, [r2]
 800 0062 08E0     		b	.L64
 801              	.L63:
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 802              		.loc 1 1108 0
 803 0064 1A4A     		ldr	r2, .L69+24
 804 0066 1368     		ldr	r3, [r2]
 805 0068 013B     		subs	r3, r3, #1
 806 006a 1360     		str	r3, [r2]
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 807              		.loc 1 1109 0
 808 006c 2046     		mov	r0, r4
 809 006e FFF7FEFF 		bl	prvDeleteTCB
 810              	.LVL73:
ARM GAS  /tmp/ccLSYPfk.s 			page 104


1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 811              		.loc 1 1113 0
 812 0072 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 813              	.LVL74:
 814              	.L64:
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815              		.loc 1 1118 0
 816 0076 FFF7FEFF 		bl	vPortExitCritical
 817              	.LVL75:
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 818              		.loc 1 1122 0
 819 007a 164B     		ldr	r3, .L69+28
 820 007c 1B68     		ldr	r3, [r3]
 821 007e CBB1     		cbz	r3, .L59
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 822              		.loc 1 1124 0
 823 0080 0D4B     		ldr	r3, .L69
 824 0082 1B68     		ldr	r3, [r3]
 825 0084 9C42     		cmp	r4, r3
 826 0086 15D1     		bne	.L59
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 827              		.loc 1 1126 0
 828 0088 134B     		ldr	r3, .L69+32
 829 008a 1B68     		ldr	r3, [r3]
 830 008c 53B1     		cbz	r3, .L66
 831              	.LBB93:
 832              	.LBB94:
 833              		.loc 2 237 0
 834              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 835 008e 4FF05003 			mov r3, #80												
 836 0092 72B6     		cpsid i													
 837 0094 83F31188 		msr basepri, r3											
 838 0098 BFF36F8F 		isb														
 839 009c BFF34F8F 		dsb														
 840 00a0 62B6     		cpsie i													
 841              	
 842              	@ 0 "" 2
 843              	.LVL76:
 844              		.thumb
 845              	.L67:
 846              	.LBE94:
 847              	.LBE93:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 848              		.loc 1 1126 0 discriminator 1
 849 00a2 FEE7     		b	.L67
 850              	.L66:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 851              		.loc 1 1127 0
 852 00a4 4FF08052 		mov	r2, #268435456
 853 00a8 0C4B     		ldr	r3, .L69+36
 854 00aa 1A60     		str	r2, [r3]
 855              	@ 1127 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 856 00ac BFF34F8F 		dsb
 857              	@ 0 "" 2
 858              	@ 1127 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 859 00b0 BFF36F8F 		isb
 860              	@ 0 "" 2
ARM GAS  /tmp/ccLSYPfk.s 			page 105


 861              		.thumb
 862              	.L59:
 863 00b4 38BD     		pop	{r3, r4, r5, pc}
 864              	.LVL77:
 865              	.L70:
 866 00b6 00BF     		.align	2
 867              	.L69:
 868 00b8 00000000 		.word	.LANCHOR10
 869 00bc 00000000 		.word	.LANCHOR4
 870 00c0 00000000 		.word	.LANCHOR13
 871 00c4 00000000 		.word	.LANCHOR12
 872 00c8 00000000 		.word	.LANCHOR7
 873 00cc 00000000 		.word	.LANCHOR15
 874 00d0 00000000 		.word	.LANCHOR9
 875 00d4 00000000 		.word	.LANCHOR11
 876 00d8 00000000 		.word	.LANCHOR16
 877 00dc 04ED00E0 		.word	-536810236
 878              		.cfi_endproc
 879              	.LFE143:
 881              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 882              		.align	2
 883              		.global	uxTaskPriorityGet
 884              		.thumb
 885              		.thumb_func
 887              	uxTaskPriorityGet:
 888              	.LFB145:
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 889              		.loc 1 1342 0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 0
 892              		@ frame_needed = 0, uses_anonymous_args = 0
 893              	.LVL78:
 894 0000 10B5     		push	{r4, lr}
 895              	.LCFI9:
 896              		.cfi_def_cfa_offset 8
 897              		.cfi_offset 4, -8
 898              		.cfi_offset 14, -4
 899 0002 0446     		mov	r4, r0
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 900              		.loc 1 1346 0
 901 0004 FFF7FEFF 		bl	vPortEnterCritical
 902              	.LVL79:
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 903              		.loc 1 1350 0
 904 0008 0CB9     		cbnz	r4, .L72
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 905              		.loc 1 1350 0 is_stmt 0 discriminator 1
 906 000a 034B     		ldr	r3, .L74
 907 000c 1C68     		ldr	r4, [r3]
 908              	.LVL80:
 909              	.L72:
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910              		.loc 1 1351 0 is_stmt 1 discriminator 4
 911 000e E46A     		ldr	r4, [r4, #44]
 912              	.LVL81:
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 913              		.loc 1 1353 0 discriminator 4
ARM GAS  /tmp/ccLSYPfk.s 			page 106


 914 0010 FFF7FEFF 		bl	vPortExitCritical
 915              	.LVL82:
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916              		.loc 1 1356 0 discriminator 4
 917 0014 2046     		mov	r0, r4
 918 0016 10BD     		pop	{r4, pc}
 919              	.LVL83:
 920              	.L75:
 921              		.align	2
 922              	.L74:
 923 0018 00000000 		.word	.LANCHOR10
 924              		.cfi_endproc
 925              	.LFE145:
 927              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 928              		.align	2
 929              		.global	uxTaskPriorityGetFromISR
 930              		.thumb
 931              		.thumb_func
 933              	uxTaskPriorityGetFromISR:
 934              	.LFB146:
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 935              		.loc 1 1364 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 0
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939              	.LVL84:
 940 0000 10B5     		push	{r4, lr}
 941              	.LCFI10:
 942              		.cfi_def_cfa_offset 8
 943              		.cfi_offset 4, -8
 944              		.cfi_offset 14, -4
 945 0002 0446     		mov	r4, r0
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 946              		.loc 1 1384 0
 947 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 948              	.LVL85:
 949              	.LBB95:
 950              	.LBB96:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 951              		.loc 2 255 0
ARM GAS  /tmp/ccLSYPfk.s 			page 107


 952              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 953 0008 EFF31183 			mrs r3, basepri											
 954 000c 4FF05002 		mov r2, #80												
 955 0010 72B6     		cpsid i													
 956 0012 82F31188 		msr basepri, r2											
 957 0016 BFF36F8F 		isb														
 958 001a BFF34F8F 		dsb														
 959 001e 62B6     		cpsie i													
 960              	
 961              	@ 0 "" 2
 962              	.LVL86:
 963              		.thumb
 964              	.LBE96:
 965              	.LBE95:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 966              		.loc 1 1390 0
 967 0020 0CB9     		cbnz	r4, .L77
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 968              		.loc 1 1390 0 is_stmt 0 discriminator 1
 969 0022 034A     		ldr	r2, .L79
 970 0024 1468     		ldr	r4, [r2]
 971              	.LVL87:
 972              	.L77:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 973              		.loc 1 1391 0 is_stmt 1 discriminator 4
 974 0026 E06A     		ldr	r0, [r4, #44]
 975              	.LVL88:
 976              	.LBB97:
 977              	.LBB98:
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 272:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 274:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 275:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 978              		.loc 2 275 0 discriminator 4
 979              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 980 0028 83F31188 			msr basepri, r3	
 981              	@ 0 "" 2
 982              		.thumb
 983              	.LBE98:
 984              	.LBE97:
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 108


 985              		.loc 1 1396 0 discriminator 4
 986 002c 10BD     		pop	{r4, pc}
 987              	.LVL89:
 988              	.L80:
 989 002e 00BF     		.align	2
 990              	.L79:
 991 0030 00000000 		.word	.LANCHOR10
 992              		.cfi_endproc
 993              	.LFE146:
 995              		.section	.text.vTaskPrioritySet,"ax",%progbits
 996              		.align	2
 997              		.global	vTaskPrioritySet
 998              		.thumb
 999              		.thumb_func
 1001              	vTaskPrioritySet:
 1002              	.LFB147:
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1003              		.loc 1 1404 0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 1007              	.LVL90:
 1008 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1009              	.LCFI11:
 1010              		.cfi_def_cfa_offset 24
 1011              		.cfi_offset 3, -24
 1012              		.cfi_offset 4, -20
 1013              		.cfi_offset 5, -16
 1014              		.cfi_offset 6, -12
 1015              		.cfi_offset 7, -8
 1016              		.cfi_offset 14, -4
 1017 0002 0D46     		mov	r5, r1
 1018              	.LVL91:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1019              		.loc 1 1409 0
 1020 0004 0629     		cmp	r1, #6
 1021 0006 0AD9     		bls	.L82
 1022              	.LBB99:
 1023              	.LBB100:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1024              		.loc 2 237 0
 1025              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1026 0008 4FF05003 			mov r3, #80												
 1027 000c 72B6     		cpsid i													
 1028 000e 83F31188 		msr basepri, r3											
 1029 0012 BFF36F8F 		isb														
 1030 0016 BFF34F8F 		dsb														
 1031 001a 62B6     		cpsie i													
 1032              	
 1033              	@ 0 "" 2
 1034              	.LVL92:
 1035              		.thumb
 1036              	.L83:
 1037              	.LBE100:
 1038              	.LBE99:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1039              		.loc 1 1409 0 discriminator 1
ARM GAS  /tmp/ccLSYPfk.s 			page 109


 1040 001c FEE7     		b	.L83
 1041              	.L82:
 1042 001e 0446     		mov	r4, r0
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1043              		.loc 1 1412 0
 1044 0020 0629     		cmp	r1, #6
 1045 0022 00D9     		bls	.L84
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1046              		.loc 1 1414 0
 1047 0024 0625     		movs	r5, #6
 1048              	.L84:
 1049              	.LVL93:
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1050              		.loc 1 1421 0
 1051 0026 FFF7FEFF 		bl	vPortEnterCritical
 1052              	.LVL94:
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1053              		.loc 1 1425 0
 1054 002a 0CB9     		cbnz	r4, .L85
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1055              		.loc 1 1425 0 is_stmt 0 discriminator 1
 1056 002c 2E4B     		ldr	r3, .L100
 1057 002e 1C68     		ldr	r4, [r3]
 1058              	.LVL95:
 1059              	.L85:
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1060              		.loc 1 1431 0 is_stmt 1 discriminator 4
 1061 0030 636C     		ldr	r3, [r4, #68]
 1062              	.LVL96:
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1063              		.loc 1 1439 0 discriminator 4
 1064 0032 AB42     		cmp	r3, r5
 1065 0034 54D0     		beq	.L86
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1066              		.loc 1 1443 0
 1067 0036 9D42     		cmp	r5, r3
 1068 0038 0AD9     		bls	.L87
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1069              		.loc 1 1445 0
 1070 003a 2B4A     		ldr	r2, .L100
 1071 003c 1268     		ldr	r2, [r2]
 1072 003e 9442     		cmp	r4, r2
 1073 0040 0CD0     		beq	.L95
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1074              		.loc 1 1450 0
 1075 0042 294A     		ldr	r2, .L100
 1076 0044 1268     		ldr	r2, [r2]
 1077 0046 D26A     		ldr	r2, [r2, #44]
 1078 0048 AA42     		cmp	r2, r5
 1079 004a 09D9     		bls	.L96
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1080              		.loc 1 1407 0
 1081 004c 0026     		movs	r6, #0
 1082 004e 0AE0     		b	.L88
 1083              	.L87:
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1084              		.loc 1 1466 0
ARM GAS  /tmp/ccLSYPfk.s 			page 110


 1085 0050 254A     		ldr	r2, .L100
 1086 0052 1268     		ldr	r2, [r2]
 1087 0054 9442     		cmp	r4, r2
 1088 0056 05D0     		beq	.L97
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1089              		.loc 1 1407 0
 1090 0058 0026     		movs	r6, #0
 1091 005a 04E0     		b	.L88
 1092              	.L95:
 1093 005c 0026     		movs	r6, #0
 1094 005e 02E0     		b	.L88
 1095              	.L96:
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1096              		.loc 1 1452 0
 1097 0060 0126     		movs	r6, #1
 1098 0062 00E0     		b	.L88
 1099              	.L97:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1100              		.loc 1 1471 0
 1101 0064 0126     		movs	r6, #1
 1102              	.L88:
 1103              	.LVL97:
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1104              		.loc 1 1483 0
 1105 0066 E76A     		ldr	r7, [r4, #44]
 1106              	.LVL98:
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1107              		.loc 1 1489 0
 1108 0068 BB42     		cmp	r3, r7
 1109 006a 00D1     		bne	.L89
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1110              		.loc 1 1491 0
 1111 006c E562     		str	r5, [r4, #44]
 1112              	.L89:
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1113              		.loc 1 1499 0
 1114 006e 6564     		str	r5, [r4, #68]
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1115              		.loc 1 1509 0
 1116 0070 A369     		ldr	r3, [r4, #24]
 1117              	.LVL99:
 1118 0072 002B     		cmp	r3, #0
 1119 0074 02DB     		blt	.L90
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1120              		.loc 1 1511 0
 1121 0076 C5F10705 		rsb	r5, r5, #7
 1122              	.LVL100:
 1123 007a A561     		str	r5, [r4, #24]
 1124              	.L90:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1125              		.loc 1 1522 0
 1126 007c 6269     		ldr	r2, [r4, #20]
 1127 007e 07EB8703 		add	r3, r7, r7, lsl #2
 1128 0082 9B00     		lsls	r3, r3, #2
 1129 0084 1949     		ldr	r1, .L100+4
 1130 0086 0B44     		add	r3, r3, r1
 1131 0088 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccLSYPfk.s 			page 111


 1132 008a 01D1     		bne	.L98
 1133 008c 0123     		movs	r3, #1
 1134 008e 00E0     		b	.L91
 1135              	.L98:
 1136 0090 0023     		movs	r3, #0
 1137              	.L91:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1138              		.loc 1 1522 0 is_stmt 0 discriminator 4
 1139 0092 E3B1     		cbz	r3, .L92
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1140              		.loc 1 1527 0 is_stmt 1
 1141 0094 251D     		adds	r5, r4, #4
 1142 0096 2846     		mov	r0, r5
 1143 0098 FFF7FEFF 		bl	uxListRemove
 1144              	.LVL101:
 1145 009c 38B9     		cbnz	r0, .L93
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1146              		.loc 1 1532 0
 1147 009e 0123     		movs	r3, #1
 1148 00a0 03FA07F2 		lsl	r2, r3, r7
 1149 00a4 1249     		ldr	r1, .L100+8
 1150 00a6 0B68     		ldr	r3, [r1]
 1151 00a8 23EA0203 		bic	r3, r3, r2
 1152 00ac 0B60     		str	r3, [r1]
 1153              	.L93:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1154              		.loc 1 1538 0
 1155 00ae E36A     		ldr	r3, [r4, #44]
 1156 00b0 0122     		movs	r2, #1
 1157 00b2 02FA03F1 		lsl	r1, r2, r3
 1158 00b6 0E48     		ldr	r0, .L100+8
 1159 00b8 0268     		ldr	r2, [r0]
 1160 00ba 0A43     		orrs	r2, r2, r1
 1161 00bc 0260     		str	r2, [r0]
 1162 00be 03EB8303 		add	r3, r3, r3, lsl #2
 1163 00c2 9B00     		lsls	r3, r3, #2
 1164 00c4 0948     		ldr	r0, .L100+4
 1165 00c6 1844     		add	r0, r0, r3
 1166 00c8 2946     		mov	r1, r5
 1167 00ca FFF7FEFF 		bl	vListInsertEnd
 1168              	.LVL102:
 1169              	.L92:
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1170              		.loc 1 1545 0
 1171 00ce 3EB1     		cbz	r6, .L86
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1172              		.loc 1 1547 0
 1173 00d0 4FF08052 		mov	r2, #268435456
 1174 00d4 074B     		ldr	r3, .L100+12
 1175 00d6 1A60     		str	r2, [r3]
 1176              	@ 1547 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1177 00d8 BFF34F8F 		dsb
 1178              	@ 0 "" 2
 1179              	@ 1547 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1180 00dc BFF36F8F 		isb
 1181              	@ 0 "" 2
 1182              	.LVL103:
ARM GAS  /tmp/ccLSYPfk.s 			page 112


 1183              		.thumb
 1184              	.L86:
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1185              		.loc 1 1559 0
 1186 00e0 FFF7FEFF 		bl	vPortExitCritical
 1187              	.LVL104:
 1188 00e4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1189              	.LVL105:
 1190              	.L101:
 1191 00e6 00BF     		.align	2
 1192              	.L100:
 1193 00e8 00000000 		.word	.LANCHOR10
 1194 00ec 00000000 		.word	.LANCHOR4
 1195 00f0 00000000 		.word	.LANCHOR13
 1196 00f4 04ED00E0 		.word	-536810236
 1197              		.cfi_endproc
 1198              	.LFE147:
 1200              		.section	.text.vTaskResume,"ax",%progbits
 1201              		.align	2
 1202              		.global	vTaskResume
 1203              		.thumb
 1204              		.thumb_func
 1206              	vTaskResume:
 1207              	.LFB150:
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1208              		.loc 1 1704 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              	.LVL106:
 1213 0000 38B5     		push	{r3, r4, r5, lr}
 1214              	.LCFI12:
 1215              		.cfi_def_cfa_offset 16
 1216              		.cfi_offset 3, -16
 1217              		.cfi_offset 4, -12
 1218              		.cfi_offset 5, -8
 1219              		.cfi_offset 14, -4
 1220              	.LVL107:
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1221              		.loc 1 1708 0
 1222 0002 50B9     		cbnz	r0, .L103
 1223              	.LBB101:
 1224              	.LBB102:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1225              		.loc 2 237 0
 1226              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1227 0004 4FF05003 			mov r3, #80												
 1228 0008 72B6     		cpsid i													
 1229 000a 83F31188 		msr basepri, r3											
 1230 000e BFF36F8F 		isb														
 1231 0012 BFF34F8F 		dsb														
 1232 0016 62B6     		cpsie i													
 1233              	
 1234              	@ 0 "" 2
 1235              	.LVL108:
 1236              		.thumb
 1237              	.L104:
ARM GAS  /tmp/ccLSYPfk.s 			page 113


 1238              	.LBE102:
 1239              	.LBE101:
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1240              		.loc 1 1708 0 discriminator 1
 1241 0018 FEE7     		b	.L104
 1242              	.L103:
 1243 001a 0446     		mov	r4, r0
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1244              		.loc 1 1712 0
 1245 001c 68B3     		cbz	r0, .L102
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1246              		.loc 1 1712 0 is_stmt 0 discriminator 1
 1247 001e 174B     		ldr	r3, .L108
 1248 0020 1B68     		ldr	r3, [r3]
 1249 0022 9842     		cmp	r0, r3
 1250 0024 29D0     		beq	.L102
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1251              		.loc 1 1714 0 is_stmt 1
 1252 0026 FFF7FEFF 		bl	vPortEnterCritical
 1253              	.LVL109:
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1254              		.loc 1 1716 0
 1255 002a 2046     		mov	r0, r4
 1256 002c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1257              	.LVL110:
 1258 0030 08B3     		cbz	r0, .L106
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1259              		.loc 1 1722 0
 1260 0032 251D     		adds	r5, r4, #4
 1261 0034 2846     		mov	r0, r5
 1262 0036 FFF7FEFF 		bl	uxListRemove
 1263              	.LVL111:
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1264              		.loc 1 1723 0
 1265 003a E36A     		ldr	r3, [r4, #44]
 1266 003c 0122     		movs	r2, #1
 1267 003e 02FA03F1 		lsl	r1, r2, r3
 1268 0042 0F48     		ldr	r0, .L108+4
 1269 0044 0268     		ldr	r2, [r0]
 1270 0046 0A43     		orrs	r2, r2, r1
 1271 0048 0260     		str	r2, [r0]
 1272 004a 03EB8303 		add	r3, r3, r3, lsl #2
 1273 004e 9B00     		lsls	r3, r3, #2
 1274 0050 0C48     		ldr	r0, .L108+8
 1275 0052 1844     		add	r0, r0, r3
 1276 0054 2946     		mov	r1, r5
 1277 0056 FFF7FEFF 		bl	vListInsertEnd
 1278              	.LVL112:
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1279              		.loc 1 1726 0
 1280 005a E26A     		ldr	r2, [r4, #44]
 1281 005c 074B     		ldr	r3, .L108
 1282 005e 1B68     		ldr	r3, [r3]
 1283 0060 DB6A     		ldr	r3, [r3, #44]
 1284 0062 9A42     		cmp	r2, r3
 1285 0064 07D3     		bcc	.L106
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccLSYPfk.s 			page 114


 1286              		.loc 1 1731 0
 1287 0066 4FF08052 		mov	r2, #268435456
 1288 006a 074B     		ldr	r3, .L108+12
 1289 006c 1A60     		str	r2, [r3]
 1290              	@ 1731 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1291 006e BFF34F8F 		dsb
 1292              	@ 0 "" 2
 1293              	@ 1731 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1294 0072 BFF36F8F 		isb
 1295              	@ 0 "" 2
 1296              		.thumb
 1297              	.L106:
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1298              		.loc 1 1743 0
 1299 0076 FFF7FEFF 		bl	vPortExitCritical
 1300              	.LVL113:
 1301              	.L102:
 1302 007a 38BD     		pop	{r3, r4, r5, pc}
 1303              	.LVL114:
 1304              	.L109:
 1305              		.align	2
 1306              	.L108:
 1307 007c 00000000 		.word	.LANCHOR10
 1308 0080 00000000 		.word	.LANCHOR13
 1309 0084 00000000 		.word	.LANCHOR4
 1310 0088 04ED00E0 		.word	-536810236
 1311              		.cfi_endproc
 1312              	.LFE150:
 1314              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1315              		.align	2
 1316              		.global	xTaskResumeFromISR
 1317              		.thumb
 1318              		.thumb_func
 1320              	xTaskResumeFromISR:
 1321              	.LFB151:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1322              		.loc 1 1758 0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 0
 1325              		@ frame_needed = 0, uses_anonymous_args = 0
 1326              	.LVL115:
 1327 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1328              	.LCFI13:
 1329              		.cfi_def_cfa_offset 24
 1330              		.cfi_offset 3, -24
 1331              		.cfi_offset 4, -20
 1332              		.cfi_offset 5, -16
 1333              		.cfi_offset 6, -12
 1334              		.cfi_offset 7, -8
 1335              		.cfi_offset 14, -4
 1336              	.LVL116:
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1337              		.loc 1 1763 0
 1338 0002 50B9     		cbnz	r0, .L111
 1339              	.LBB103:
 1340              	.LBB104:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
ARM GAS  /tmp/ccLSYPfk.s 			page 115


 1341              		.loc 2 237 0
 1342              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1343 0004 4FF05003 			mov r3, #80												
 1344 0008 72B6     		cpsid i													
 1345 000a 83F31188 		msr basepri, r3											
 1346 000e BFF36F8F 		isb														
 1347 0012 BFF34F8F 		dsb														
 1348 0016 62B6     		cpsie i													
 1349              	
 1350              	@ 0 "" 2
 1351              	.LVL117:
 1352              		.thumb
 1353              	.L112:
 1354              	.LBE104:
 1355              	.LBE103:
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1356              		.loc 1 1763 0 discriminator 1
 1357 0018 FEE7     		b	.L112
 1358              	.L111:
 1359 001a 0446     		mov	r4, r0
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1360              		.loc 1 1781 0
 1361 001c FFF7FEFF 		bl	vPortValidateInterruptPriority
 1362              	.LVL118:
 1363              	.LBB105:
 1364              	.LBB106:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1365              		.loc 2 255 0
 1366              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1367 0020 EFF31187 			mrs r7, basepri											
 1368 0024 4FF05003 		mov r3, #80												
 1369 0028 72B6     		cpsid i													
 1370 002a 83F31188 		msr basepri, r3											
 1371 002e BFF36F8F 		isb														
 1372 0032 BFF34F8F 		dsb														
 1373 0036 62B6     		cpsie i													
 1374              	
 1375              	@ 0 "" 2
 1376              	.LVL119:
 1377              		.thumb
 1378              	.LBE106:
 1379              	.LBE105:
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1380              		.loc 1 1785 0
 1381 0038 2046     		mov	r0, r4
 1382 003a FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1383              	.LVL120:
 1384 003e 38B3     		cbz	r0, .L116
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1385              		.loc 1 1790 0
 1386 0040 164B     		ldr	r3, .L119
 1387 0042 1B68     		ldr	r3, [r3]
 1388 0044 EBB9     		cbnz	r3, .L114
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1389              		.loc 1 1794 0
 1390 0046 E26A     		ldr	r2, [r4, #44]
 1391 0048 154B     		ldr	r3, .L119+4
ARM GAS  /tmp/ccLSYPfk.s 			page 116


 1392 004a 1B68     		ldr	r3, [r3]
 1393 004c DB6A     		ldr	r3, [r3, #44]
 1394 004e 9A42     		cmp	r2, r3
 1395 0050 01D2     		bcs	.L117
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1396              		.loc 1 1759 0
 1397 0052 0025     		movs	r5, #0
 1398 0054 00E0     		b	.L115
 1399              	.L117:
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1400              		.loc 1 1796 0
 1401 0056 0125     		movs	r5, #1
 1402              	.L115:
 1403              	.LVL121:
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1404              		.loc 1 1803 0
 1405 0058 261D     		adds	r6, r4, #4
 1406 005a 3046     		mov	r0, r6
 1407 005c FFF7FEFF 		bl	uxListRemove
 1408              	.LVL122:
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1409              		.loc 1 1804 0
 1410 0060 E36A     		ldr	r3, [r4, #44]
 1411 0062 0122     		movs	r2, #1
 1412 0064 02FA03F1 		lsl	r1, r2, r3
 1413 0068 0E48     		ldr	r0, .L119+8
 1414 006a 0268     		ldr	r2, [r0]
 1415 006c 0A43     		orrs	r2, r2, r1
 1416 006e 0260     		str	r2, [r0]
 1417 0070 03EB8303 		add	r3, r3, r3, lsl #2
 1418 0074 9B00     		lsls	r3, r3, #2
 1419 0076 0C48     		ldr	r0, .L119+12
 1420 0078 1844     		add	r0, r0, r3
 1421 007a 3146     		mov	r1, r6
 1422 007c FFF7FEFF 		bl	vListInsertEnd
 1423              	.LVL123:
 1424 0080 07E0     		b	.L113
 1425              	.LVL124:
 1426              	.L114:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1427              		.loc 1 1811 0
 1428 0082 0A48     		ldr	r0, .L119+16
 1429 0084 04F11801 		add	r1, r4, #24
 1430 0088 FFF7FEFF 		bl	vListInsertEnd
 1431              	.LVL125:
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1432              		.loc 1 1759 0
 1433 008c 0025     		movs	r5, #0
 1434 008e 00E0     		b	.L113
 1435              	.L116:
 1436 0090 0025     		movs	r5, #0
 1437              	.LVL126:
 1438              	.L113:
 1439              	.LBB107:
 1440              	.LBB108:
 1441              		.loc 2 275 0
 1442              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
ARM GAS  /tmp/ccLSYPfk.s 			page 117


 1443 0092 87F31188 			msr basepri, r7	
 1444              	@ 0 "" 2
 1445              		.thumb
 1446              	.LBE108:
 1447              	.LBE107:
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1448              		.loc 1 1822 0
 1449 0096 2846     		mov	r0, r5
 1450 0098 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1451              	.LVL127:
 1452              	.L120:
 1453 009a 00BF     		.align	2
 1454              	.L119:
 1455 009c 00000000 		.word	.LANCHOR16
 1456 00a0 00000000 		.word	.LANCHOR10
 1457 00a4 00000000 		.word	.LANCHOR13
 1458 00a8 00000000 		.word	.LANCHOR4
 1459 00ac 00000000 		.word	.LANCHOR1
 1460              		.cfi_endproc
 1461              	.LFE151:
 1463              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1464              		.align	2
 1465              		.global	vTaskStartScheduler
 1466              		.thumb
 1467              		.thumb_func
 1469              	vTaskStartScheduler:
 1470              	.LFB152:
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1471              		.loc 1 1828 0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 0, uses_anonymous_args = 0
 1475 0000 00B5     		push	{lr}
 1476              	.LCFI14:
 1477              		.cfi_def_cfa_offset 4
 1478              		.cfi_offset 14, -4
 1479 0002 83B0     		sub	sp, sp, #12
 1480              	.LCFI15:
 1481              		.cfi_def_cfa_offset 16
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1482              		.loc 1 1861 0
 1483 0004 0023     		movs	r3, #0
 1484 0006 0093     		str	r3, [sp]
 1485 0008 184A     		ldr	r2, .L126
 1486 000a 0192     		str	r2, [sp, #4]
 1487 000c 1848     		ldr	r0, .L126+4
 1488 000e 1949     		ldr	r1, .L126+8
 1489 0010 8022     		movs	r2, #128
 1490 0012 FFF7FEFF 		bl	xTaskCreate
 1491              	.LVL128:
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1492              		.loc 1 1882 0
 1493 0016 0128     		cmp	r0, #1
 1494 0018 16D1     		bne	.L122
 1495              	.LBB109:
 1496              	.LBB110:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
ARM GAS  /tmp/ccLSYPfk.s 			page 118


 1497              		.loc 2 237 0
 1498              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1499 001a 4FF05003 			mov r3, #80												
 1500 001e 72B6     		cpsid i													
 1501 0020 83F31188 		msr basepri, r3											
 1502 0024 BFF36F8F 		isb														
 1503 0028 BFF34F8F 		dsb														
 1504 002c 62B6     		cpsie i													
 1505              	
 1506              	@ 0 "" 2
 1507              	.LVL129:
 1508              		.thumb
 1509              	.LBE110:
 1510              	.LBE109:
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1511              		.loc 1 1899 0
 1512 002e 4FF0FF32 		mov	r2, #-1
 1513 0032 114B     		ldr	r3, .L126+12
 1514 0034 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1515              		.loc 1 1900 0
 1516 0036 0122     		movs	r2, #1
 1517 0038 104B     		ldr	r3, .L126+16
 1518 003a 1A60     		str	r2, [r3]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1519              		.loc 1 1901 0
 1520 003c 0022     		movs	r2, #0
 1521 003e 104B     		ldr	r3, .L126+20
 1522 0040 1A60     		str	r2, [r3]
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1523              		.loc 1 1910 0
 1524 0042 FFF7FEFF 		bl	xPortStartScheduler
 1525              	.LVL130:
 1526 0046 0DE0     		b	.L121
 1527              	.LVL131:
 1528              	.L122:
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1529              		.loc 1 1925 0
 1530 0048 B0F1FF3F 		cmp	r0, #-1
 1531 004c 0AD1     		bne	.L121
 1532              	.LBB111:
 1533              	.LBB112:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1534              		.loc 2 237 0
 1535              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1536 004e 4FF05003 			mov r3, #80												
 1537 0052 72B6     		cpsid i													
 1538 0054 83F31188 		msr basepri, r3											
 1539 0058 BFF36F8F 		isb														
 1540 005c BFF34F8F 		dsb														
 1541 0060 62B6     		cpsie i													
 1542              	
 1543              	@ 0 "" 2
 1544              	.LVL132:
 1545              		.thumb
 1546              	.L124:
 1547              	.LBE112:
ARM GAS  /tmp/ccLSYPfk.s 			page 119


 1548              	.LBE111:
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1549              		.loc 1 1925 0 discriminator 2
 1550 0062 FEE7     		b	.L124
 1551              	.LVL133:
 1552              	.L121:
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1553              		.loc 1 1931 0
 1554 0064 03B0     		add	sp, sp, #12
 1555              	.LCFI16:
 1556              		.cfi_def_cfa_offset 4
 1557              		@ sp needed
 1558 0066 5DF804FB 		ldr	pc, [sp], #4
 1559              	.L127:
 1560 006a 00BF     		.align	2
 1561              	.L126:
 1562 006c 00000000 		.word	.LANCHOR17
 1563 0070 00000000 		.word	prvIdleTask
 1564 0074 00000000 		.word	.LC0
 1565 0078 00000000 		.word	.LANCHOR3
 1566 007c 00000000 		.word	.LANCHOR11
 1567 0080 00000000 		.word	.LANCHOR14
 1568              		.cfi_endproc
 1569              	.LFE152:
 1571              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1572              		.align	2
 1573              		.global	vTaskEndScheduler
 1574              		.thumb
 1575              		.thumb_func
 1577              	vTaskEndScheduler:
 1578              	.LFB153:
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1579              		.loc 1 1935 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 0
 1582              		@ frame_needed = 0, uses_anonymous_args = 0
 1583 0000 08B5     		push	{r3, lr}
 1584              	.LCFI17:
 1585              		.cfi_def_cfa_offset 8
 1586              		.cfi_offset 3, -8
 1587              		.cfi_offset 14, -4
 1588              	.LBB113:
 1589              	.LBB114:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1590              		.loc 2 237 0
 1591              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1592 0002 4FF05003 			mov r3, #80												
 1593 0006 72B6     		cpsid i													
 1594 0008 83F31188 		msr basepri, r3											
 1595 000c BFF36F8F 		isb														
 1596 0010 BFF34F8F 		dsb														
 1597 0014 62B6     		cpsie i													
 1598              	
 1599              	@ 0 "" 2
 1600              	.LVL134:
 1601              		.thumb
 1602              	.LBE114:
ARM GAS  /tmp/ccLSYPfk.s 			page 120


 1603              	.LBE113:
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1604              		.loc 1 1940 0
 1605 0016 0022     		movs	r2, #0
 1606 0018 024B     		ldr	r3, .L130
 1607 001a 1A60     		str	r2, [r3]
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1608              		.loc 1 1941 0
 1609 001c FFF7FEFF 		bl	vPortEndScheduler
 1610              	.LVL135:
 1611 0020 08BD     		pop	{r3, pc}
 1612              	.L131:
 1613 0022 00BF     		.align	2
 1614              	.L130:
 1615 0024 00000000 		.word	.LANCHOR11
 1616              		.cfi_endproc
 1617              	.LFE153:
 1619              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1620              		.align	2
 1621              		.global	vTaskSuspendAll
 1622              		.thumb
 1623              		.thumb_func
 1625              	vTaskSuspendAll:
 1626              	.LFB154:
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1627              		.loc 1 1946 0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 0
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
 1631              		@ link register save eliminated.
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1632              		.loc 1 1951 0
 1633 0000 024A     		ldr	r2, .L133
 1634 0002 1368     		ldr	r3, [r2]
 1635 0004 0133     		adds	r3, r3, #1
 1636 0006 1360     		str	r3, [r2]
 1637 0008 7047     		bx	lr
 1638              	.L134:
 1639 000a 00BF     		.align	2
 1640              	.L133:
 1641 000c 00000000 		.word	.LANCHOR16
 1642              		.cfi_endproc
 1643              	.LFE154:
 1645              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1646              		.align	2
 1647              		.global	xTaskGetTickCount
 1648              		.thumb
 1649              		.thumb_func
 1651              	xTaskGetTickCount:
 1652              	.LFB156:
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1653              		.loc 1 2129 0
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 0
 1656              		@ frame_needed = 0, uses_anonymous_args = 0
 1657              		@ link register save eliminated.
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccLSYPfk.s 			page 121


 1658              		.loc 1 2135 0
 1659 0000 014B     		ldr	r3, .L136
 1660 0002 1868     		ldr	r0, [r3]
 1661              	.LVL136:
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1662              		.loc 1 2140 0
 1663 0004 7047     		bx	lr
 1664              	.L137:
 1665 0006 00BF     		.align	2
 1666              	.L136:
 1667 0008 00000000 		.word	.LANCHOR14
 1668              		.cfi_endproc
 1669              	.LFE156:
 1671              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1672              		.align	2
 1673              		.global	xTaskGetTickCountFromISR
 1674              		.thumb
 1675              		.thumb_func
 1677              	xTaskGetTickCountFromISR:
 1678              	.LFB157:
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1679              		.loc 1 2144 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 0
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
 1683 0000 08B5     		push	{r3, lr}
 1684              	.LCFI18:
 1685              		.cfi_def_cfa_offset 8
 1686              		.cfi_offset 3, -8
 1687              		.cfi_offset 14, -4
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1688              		.loc 1 2162 0
 1689 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1690              	.LVL137:
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1691              		.loc 1 2166 0
 1692 0006 014B     		ldr	r3, .L140
 1693 0008 1868     		ldr	r0, [r3]
 1694              	.LVL138:
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1695              		.loc 1 2171 0
 1696 000a 08BD     		pop	{r3, pc}
 1697              	.L141:
 1698              		.align	2
 1699              	.L140:
 1700 000c 00000000 		.word	.LANCHOR14
 1701              		.cfi_endproc
 1702              	.LFE157:
 1704              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1705              		.align	2
 1706              		.global	uxTaskGetNumberOfTasks
 1707              		.thumb
 1708              		.thumb_func
 1710              	uxTaskGetNumberOfTasks:
 1711              	.LFB158:
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1712              		.loc 1 2175 0
ARM GAS  /tmp/ccLSYPfk.s 			page 122


 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 0
 1715              		@ frame_needed = 0, uses_anonymous_args = 0
 1716              		@ link register save eliminated.
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1717              		.loc 1 2178 0
 1718 0000 014B     		ldr	r3, .L143
 1719 0002 1868     		ldr	r0, [r3]
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1720              		.loc 1 2179 0
 1721 0004 7047     		bx	lr
 1722              	.L144:
 1723 0006 00BF     		.align	2
 1724              	.L143:
 1725 0008 00000000 		.word	.LANCHOR9
 1726              		.cfi_endproc
 1727              	.LFE158:
 1729              		.section	.text.pcTaskGetName,"ax",%progbits
 1730              		.align	2
 1731              		.global	pcTaskGetName
 1732              		.thumb
 1733              		.thumb_func
 1735              	pcTaskGetName:
 1736              	.LFB159:
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1737              		.loc 1 2183 0
 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 0
 1740              		@ frame_needed = 0, uses_anonymous_args = 0
 1741              		@ link register save eliminated.
 1742              	.LVL139:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1743              		.loc 1 2188 0
 1744 0000 0346     		mov	r3, r0
 1745 0002 08B9     		cbnz	r0, .L146
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1746              		.loc 1 2188 0 is_stmt 0 discriminator 1
 1747 0004 084B     		ldr	r3, .L149
 1748 0006 1B68     		ldr	r3, [r3]
 1749              	.LVL140:
 1750              	.L146:
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1751              		.loc 1 2189 0 is_stmt 1 discriminator 4
 1752 0008 53B9     		cbnz	r3, .L147
 1753              	.LBB115:
 1754              	.LBB116:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1755              		.loc 2 237 0
 1756              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1757 000a 4FF05003 			mov r3, #80												
 1758 000e 72B6     		cpsid i													
 1759 0010 83F31188 		msr basepri, r3											
 1760 0014 BFF36F8F 		isb														
 1761 0018 BFF34F8F 		dsb														
 1762 001c 62B6     		cpsie i													
 1763              	
 1764              	@ 0 "" 2
ARM GAS  /tmp/ccLSYPfk.s 			page 123


 1765              	.LVL141:
 1766              		.thumb
 1767              	.L148:
 1768              	.LBE116:
 1769              	.LBE115:
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1770              		.loc 1 2189 0 discriminator 1
 1771 001e FEE7     		b	.L148
 1772              	.LVL142:
 1773              	.L147:
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1774              		.loc 1 2191 0
 1775 0020 03F13400 		add	r0, r3, #52
 1776 0024 7047     		bx	lr
 1777              	.L150:
 1778 0026 00BF     		.align	2
 1779              	.L149:
 1780 0028 00000000 		.word	.LANCHOR10
 1781              		.cfi_endproc
 1782              	.LFE159:
 1784              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1785              		.align	2
 1786              		.global	xTaskIncrementTick
 1787              		.thumb
 1788              		.thumb_func
 1790              	xTaskIncrementTick:
 1791              	.LFB160:
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1792              		.loc 1 2501 0
 1793              		.cfi_startproc
 1794              		@ args = 0, pretend = 0, frame = 0
 1795              		@ frame_needed = 0, uses_anonymous_args = 0
 1796 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1797              	.LCFI19:
 1798              		.cfi_def_cfa_offset 24
 1799              		.cfi_offset 3, -24
 1800              		.cfi_offset 4, -20
 1801              		.cfi_offset 5, -16
 1802              		.cfi_offset 6, -12
 1803              		.cfi_offset 7, -8
 1804              		.cfi_offset 14, -4
 1805              	.LVL143:
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1806              		.loc 1 2510 0
 1807 0002 3E4B     		ldr	r3, .L172
 1808 0004 1B68     		ldr	r3, [r3]
 1809 0006 002B     		cmp	r3, #0
 1810 0008 6BD1     		bne	.L152
 1811              	.LBB117:
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1812              		.loc 1 2514 0
 1813 000a 3D4B     		ldr	r3, .L172+4
 1814 000c 1D68     		ldr	r5, [r3]
 1815 000e 0135     		adds	r5, r5, #1
 1816              	.LVL144:
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1817              		.loc 1 2518 0
ARM GAS  /tmp/ccLSYPfk.s 			page 124


 1818 0010 1D60     		str	r5, [r3]
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1819              		.loc 1 2520 0
 1820 0012 D5B9     		cbnz	r5, .L153
 1821              	.LBB118:
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1822              		.loc 1 2522 0
 1823 0014 3B4B     		ldr	r3, .L172+8
 1824 0016 1B68     		ldr	r3, [r3]
 1825 0018 1B68     		ldr	r3, [r3]
 1826 001a 53B1     		cbz	r3, .L154
 1827              	.LBB119:
 1828              	.LBB120:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1829              		.loc 2 237 0
 1830              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1831 001c 4FF05003 			mov r3, #80												
 1832 0020 72B6     		cpsid i													
 1833 0022 83F31188 		msr basepri, r3											
 1834 0026 BFF36F8F 		isb														
 1835 002a BFF34F8F 		dsb														
 1836 002e 62B6     		cpsie i													
 1837              	
 1838              	@ 0 "" 2
 1839              	.LVL145:
 1840              		.thumb
 1841              	.L155:
 1842              	.LBE120:
 1843              	.LBE119:
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1844              		.loc 1 2522 0 discriminator 1
 1845 0030 FEE7     		b	.L155
 1846              	.L154:
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1847              		.loc 1 2522 0 is_stmt 0 discriminator 2
 1848 0032 344A     		ldr	r2, .L172+8
 1849 0034 1168     		ldr	r1, [r2]
 1850              	.LVL146:
 1851 0036 344B     		ldr	r3, .L172+12
 1852 0038 1868     		ldr	r0, [r3]
 1853 003a 1060     		str	r0, [r2]
 1854 003c 1960     		str	r1, [r3]
 1855 003e 334A     		ldr	r2, .L172+16
 1856 0040 1368     		ldr	r3, [r2]
 1857 0042 0133     		adds	r3, r3, #1
 1858 0044 1360     		str	r3, [r2]
 1859 0046 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1860              	.LVL147:
 1861              	.L153:
 1862              	.LBE118:
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1863              		.loc 1 2533 0 is_stmt 1
 1864 004a 314B     		ldr	r3, .L172+20
 1865 004c 1B68     		ldr	r3, [r3]
 1866 004e 9D42     		cmp	r5, r3
 1867 0050 03D2     		bcs	.L166
 1868              	.LBE117:
ARM GAS  /tmp/ccLSYPfk.s 			page 125


2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1869              		.loc 1 2504 0
 1870 0052 0024     		movs	r4, #0
 1871 0054 3AE0     		b	.L157
 1872              	.LVL148:
 1873              	.L168:
 1874              	.LBB121:
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1875              		.loc 1 2599 0
 1876 0056 0124     		movs	r4, #1
 1877              	.LVL149:
 1878 0058 00E0     		b	.L156
 1879              	.LVL150:
 1880              	.L166:
 1881 005a 0024     		movs	r4, #0
 1882              	.LVL151:
 1883              	.L156:
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1884              		.loc 1 2537 0
 1885 005c 294B     		ldr	r3, .L172+8
 1886 005e 1B68     		ldr	r3, [r3]
 1887 0060 1B68     		ldr	r3, [r3]
 1888 0062 0BB9     		cbnz	r3, .L167
 1889 0064 0123     		movs	r3, #1
 1890 0066 00E0     		b	.L158
 1891              	.L167:
 1892 0068 0023     		movs	r3, #0
 1893              	.L158:
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1894              		.loc 1 2537 0 is_stmt 0 discriminator 4
 1895 006a 23B1     		cbz	r3, .L159
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 1896              		.loc 1 2544 0 is_stmt 1
 1897 006c 4FF0FF32 		mov	r2, #-1
 1898 0070 274B     		ldr	r3, .L172+20
 1899 0072 1A60     		str	r2, [r3]
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1900              		.loc 1 2545 0
 1901 0074 2AE0     		b	.L157
 1902              	.L159:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1903              		.loc 1 2553 0
 1904 0076 234B     		ldr	r3, .L172+8
 1905 0078 1B68     		ldr	r3, [r3]
 1906 007a DB68     		ldr	r3, [r3, #12]
 1907 007c DE68     		ldr	r6, [r3, #12]
 1908              	.LVL152:
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1909              		.loc 1 2554 0
 1910 007e 7368     		ldr	r3, [r6, #4]
 1911              	.LVL153:
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1912              		.loc 1 2556 0
 1913 0080 9D42     		cmp	r5, r3
 1914 0082 02D2     		bcs	.L160
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 1915              		.loc 1 2563 0
ARM GAS  /tmp/ccLSYPfk.s 			page 126


 1916 0084 224A     		ldr	r2, .L172+20
 1917 0086 1360     		str	r3, [r2]
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1918              		.loc 1 2564 0
 1919 0088 20E0     		b	.L157
 1920              	.L160:
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1921              		.loc 1 2572 0
 1922 008a 371D     		adds	r7, r6, #4
 1923 008c 3846     		mov	r0, r7
 1924 008e FFF7FEFF 		bl	uxListRemove
 1925              	.LVL154:
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1926              		.loc 1 2576 0
 1927 0092 B36A     		ldr	r3, [r6, #40]
 1928 0094 1BB1     		cbz	r3, .L161
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1929              		.loc 1 2578 0
 1930 0096 06F11800 		add	r0, r6, #24
 1931 009a FFF7FEFF 		bl	uxListRemove
 1932              	.LVL155:
 1933              	.L161:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1934              		.loc 1 2587 0
 1935 009e F36A     		ldr	r3, [r6, #44]
 1936 00a0 0122     		movs	r2, #1
 1937 00a2 02FA03F1 		lsl	r1, r2, r3
 1938 00a6 1B48     		ldr	r0, .L172+24
 1939 00a8 0268     		ldr	r2, [r0]
 1940 00aa 0A43     		orrs	r2, r2, r1
 1941 00ac 0260     		str	r2, [r0]
 1942 00ae 03EB8303 		add	r3, r3, r3, lsl #2
 1943 00b2 9B00     		lsls	r3, r3, #2
 1944 00b4 1848     		ldr	r0, .L172+28
 1945 00b6 1844     		add	r0, r0, r3
 1946 00b8 3946     		mov	r1, r7
 1947 00ba FFF7FEFF 		bl	vListInsertEnd
 1948              	.LVL156:
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1949              		.loc 1 2597 0
 1950 00be F26A     		ldr	r2, [r6, #44]
 1951 00c0 164B     		ldr	r3, .L172+32
 1952 00c2 1B68     		ldr	r3, [r3]
 1953 00c4 DB6A     		ldr	r3, [r3, #44]
 1954 00c6 9A42     		cmp	r2, r3
 1955 00c8 C5D2     		bcs	.L168
 1956 00ca C7E7     		b	.L156
 1957              	.LVL157:
 1958              	.L157:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1959              		.loc 1 2616 0
 1960 00cc 134B     		ldr	r3, .L172+32
 1961 00ce 1B68     		ldr	r3, [r3]
 1962 00d0 DB6A     		ldr	r3, [r3, #44]
 1963 00d2 03EB8303 		add	r3, r3, r3, lsl #2
 1964 00d6 9B00     		lsls	r3, r3, #2
 1965 00d8 0F4A     		ldr	r2, .L172+28
ARM GAS  /tmp/ccLSYPfk.s 			page 127


 1966 00da D358     		ldr	r3, [r2, r3]
 1967 00dc 012B     		cmp	r3, #1
 1968 00de 06D8     		bhi	.L169
 1969 00e0 06E0     		b	.L164
 1970              	.LVL158:
 1971              	.L152:
 1972              	.LBE121:
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1973              		.loc 1 2644 0
 1974 00e2 0F4A     		ldr	r2, .L172+36
 1975 00e4 1368     		ldr	r3, [r2]
 1976 00e6 0133     		adds	r3, r3, #1
 1977 00e8 1360     		str	r3, [r2]
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1978              		.loc 1 2504 0
 1979 00ea 0024     		movs	r4, #0
 1980 00ec 00E0     		b	.L164
 1981              	.LVL159:
 1982              	.L169:
 1983              	.LBB122:
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1984              		.loc 1 2618 0
 1985 00ee 0124     		movs	r4, #1
 1986              	.LVL160:
 1987              	.L164:
 1988              	.LBE122:
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1989              		.loc 1 2657 0
 1990 00f0 0C4B     		ldr	r3, .L172+40
 1991 00f2 1B68     		ldr	r3, [r3]
 1992 00f4 03B1     		cbz	r3, .L165
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1993              		.loc 1 2659 0
 1994 00f6 0124     		movs	r4, #1
 1995              	.LVL161:
 1996              	.L165:
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1997              		.loc 1 2669 0
 1998 00f8 2046     		mov	r0, r4
 1999 00fa F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2000              	.LVL162:
 2001              	.L173:
 2002              		.align	2
 2003              	.L172:
 2004 00fc 00000000 		.word	.LANCHOR16
 2005 0100 00000000 		.word	.LANCHOR14
 2006 0104 00000000 		.word	.LANCHOR2
 2007 0108 00000000 		.word	.LANCHOR8
 2008 010c 00000000 		.word	.LANCHOR18
 2009 0110 00000000 		.word	.LANCHOR3
 2010 0114 00000000 		.word	.LANCHOR13
 2011 0118 00000000 		.word	.LANCHOR4
 2012 011c 00000000 		.word	.LANCHOR10
 2013 0120 00000000 		.word	.LANCHOR19
 2014 0124 00000000 		.word	.LANCHOR20
 2015              		.cfi_endproc
 2016              	.LFE160:
ARM GAS  /tmp/ccLSYPfk.s 			page 128


 2018              		.section	.text.xTaskResumeAll,"ax",%progbits
 2019              		.align	2
 2020              		.global	xTaskResumeAll
 2021              		.thumb
 2022              		.thumb_func
 2024              	xTaskResumeAll:
 2025              	.LFB155:
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2026              		.loc 1 2019 0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 0
 2029              		@ frame_needed = 0, uses_anonymous_args = 0
 2030 0000 38B5     		push	{r3, r4, r5, lr}
 2031              	.LCFI20:
 2032              		.cfi_def_cfa_offset 16
 2033              		.cfi_offset 3, -16
 2034              		.cfi_offset 4, -12
 2035              		.cfi_offset 5, -8
 2036              		.cfi_offset 14, -4
 2037              	.LVL163:
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2038              		.loc 1 2025 0
 2039 0002 354B     		ldr	r3, .L189
 2040 0004 1B68     		ldr	r3, [r3]
 2041 0006 53B9     		cbnz	r3, .L175
 2042              	.LBB123:
 2043              	.LBB124:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2044              		.loc 2 237 0
 2045              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2046 0008 4FF05003 			mov r3, #80												
 2047 000c 72B6     		cpsid i													
 2048 000e 83F31188 		msr basepri, r3											
 2049 0012 BFF36F8F 		isb														
 2050 0016 BFF34F8F 		dsb														
 2051 001a 62B6     		cpsie i													
 2052              	
 2053              	@ 0 "" 2
 2054              	.LVL164:
 2055              		.thumb
 2056              	.L176:
 2057              	.LBE124:
 2058              	.LBE123:
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2059              		.loc 1 2025 0 discriminator 1
 2060 001c FEE7     		b	.L176
 2061              	.L175:
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2062              		.loc 1 2032 0
 2063 001e FFF7FEFF 		bl	vPortEnterCritical
 2064              	.LVL165:
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2065              		.loc 1 2034 0
 2066 0022 2D4B     		ldr	r3, .L189
 2067 0024 1A68     		ldr	r2, [r3]
 2068 0026 013A     		subs	r2, r2, #1
 2069 0028 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccLSYPfk.s 			page 129


2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2070              		.loc 1 2036 0
 2071 002a 1B68     		ldr	r3, [r3]
 2072 002c 002B     		cmp	r3, #0
 2073 002e 4CD1     		bne	.L185
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2074              		.loc 1 2038 0
 2075 0030 2A4B     		ldr	r3, .L189+4
 2076 0032 1B68     		ldr	r3, [r3]
 2077 0034 33BB     		cbnz	r3, .L186
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2078              		.loc 1 2021 0
 2079 0036 0024     		movs	r4, #0
 2080 0038 4AE0     		b	.L177
 2081              	.LVL166:
 2082              	.L180:
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2083              		.loc 1 2044 0
 2084 003a 294B     		ldr	r3, .L189+8
 2085 003c DB68     		ldr	r3, [r3, #12]
 2086 003e DC68     		ldr	r4, [r3, #12]
 2087              	.LVL167:
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2088              		.loc 1 2045 0
 2089 0040 04F11800 		add	r0, r4, #24
 2090 0044 FFF7FEFF 		bl	uxListRemove
 2091              	.LVL168:
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2092              		.loc 1 2046 0
 2093 0048 251D     		adds	r5, r4, #4
 2094 004a 2846     		mov	r0, r5
 2095 004c FFF7FEFF 		bl	uxListRemove
 2096              	.LVL169:
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2097              		.loc 1 2047 0
 2098 0050 E36A     		ldr	r3, [r4, #44]
 2099 0052 0122     		movs	r2, #1
 2100 0054 02FA03F1 		lsl	r1, r2, r3
 2101 0058 2248     		ldr	r0, .L189+12
 2102 005a 0268     		ldr	r2, [r0]
 2103 005c 0A43     		orrs	r2, r2, r1
 2104 005e 0260     		str	r2, [r0]
 2105 0060 03EB8303 		add	r3, r3, r3, lsl #2
 2106 0064 9B00     		lsls	r3, r3, #2
 2107 0066 2048     		ldr	r0, .L189+16
 2108 0068 1844     		add	r0, r0, r3
 2109 006a 2946     		mov	r1, r5
 2110 006c FFF7FEFF 		bl	vListInsertEnd
 2111              	.LVL170:
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2112              		.loc 1 2051 0
 2113 0070 E26A     		ldr	r2, [r4, #44]
 2114 0072 1E4B     		ldr	r3, .L189+20
 2115 0074 1B68     		ldr	r3, [r3]
 2116 0076 DB6A     		ldr	r3, [r3, #44]
 2117 0078 9A42     		cmp	r2, r3
 2118 007a 04D3     		bcc	.L178
ARM GAS  /tmp/ccLSYPfk.s 			page 130


2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2119              		.loc 1 2053 0
 2120 007c 0122     		movs	r2, #1
 2121 007e 1C4B     		ldr	r3, .L189+24
 2122 0080 1A60     		str	r2, [r3]
 2123 0082 00E0     		b	.L178
 2124              	.LVL171:
 2125              	.L186:
 2126 0084 0024     		movs	r4, #0
 2127              	.LVL172:
 2128              	.L178:
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2129              		.loc 1 2042 0
 2130 0086 164B     		ldr	r3, .L189+8
 2131 0088 1B68     		ldr	r3, [r3]
 2132 008a 002B     		cmp	r3, #0
 2133 008c D5D1     		bne	.L180
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2134              		.loc 1 2061 0
 2135 008e 0CB1     		cbz	r4, .L181
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2136              		.loc 1 2069 0
 2137 0090 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2138              	.LVL173:
 2139              	.L181:
 2140              	.LBB125:
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2141              		.loc 1 2077 0
 2142 0094 174B     		ldr	r3, .L189+28
 2143 0096 1C68     		ldr	r4, [r3]
 2144              	.LVL174:
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2145              		.loc 1 2079 0
 2146 0098 54B1     		cbz	r4, .L182
 2147              	.L184:
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2148              		.loc 1 2083 0
 2149 009a FFF7FEFF 		bl	xTaskIncrementTick
 2150              	.LVL175:
 2151 009e 10B1     		cbz	r0, .L183
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2152              		.loc 1 2085 0
 2153 00a0 0122     		movs	r2, #1
 2154 00a2 134B     		ldr	r3, .L189+24
 2155 00a4 1A60     		str	r2, [r3]
 2156              	.L183:
 2157              	.LVL176:
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2158              		.loc 1 2092 0
 2159 00a6 013C     		subs	r4, r4, #1
 2160              	.LVL177:
 2161 00a8 F7D1     		bne	.L184
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2162              		.loc 1 2094 0
 2163 00aa 0022     		movs	r2, #0
 2164 00ac 114B     		ldr	r3, .L189+28
 2165 00ae 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccLSYPfk.s 			page 131


 2166              	.L182:
 2167              	.LBE125:
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2168              		.loc 1 2102 0
 2169 00b0 0F4B     		ldr	r3, .L189+24
 2170 00b2 1B68     		ldr	r3, [r3]
 2171 00b4 5BB1     		cbz	r3, .L187
 2172              	.LVL178:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2173              		.loc 1 2109 0
 2174 00b6 4FF08052 		mov	r2, #268435456
 2175 00ba 0F4B     		ldr	r3, .L189+32
 2176 00bc 1A60     		str	r2, [r3]
 2177              	@ 2109 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2178 00be BFF34F8F 		dsb
 2179              	@ 0 "" 2
 2180              	@ 2109 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2181 00c2 BFF36F8F 		isb
 2182              	@ 0 "" 2
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2183              		.loc 1 2106 0
 2184              		.thumb
 2185 00c6 0124     		movs	r4, #1
 2186              	.LVL179:
 2187 00c8 02E0     		b	.L177
 2188              	.LVL180:
 2189              	.L185:
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2190              		.loc 1 2021 0
 2191 00ca 0024     		movs	r4, #0
 2192 00cc 00E0     		b	.L177
 2193              	.LVL181:
 2194              	.L187:
 2195 00ce 0024     		movs	r4, #0
 2196              	.LVL182:
 2197              	.L177:
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2198              		.loc 1 2122 0
 2199 00d0 FFF7FEFF 		bl	vPortExitCritical
 2200              	.LVL183:
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2201              		.loc 1 2125 0
 2202 00d4 2046     		mov	r0, r4
 2203 00d6 38BD     		pop	{r3, r4, r5, pc}
 2204              	.LVL184:
 2205              	.L190:
 2206              		.align	2
 2207              	.L189:
 2208 00d8 00000000 		.word	.LANCHOR16
 2209 00dc 00000000 		.word	.LANCHOR9
 2210 00e0 00000000 		.word	.LANCHOR1
 2211 00e4 00000000 		.word	.LANCHOR13
 2212 00e8 00000000 		.word	.LANCHOR4
 2213 00ec 00000000 		.word	.LANCHOR10
 2214 00f0 00000000 		.word	.LANCHOR20
 2215 00f4 00000000 		.word	.LANCHOR19
 2216 00f8 04ED00E0 		.word	-536810236
ARM GAS  /tmp/ccLSYPfk.s 			page 132


 2217              		.cfi_endproc
 2218              	.LFE155:
 2220              		.section	.text.vTaskDelay,"ax",%progbits
 2221              		.align	2
 2222              		.global	vTaskDelay
 2223              		.thumb
 2224              		.thumb_func
 2226              	vTaskDelay:
 2227              	.LFB144:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2228              		.loc 1 1226 0
 2229              		.cfi_startproc
 2230              		@ args = 0, pretend = 0, frame = 0
 2231              		@ frame_needed = 0, uses_anonymous_args = 0
 2232              	.LVL185:
 2233 0000 10B5     		push	{r4, lr}
 2234              	.LCFI21:
 2235              		.cfi_def_cfa_offset 8
 2236              		.cfi_offset 4, -8
 2237              		.cfi_offset 14, -4
 2238              	.LVL186:
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2239              		.loc 1 1230 0
 2240 0002 B8B1     		cbz	r0, .L196
 2241 0004 0446     		mov	r4, r0
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2242              		.loc 1 1232 0
 2243 0006 114B     		ldr	r3, .L198
 2244 0008 1B68     		ldr	r3, [r3]
 2245 000a 53B1     		cbz	r3, .L193
 2246              	.LBB126:
 2247              	.LBB127:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2248              		.loc 2 237 0
 2249              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2250 000c 4FF05003 			mov r3, #80												
 2251 0010 72B6     		cpsid i													
 2252 0012 83F31188 		msr basepri, r3											
 2253 0016 BFF36F8F 		isb														
 2254 001a BFF34F8F 		dsb														
 2255 001e 62B6     		cpsie i													
 2256              	
 2257              	@ 0 "" 2
 2258              	.LVL187:
 2259              		.thumb
 2260              	.L194:
 2261              	.LBE127:
 2262              	.LBE126:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2263              		.loc 1 1232 0 discriminator 1
 2264 0020 FEE7     		b	.L194
 2265              	.L193:
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2266              		.loc 1 1233 0
 2267 0022 FFF7FEFF 		bl	vTaskSuspendAll
 2268              	.LVL188:
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccLSYPfk.s 			page 133


 2269              		.loc 1 1244 0
 2270 0026 2046     		mov	r0, r4
 2271 0028 0021     		movs	r1, #0
 2272 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2273              	.LVL189:
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2274              		.loc 1 1246 0
 2275 002e FFF7FEFF 		bl	xTaskResumeAll
 2276              	.LVL190:
 2277 0032 00E0     		b	.L192
 2278              	.LVL191:
 2279              	.L196:
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2280              		.loc 1 1227 0
 2281 0034 0020     		movs	r0, #0
 2282              	.LVL192:
 2283              	.L192:
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2284              		.loc 1 1255 0
 2285 0036 38B9     		cbnz	r0, .L191
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2286              		.loc 1 1257 0
 2287 0038 4FF08052 		mov	r2, #268435456
 2288 003c 044B     		ldr	r3, .L198+4
 2289 003e 1A60     		str	r2, [r3]
 2290              	@ 1257 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2291 0040 BFF34F8F 		dsb
 2292              	@ 0 "" 2
 2293              	@ 1257 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2294 0044 BFF36F8F 		isb
 2295              	@ 0 "" 2
 2296              		.thumb
 2297              	.L191:
 2298 0048 10BD     		pop	{r4, pc}
 2299              	.L199:
 2300 004a 00BF     		.align	2
 2301              	.L198:
 2302 004c 00000000 		.word	.LANCHOR16
 2303 0050 04ED00E0 		.word	-536810236
 2304              		.cfi_endproc
 2305              	.LFE144:
 2307              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2308              		.align	2
 2309              		.thumb
 2310              		.thumb_func
 2312              	prvCheckTasksWaitingTermination:
 2313              	.LFB171:
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2314              		.loc 1 3367 0
 2315              		.cfi_startproc
 2316              		@ args = 0, pretend = 0, frame = 0
 2317              		@ frame_needed = 0, uses_anonymous_args = 0
 2318 0000 10B5     		push	{r4, lr}
 2319              	.LCFI22:
 2320              		.cfi_def_cfa_offset 8
 2321              		.cfi_offset 4, -8
 2322              		.cfi_offset 14, -4
ARM GAS  /tmp/ccLSYPfk.s 			page 134


 2323              	.LBB128:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2324              		.loc 1 3377 0
 2325 0002 1BE0     		b	.L202
 2326              	.L203:
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2327              		.loc 1 3379 0
 2328 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2329              	.LVL193:
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2330              		.loc 1 3381 0
 2331 0008 0F4B     		ldr	r3, .L205
 2332 000a 1C68     		ldr	r4, [r3]
 2333              	.LVL194:
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2334              		.loc 1 3383 0
 2335 000c FFF7FEFF 		bl	xTaskResumeAll
 2336              	.LVL195:
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2337              		.loc 1 3385 0
 2338 0010 A4B1     		cbz	r4, .L202
 2339              	.LBB129:
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2340              		.loc 1 3389 0
 2341 0012 FFF7FEFF 		bl	vPortEnterCritical
 2342              	.LVL196:
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2343              		.loc 1 3391 0
 2344 0016 0C4B     		ldr	r3, .L205
 2345 0018 DB68     		ldr	r3, [r3, #12]
 2346 001a DC68     		ldr	r4, [r3, #12]
 2347              	.LVL197:
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2348              		.loc 1 3392 0
 2349 001c 201D     		adds	r0, r4, #4
 2350 001e FFF7FEFF 		bl	uxListRemove
 2351              	.LVL198:
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2352              		.loc 1 3393 0
 2353 0022 0A4A     		ldr	r2, .L205+4
 2354 0024 1368     		ldr	r3, [r2]
 2355 0026 013B     		subs	r3, r3, #1
 2356 0028 1360     		str	r3, [r2]
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2357              		.loc 1 3394 0
 2358 002a 094A     		ldr	r2, .L205+8
 2359 002c 1368     		ldr	r3, [r2]
 2360 002e 013B     		subs	r3, r3, #1
 2361 0030 1360     		str	r3, [r2]
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2362              		.loc 1 3396 0
 2363 0032 FFF7FEFF 		bl	vPortExitCritical
 2364              	.LVL199:
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2365              		.loc 1 3398 0
 2366 0036 2046     		mov	r0, r4
 2367 0038 FFF7FEFF 		bl	prvDeleteTCB
ARM GAS  /tmp/ccLSYPfk.s 			page 135


 2368              	.LVL200:
 2369              	.L202:
 2370              	.LBE129:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2371              		.loc 1 3377 0
 2372 003c 044B     		ldr	r3, .L205+8
 2373 003e 1B68     		ldr	r3, [r3]
 2374 0040 002B     		cmp	r3, #0
 2375 0042 DFD1     		bne	.L203
 2376              	.LBE128:
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2377              		.loc 1 3407 0
 2378 0044 10BD     		pop	{r4, pc}
 2379              	.L206:
 2380 0046 00BF     		.align	2
 2381              	.L205:
 2382 0048 00000000 		.word	.LANCHOR7
 2383 004c 00000000 		.word	.LANCHOR9
 2384 0050 00000000 		.word	.LANCHOR15
 2385              		.cfi_endproc
 2386              	.LFE171:
 2388              		.section	.text.prvIdleTask,"ax",%progbits
 2389              		.align	2
 2390              		.thumb
 2391              		.thumb_func
 2393              	prvIdleTask:
 2394              	.LFB169:
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 2395              		.loc 1 3133 0
 2396              		.cfi_startproc
 2397              		@ Volatile: function does not return.
 2398              		@ args = 0, pretend = 0, frame = 0
 2399              		@ frame_needed = 0, uses_anonymous_args = 0
 2400              	.LVL201:
 2401 0000 08B5     		push	{r3, lr}
 2402              	.LCFI23:
 2403              		.cfi_def_cfa_offset 8
 2404              		.cfi_offset 3, -8
 2405              		.cfi_offset 14, -4
 2406              	.LVL202:
 2407              	.L208:
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2408              		.loc 1 3144 0
 2409 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2410              	.LVL203:
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2411              		.loc 1 3167 0
 2412 0006 064B     		ldr	r3, .L211
 2413 0008 1B68     		ldr	r3, [r3]
 2414 000a 012B     		cmp	r3, #1
 2415 000c F9D9     		bls	.L208
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2416              		.loc 1 3169 0
 2417 000e 4FF08052 		mov	r2, #268435456
 2418 0012 044B     		ldr	r3, .L211+4
 2419 0014 1A60     		str	r2, [r3]
 2420              	@ 3169 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  /tmp/ccLSYPfk.s 			page 136


 2421 0016 BFF34F8F 		dsb
 2422              	@ 0 "" 2
 2423              	@ 3169 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2424 001a BFF36F8F 		isb
 2425              	@ 0 "" 2
 2426              		.thumb
 2427 001e F0E7     		b	.L208
 2428              	.L212:
 2429              		.align	2
 2430              	.L211:
 2431 0020 00000000 		.word	.LANCHOR4
 2432 0024 04ED00E0 		.word	-536810236
 2433              		.cfi_endproc
 2434              	.LFE169:
 2436              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2437              		.align	2
 2438              		.global	vTaskSwitchContext
 2439              		.thumb
 2440              		.thumb_func
 2442              	vTaskSwitchContext:
 2443              	.LFB161:
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2444              		.loc 1 2763 0
 2445              		.cfi_startproc
 2446              		@ args = 0, pretend = 0, frame = 0
 2447              		@ frame_needed = 0, uses_anonymous_args = 0
 2448              		@ link register save eliminated.
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2449              		.loc 1 2764 0
 2450 0000 214B     		ldr	r3, .L220
 2451 0002 1B68     		ldr	r3, [r3]
 2452 0004 1BB1     		cbz	r3, .L214
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2453              		.loc 1 2768 0
 2454 0006 0122     		movs	r2, #1
 2455 0008 204B     		ldr	r3, .L220+4
 2456 000a 1A60     		str	r2, [r3]
 2457 000c 7047     		bx	lr
 2458              	.L214:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2459              		.loc 1 2772 0
 2460 000e 0022     		movs	r2, #0
 2461 0010 1E4B     		ldr	r3, .L220+4
 2462 0012 1A60     		str	r2, [r3]
 2463              	.LBB130:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2464              		.loc 1 2807 0
 2465 0014 1E4B     		ldr	r3, .L220+8
 2466 0016 1B68     		ldr	r3, [r3]
 2467              	.LVL204:
 2468              	.LBB131:
 2469              	.LBB132:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 2470              		.loc 2 176 0
 2471              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2472 0018 B3FA83F3 		clz r3, r3
 2473              	@ 0 "" 2
ARM GAS  /tmp/ccLSYPfk.s 			page 137


 2474              	.LVL205:
 2475              		.thumb
 2476 001c DBB2     		uxtb	r3, r3
 2477              	.LVL206:
 2478              	.LBE132:
 2479              	.LBE131:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2480              		.loc 1 2807 0
 2481 001e C3F11F03 		rsb	r3, r3, #31
 2482              	.LVL207:
 2483 0022 03EB8302 		add	r2, r3, r3, lsl #2
 2484 0026 9200     		lsls	r2, r2, #2
 2485 0028 1A49     		ldr	r1, .L220+12
 2486 002a 8A58     		ldr	r2, [r1, r2]
 2487 002c 52B9     		cbnz	r2, .L216
 2488              	.LBB133:
 2489              	.LBB134:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2490              		.loc 2 237 0
 2491              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2492 002e 4FF05003 			mov r3, #80												
 2493 0032 72B6     		cpsid i													
 2494 0034 83F31188 		msr basepri, r3											
 2495 0038 BFF36F8F 		isb														
 2496 003c BFF34F8F 		dsb														
 2497 0040 62B6     		cpsie i													
 2498              	
 2499              	@ 0 "" 2
 2500              	.LVL208:
 2501              		.thumb
 2502              	.L217:
 2503              	.LBE134:
 2504              	.LBE133:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2505              		.loc 1 2807 0 discriminator 1
 2506 0042 FEE7     		b	.L217
 2507              	.LVL209:
 2508              	.L216:
 2509              	.LBE130:
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2510              		.loc 1 2763 0 discriminator 2
 2511 0044 10B4     		push	{r4}
 2512              	.LCFI24:
 2513              		.cfi_def_cfa_offset 4
 2514              		.cfi_offset 4, -4
 2515              	.LVL210:
 2516              	.LBB136:
 2517              	.LBB135:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2518              		.loc 1 2807 0 discriminator 2
 2519 0046 134C     		ldr	r4, .L220+12
 2520 0048 9A00     		lsls	r2, r3, #2
 2521 004a D118     		adds	r1, r2, r3
 2522 004c 8900     		lsls	r1, r1, #2
 2523 004e 2144     		add	r1, r1, r4
 2524 0050 4868     		ldr	r0, [r1, #4]
 2525 0052 4068     		ldr	r0, [r0, #4]
ARM GAS  /tmp/ccLSYPfk.s 			page 138


 2526 0054 4860     		str	r0, [r1, #4]
 2527 0056 1A44     		add	r2, r2, r3
 2528 0058 9200     		lsls	r2, r2, #2
 2529 005a 0832     		adds	r2, r2, #8
 2530 005c 2244     		add	r2, r2, r4
 2531 005e 9042     		cmp	r0, r2
 2532 0060 05D1     		bne	.L218
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2533              		.loc 1 2807 0 is_stmt 0 discriminator 3
 2534 0062 4168     		ldr	r1, [r0, #4]
 2535 0064 03EB8302 		add	r2, r3, r3, lsl #2
 2536 0068 9200     		lsls	r2, r2, #2
 2537 006a 2244     		add	r2, r2, r4
 2538 006c 5160     		str	r1, [r2, #4]
 2539              	.L218:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2540              		.loc 1 2807 0 discriminator 5
 2541 006e 03EB8303 		add	r3, r3, r3, lsl #2
 2542              	.LVL211:
 2543 0072 9B00     		lsls	r3, r3, #2
 2544 0074 074A     		ldr	r2, .L220+12
 2545 0076 1344     		add	r3, r3, r2
 2546 0078 5B68     		ldr	r3, [r3, #4]
 2547 007a DA68     		ldr	r2, [r3, #12]
 2548 007c 064B     		ldr	r3, .L220+16
 2549 007e 1A60     		str	r2, [r3]
 2550              	.LBE135:
 2551              	.LBE136:
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2552              		.loc 1 2818 0 is_stmt 1 discriminator 5
 2553 0080 5DF8044B 		ldr	r4, [sp], #4
 2554              	.LCFI25:
 2555              		.cfi_restore 4
 2556              		.cfi_def_cfa_offset 0
 2557 0084 7047     		bx	lr
 2558              	.L221:
 2559 0086 00BF     		.align	2
 2560              	.L220:
 2561 0088 00000000 		.word	.LANCHOR16
 2562 008c 00000000 		.word	.LANCHOR20
 2563 0090 00000000 		.word	.LANCHOR13
 2564 0094 00000000 		.word	.LANCHOR4
 2565 0098 00000000 		.word	.LANCHOR10
 2566              		.cfi_endproc
 2567              	.LFE161:
 2569              		.section	.text.vTaskSuspend,"ax",%progbits
 2570              		.align	2
 2571              		.global	vTaskSuspend
 2572              		.thumb
 2573              		.thumb_func
 2575              	vTaskSuspend:
 2576              	.LFB148:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2577              		.loc 1 1568 0
 2578              		.cfi_startproc
 2579              		@ args = 0, pretend = 0, frame = 0
 2580              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccLSYPfk.s 			page 139


 2581              	.LVL212:
 2582 0000 38B5     		push	{r3, r4, r5, lr}
 2583              	.LCFI26:
 2584              		.cfi_def_cfa_offset 16
 2585              		.cfi_offset 3, -16
 2586              		.cfi_offset 4, -12
 2587              		.cfi_offset 5, -8
 2588              		.cfi_offset 14, -4
 2589 0002 0446     		mov	r4, r0
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2590              		.loc 1 1571 0
 2591 0004 FFF7FEFF 		bl	vPortEnterCritical
 2592              	.LVL213:
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2593              		.loc 1 1575 0
 2594 0008 0CB9     		cbnz	r4, .L223
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2595              		.loc 1 1575 0 is_stmt 0 discriminator 1
 2596 000a 2B4B     		ldr	r3, .L233
 2597 000c 1C68     		ldr	r4, [r3]
 2598              	.LVL214:
 2599              	.L223:
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2600              		.loc 1 1581 0 is_stmt 1 discriminator 4
 2601 000e 251D     		adds	r5, r4, #4
 2602 0010 2846     		mov	r0, r5
 2603 0012 FFF7FEFF 		bl	uxListRemove
 2604              	.LVL215:
 2605 0016 70B9     		cbnz	r0, .L224
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2606              		.loc 1 1583 0
 2607 0018 E26A     		ldr	r2, [r4, #44]
 2608 001a 02EB8203 		add	r3, r2, r2, lsl #2
 2609 001e 9B00     		lsls	r3, r3, #2
 2610 0020 2649     		ldr	r1, .L233+4
 2611 0022 CB58     		ldr	r3, [r1, r3]
 2612 0024 3BB9     		cbnz	r3, .L224
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2613              		.loc 1 1583 0 is_stmt 0 discriminator 1
 2614 0026 0123     		movs	r3, #1
 2615 0028 03FA02F2 		lsl	r2, r3, r2
 2616 002c 2449     		ldr	r1, .L233+8
 2617 002e 0B68     		ldr	r3, [r1]
 2618 0030 23EA0203 		bic	r3, r3, r2
 2619 0034 0B60     		str	r3, [r1]
 2620              	.L224:
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2621              		.loc 1 1591 0 is_stmt 1
 2622 0036 A36A     		ldr	r3, [r4, #40]
 2623 0038 1BB1     		cbz	r3, .L225
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2624              		.loc 1 1593 0
 2625 003a 04F11800 		add	r0, r4, #24
 2626 003e FFF7FEFF 		bl	uxListRemove
 2627              	.LVL216:
 2628              	.L225:
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccLSYPfk.s 			page 140


 2629              		.loc 1 1600 0
 2630 0042 2048     		ldr	r0, .L233+12
 2631 0044 2946     		mov	r1, r5
 2632 0046 FFF7FEFF 		bl	vListInsertEnd
 2633              	.LVL217:
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2634              		.loc 1 1602 0
 2635 004a FFF7FEFF 		bl	vPortExitCritical
 2636              	.LVL218:
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2637              		.loc 1 1604 0
 2638 004e 1E4B     		ldr	r3, .L233+16
 2639 0050 1B68     		ldr	r3, [r3]
 2640 0052 2BB1     		cbz	r3, .L226
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2641              		.loc 1 1608 0
 2642 0054 FFF7FEFF 		bl	vPortEnterCritical
 2643              	.LVL219:
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2644              		.loc 1 1610 0
 2645 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2646              	.LVL220:
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2647              		.loc 1 1612 0
 2648 005c FFF7FEFF 		bl	vPortExitCritical
 2649              	.LVL221:
 2650              	.L226:
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2651              		.loc 1 1619 0
 2652 0060 154B     		ldr	r3, .L233
 2653 0062 1B68     		ldr	r3, [r3]
 2654 0064 9C42     		cmp	r4, r3
 2655 0066 25D1     		bne	.L222
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2656              		.loc 1 1621 0
 2657 0068 174B     		ldr	r3, .L233+16
 2658 006a 1B68     		ldr	r3, [r3]
 2659 006c B3B1     		cbz	r3, .L228
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2660              		.loc 1 1624 0
 2661 006e 174B     		ldr	r3, .L233+20
 2662 0070 1B68     		ldr	r3, [r3]
 2663 0072 53B1     		cbz	r3, .L229
 2664              	.LBB137:
 2665              	.LBB138:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2666              		.loc 2 237 0
 2667              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2668 0074 4FF05003 			mov r3, #80												
 2669 0078 72B6     		cpsid i													
 2670 007a 83F31188 		msr basepri, r3											
 2671 007e BFF36F8F 		isb														
 2672 0082 BFF34F8F 		dsb														
 2673 0086 62B6     		cpsie i													
 2674              	
 2675              	@ 0 "" 2
 2676              	.LVL222:
ARM GAS  /tmp/ccLSYPfk.s 			page 141


 2677              		.thumb
 2678              	.L230:
 2679              	.LBE138:
 2680              	.LBE137:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2681              		.loc 1 1624 0 discriminator 1
 2682 0088 FEE7     		b	.L230
 2683              	.L229:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2684              		.loc 1 1625 0
 2685 008a 4FF08052 		mov	r2, #268435456
 2686 008e 104B     		ldr	r3, .L233+24
 2687 0090 1A60     		str	r2, [r3]
 2688              	@ 1625 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2689 0092 BFF34F8F 		dsb
 2690              	@ 0 "" 2
 2691              	@ 1625 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2692 0096 BFF36F8F 		isb
 2693              	@ 0 "" 2
 2694              		.thumb
 2695 009a 38BD     		pop	{r3, r4, r5, pc}
 2696              	.LVL223:
 2697              	.L228:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2698              		.loc 1 1632 0
 2699 009c 094B     		ldr	r3, .L233+12
 2700 009e 1A68     		ldr	r2, [r3]
 2701 00a0 0C4B     		ldr	r3, .L233+28
 2702 00a2 1B68     		ldr	r3, [r3]
 2703 00a4 9A42     		cmp	r2, r3
 2704 00a6 03D1     		bne	.L231
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2705              		.loc 1 1638 0
 2706 00a8 0022     		movs	r2, #0
 2707 00aa 034B     		ldr	r3, .L233
 2708 00ac 1A60     		str	r2, [r3]
 2709 00ae 38BD     		pop	{r3, r4, r5, pc}
 2710              	.LVL224:
 2711              	.L231:
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2712              		.loc 1 1642 0
 2713 00b0 FFF7FEFF 		bl	vTaskSwitchContext
 2714              	.LVL225:
 2715              	.L222:
 2716 00b4 38BD     		pop	{r3, r4, r5, pc}
 2717              	.LVL226:
 2718              	.L234:
 2719 00b6 00BF     		.align	2
 2720              	.L233:
 2721 00b8 00000000 		.word	.LANCHOR10
 2722 00bc 00000000 		.word	.LANCHOR4
 2723 00c0 00000000 		.word	.LANCHOR13
 2724 00c4 00000000 		.word	.LANCHOR0
 2725 00c8 00000000 		.word	.LANCHOR11
 2726 00cc 00000000 		.word	.LANCHOR16
 2727 00d0 04ED00E0 		.word	-536810236
 2728 00d4 00000000 		.word	.LANCHOR9
ARM GAS  /tmp/ccLSYPfk.s 			page 142


 2729              		.cfi_endproc
 2730              	.LFE148:
 2732              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2733              		.align	2
 2734              		.global	vTaskPlaceOnEventList
 2735              		.thumb
 2736              		.thumb_func
 2738              	vTaskPlaceOnEventList:
 2739              	.LFB162:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2740              		.loc 1 2822 0
 2741              		.cfi_startproc
 2742              		@ args = 0, pretend = 0, frame = 0
 2743              		@ frame_needed = 0, uses_anonymous_args = 0
 2744              	.LVL227:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2745              		.loc 1 2823 0
 2746 0000 50B9     		cbnz	r0, .L236
 2747              	.LBB139:
 2748              	.LBB140:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2749              		.loc 2 237 0
 2750              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2751 0002 4FF05003 			mov r3, #80												
 2752 0006 72B6     		cpsid i													
 2753 0008 83F31188 		msr basepri, r3											
 2754 000c BFF36F8F 		isb														
 2755 0010 BFF34F8F 		dsb														
 2756 0014 62B6     		cpsie i													
 2757              	
 2758              	@ 0 "" 2
 2759              	.LVL228:
 2760              		.thumb
 2761              	.L237:
 2762              	.LBE140:
 2763              	.LBE139:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2764              		.loc 1 2823 0 discriminator 1
 2765 0016 FEE7     		b	.L237
 2766              	.L236:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2767              		.loc 1 2822 0
 2768 0018 10B5     		push	{r4, lr}
 2769              	.LCFI27:
 2770              		.cfi_def_cfa_offset 8
 2771              		.cfi_offset 4, -8
 2772              		.cfi_offset 14, -4
 2773 001a 0C46     		mov	r4, r1
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2774              		.loc 1 2832 0
 2775 001c 044B     		ldr	r3, .L239
 2776 001e 1968     		ldr	r1, [r3]
 2777              	.LVL229:
 2778 0020 1831     		adds	r1, r1, #24
 2779 0022 FFF7FEFF 		bl	vListInsert
 2780              	.LVL230:
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccLSYPfk.s 			page 143


 2781              		.loc 1 2834 0
 2782 0026 2046     		mov	r0, r4
 2783 0028 0121     		movs	r1, #1
 2784 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2785              	.LVL231:
 2786 002e 10BD     		pop	{r4, pc}
 2787              	.LVL232:
 2788              	.L240:
 2789              		.align	2
 2790              	.L239:
 2791 0030 00000000 		.word	.LANCHOR10
 2792              		.cfi_endproc
 2793              	.LFE162:
 2795              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2796              		.align	2
 2797              		.global	vTaskPlaceOnUnorderedEventList
 2798              		.thumb
 2799              		.thumb_func
 2801              	vTaskPlaceOnUnorderedEventList:
 2802              	.LFB163:
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2803              		.loc 1 2839 0
 2804              		.cfi_startproc
 2805              		@ args = 0, pretend = 0, frame = 0
 2806              		@ frame_needed = 0, uses_anonymous_args = 0
 2807              	.LVL233:
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2808              		.loc 1 2840 0
 2809 0000 50B9     		cbnz	r0, .L242
 2810              	.LBB141:
 2811              	.LBB142:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2812              		.loc 2 237 0
 2813              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2814 0002 4FF05003 			mov r3, #80												
 2815 0006 72B6     		cpsid i													
 2816 0008 83F31188 		msr basepri, r3											
 2817 000c BFF36F8F 		isb														
 2818 0010 BFF34F8F 		dsb														
 2819 0014 62B6     		cpsie i													
 2820              	
 2821              	@ 0 "" 2
 2822              	.LVL234:
 2823              		.thumb
 2824              	.L243:
 2825              	.LBE142:
 2826              	.LBE141:
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2827              		.loc 1 2840 0 discriminator 1
 2828 0016 FEE7     		b	.L243
 2829              	.L242:
 2830 0018 0346     		mov	r3, r0
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2831              		.loc 1 2844 0
 2832 001a 1048     		ldr	r0, .L247
 2833              	.LVL235:
 2834 001c 0068     		ldr	r0, [r0]
ARM GAS  /tmp/ccLSYPfk.s 			page 144


 2835 001e 50B9     		cbnz	r0, .L244
 2836              	.LBB143:
 2837              	.LBB144:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2838              		.loc 2 237 0
 2839              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2840 0020 4FF05003 			mov r3, #80												
 2841 0024 72B6     		cpsid i													
 2842 0026 83F31188 		msr basepri, r3											
 2843 002a BFF36F8F 		isb														
 2844 002e BFF34F8F 		dsb														
 2845 0032 62B6     		cpsie i													
 2846              	
 2847              	@ 0 "" 2
 2848              	.LVL236:
 2849              		.thumb
 2850              	.L245:
 2851              	.LBE144:
 2852              	.LBE143:
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2853              		.loc 1 2844 0 discriminator 2
 2854 0034 FEE7     		b	.L245
 2855              	.LVL237:
 2856              	.L244:
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2857              		.loc 1 2839 0
 2858 0036 10B5     		push	{r4, lr}
 2859              	.LCFI28:
 2860              		.cfi_def_cfa_offset 8
 2861              		.cfi_offset 4, -8
 2862              		.cfi_offset 14, -4
 2863 0038 1846     		mov	r0, r3
 2864 003a 1446     		mov	r4, r2
 2865 003c 0B46     		mov	r3, r1
 2866              	.LVL238:
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2867              		.loc 1 2849 0
 2868 003e 084A     		ldr	r2, .L247+4
 2869              	.LVL239:
 2870 0040 1168     		ldr	r1, [r2]
 2871              	.LVL240:
 2872 0042 43F00043 		orr	r3, r3, #-2147483648
 2873              	.LVL241:
 2874 0046 8B61     		str	r3, [r1, #24]
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2875              		.loc 1 2856 0
 2876 0048 1168     		ldr	r1, [r2]
 2877 004a 1831     		adds	r1, r1, #24
 2878 004c FFF7FEFF 		bl	vListInsertEnd
 2879              	.LVL242:
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2880              		.loc 1 2858 0
 2881 0050 2046     		mov	r0, r4
 2882 0052 0121     		movs	r1, #1
 2883 0054 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2884              	.LVL243:
 2885 0058 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccLSYPfk.s 			page 145


 2886              	.LVL244:
 2887              	.L248:
 2888 005a 00BF     		.align	2
 2889              	.L247:
 2890 005c 00000000 		.word	.LANCHOR16
 2891 0060 00000000 		.word	.LANCHOR10
 2892              		.cfi_endproc
 2893              	.LFE163:
 2895              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2896              		.align	2
 2897              		.global	xTaskRemoveFromEventList
 2898              		.thumb
 2899              		.thumb_func
 2901              	xTaskRemoveFromEventList:
 2902              	.LFB164:
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2903              		.loc 1 2896 0
 2904              		.cfi_startproc
 2905              		@ args = 0, pretend = 0, frame = 0
 2906              		@ frame_needed = 0, uses_anonymous_args = 0
 2907              	.LVL245:
 2908 0000 38B5     		push	{r3, r4, r5, lr}
 2909              	.LCFI29:
 2910              		.cfi_def_cfa_offset 16
 2911              		.cfi_offset 3, -16
 2912              		.cfi_offset 4, -12
 2913              		.cfi_offset 5, -8
 2914              		.cfi_offset 14, -4
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2915              		.loc 1 2913 0
 2916 0002 C368     		ldr	r3, [r0, #12]
 2917 0004 DC68     		ldr	r4, [r3, #12]
 2918              	.LVL246:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2919              		.loc 1 2914 0
 2920 0006 54B9     		cbnz	r4, .L250
 2921              	.LBB145:
 2922              	.LBB146:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2923              		.loc 2 237 0
 2924              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2925 0008 4FF05003 			mov r3, #80												
 2926 000c 72B6     		cpsid i													
 2927 000e 83F31188 		msr basepri, r3											
 2928 0012 BFF36F8F 		isb														
 2929 0016 BFF34F8F 		dsb														
 2930 001a 62B6     		cpsie i													
 2931              	
 2932              	@ 0 "" 2
 2933              	.LVL247:
 2934              		.thumb
 2935              	.L251:
 2936              	.LBE146:
 2937              	.LBE145:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2938              		.loc 1 2914 0 discriminator 1
 2939 001c FEE7     		b	.L251
ARM GAS  /tmp/ccLSYPfk.s 			page 146


 2940              	.L250:
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2941              		.loc 1 2915 0
 2942 001e 04F11805 		add	r5, r4, #24
 2943 0022 2846     		mov	r0, r5
 2944              	.LVL248:
 2945 0024 FFF7FEFF 		bl	uxListRemove
 2946              	.LVL249:
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2947              		.loc 1 2917 0
 2948 0028 134B     		ldr	r3, .L257
 2949 002a 1B68     		ldr	r3, [r3]
 2950 002c A3B9     		cbnz	r3, .L252
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2951              		.loc 1 2919 0
 2952 002e 251D     		adds	r5, r4, #4
 2953 0030 2846     		mov	r0, r5
 2954 0032 FFF7FEFF 		bl	uxListRemove
 2955              	.LVL250:
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2956              		.loc 1 2920 0
 2957 0036 E36A     		ldr	r3, [r4, #44]
 2958 0038 0122     		movs	r2, #1
 2959 003a 02FA03F1 		lsl	r1, r2, r3
 2960 003e 0F48     		ldr	r0, .L257+4
 2961 0040 0268     		ldr	r2, [r0]
 2962 0042 0A43     		orrs	r2, r2, r1
 2963 0044 0260     		str	r2, [r0]
 2964 0046 03EB8303 		add	r3, r3, r3, lsl #2
 2965 004a 9B00     		lsls	r3, r3, #2
 2966 004c 0C48     		ldr	r0, .L257+8
 2967 004e 1844     		add	r0, r0, r3
 2968 0050 2946     		mov	r1, r5
 2969 0052 FFF7FEFF 		bl	vListInsertEnd
 2970              	.LVL251:
 2971 0056 03E0     		b	.L253
 2972              	.L252:
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2973              		.loc 1 2926 0
 2974 0058 0A48     		ldr	r0, .L257+12
 2975 005a 2946     		mov	r1, r5
 2976 005c FFF7FEFF 		bl	vListInsertEnd
 2977              	.LVL252:
 2978              	.L253:
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2979              		.loc 1 2929 0
 2980 0060 E26A     		ldr	r2, [r4, #44]
 2981 0062 094B     		ldr	r3, .L257+16
 2982 0064 1B68     		ldr	r3, [r3]
 2983 0066 DB6A     		ldr	r3, [r3, #44]
 2984 0068 9A42     		cmp	r2, r3
 2985 006a 03D9     		bls	.L255
 2986              	.LVL253:
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2987              		.loc 1 2938 0
 2988 006c 0120     		movs	r0, #1
 2989 006e 074B     		ldr	r3, .L257+20
ARM GAS  /tmp/ccLSYPfk.s 			page 147


 2990 0070 1860     		str	r0, [r3]
 2991 0072 38BD     		pop	{r3, r4, r5, pc}
 2992              	.LVL254:
 2993              	.L255:
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2994              		.loc 1 2942 0
 2995 0074 0020     		movs	r0, #0
 2996              	.LVL255:
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2997              		.loc 1 2960 0
 2998 0076 38BD     		pop	{r3, r4, r5, pc}
 2999              	.LVL256:
 3000              	.L258:
 3001              		.align	2
 3002              	.L257:
 3003 0078 00000000 		.word	.LANCHOR16
 3004 007c 00000000 		.word	.LANCHOR13
 3005 0080 00000000 		.word	.LANCHOR4
 3006 0084 00000000 		.word	.LANCHOR1
 3007 0088 00000000 		.word	.LANCHOR10
 3008 008c 00000000 		.word	.LANCHOR20
 3009              		.cfi_endproc
 3010              	.LFE164:
 3012              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3013              		.align	2
 3014              		.global	xTaskRemoveFromUnorderedEventList
 3015              		.thumb
 3016              		.thumb_func
 3018              	xTaskRemoveFromUnorderedEventList:
 3019              	.LFB165:
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3020              		.loc 1 2964 0
 3021              		.cfi_startproc
 3022              		@ args = 0, pretend = 0, frame = 0
 3023              		@ frame_needed = 0, uses_anonymous_args = 0
 3024              	.LVL257:
 3025 0000 38B5     		push	{r3, r4, r5, lr}
 3026              	.LCFI30:
 3027              		.cfi_def_cfa_offset 16
 3028              		.cfi_offset 3, -16
 3029              		.cfi_offset 4, -12
 3030              		.cfi_offset 5, -8
 3031              		.cfi_offset 14, -4
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3032              		.loc 1 2970 0
 3033 0002 204B     		ldr	r3, .L267
 3034 0004 1B68     		ldr	r3, [r3]
 3035 0006 53B9     		cbnz	r3, .L260
 3036              	.LBB147:
 3037              	.LBB148:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3038              		.loc 2 237 0
 3039              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3040 0008 4FF05003 			mov r3, #80												
 3041 000c 72B6     		cpsid i													
 3042 000e 83F31188 		msr basepri, r3											
 3043 0012 BFF36F8F 		isb														
ARM GAS  /tmp/ccLSYPfk.s 			page 148


 3044 0016 BFF34F8F 		dsb														
 3045 001a 62B6     		cpsie i													
 3046              	
 3047              	@ 0 "" 2
 3048              	.LVL258:
 3049              		.thumb
 3050              	.L261:
 3051              	.LBE148:
 3052              	.LBE147:
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3053              		.loc 1 2970 0 discriminator 1
 3054 001c FEE7     		b	.L261
 3055              	.L260:
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3056              		.loc 1 2973 0
 3057 001e 41F00043 		orr	r3, r1, #-2147483648
 3058 0022 0360     		str	r3, [r0]
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3059              		.loc 1 2977 0
 3060 0024 C468     		ldr	r4, [r0, #12]
 3061              	.LVL259:
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3062              		.loc 1 2978 0
 3063 0026 54B9     		cbnz	r4, .L262
 3064              	.LBB149:
 3065              	.LBB150:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3066              		.loc 2 237 0
 3067              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3068 0028 4FF05003 			mov r3, #80												
 3069 002c 72B6     		cpsid i													
 3070 002e 83F31188 		msr basepri, r3											
 3071 0032 BFF36F8F 		isb														
 3072 0036 BFF34F8F 		dsb														
 3073 003a 62B6     		cpsie i													
 3074              	
 3075              	@ 0 "" 2
 3076              	.LVL260:
 3077              		.thumb
 3078              	.L263:
 3079              	.LBE150:
 3080              	.LBE149:
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3081              		.loc 1 2978 0 discriminator 2
 3082 003c FEE7     		b	.L263
 3083              	.L262:
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3084              		.loc 1 2979 0
 3085 003e FFF7FEFF 		bl	uxListRemove
 3086              	.LVL261:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3087              		.loc 1 2984 0
 3088 0042 251D     		adds	r5, r4, #4
 3089 0044 2846     		mov	r0, r5
 3090 0046 FFF7FEFF 		bl	uxListRemove
 3091              	.LVL262:
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 149


 3092              		.loc 1 2985 0
 3093 004a E36A     		ldr	r3, [r4, #44]
 3094 004c 0122     		movs	r2, #1
 3095 004e 02FA03F1 		lsl	r1, r2, r3
 3096 0052 0D48     		ldr	r0, .L267+4
 3097 0054 0268     		ldr	r2, [r0]
 3098 0056 0A43     		orrs	r2, r2, r1
 3099 0058 0260     		str	r2, [r0]
 3100 005a 03EB8303 		add	r3, r3, r3, lsl #2
 3101 005e 9B00     		lsls	r3, r3, #2
 3102 0060 0A48     		ldr	r0, .L267+8
 3103 0062 1844     		add	r0, r0, r3
 3104 0064 2946     		mov	r1, r5
 3105 0066 FFF7FEFF 		bl	vListInsertEnd
 3106              	.LVL263:
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3107              		.loc 1 2987 0
 3108 006a E26A     		ldr	r2, [r4, #44]
 3109 006c 084B     		ldr	r3, .L267+12
 3110 006e 1B68     		ldr	r3, [r3]
 3111 0070 DB6A     		ldr	r3, [r3, #44]
 3112 0072 9A42     		cmp	r2, r3
 3113 0074 03D9     		bls	.L265
 3114              	.LVL264:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3115              		.loc 1 2997 0
 3116 0076 0120     		movs	r0, #1
 3117 0078 064B     		ldr	r3, .L267+16
 3118 007a 1860     		str	r0, [r3]
 3119 007c 38BD     		pop	{r3, r4, r5, pc}
 3120              	.LVL265:
 3121              	.L265:
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3122              		.loc 1 3001 0
 3123 007e 0020     		movs	r0, #0
 3124              	.LVL266:
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3125              		.loc 1 3005 0
 3126 0080 38BD     		pop	{r3, r4, r5, pc}
 3127              	.LVL267:
 3128              	.L268:
 3129 0082 00BF     		.align	2
 3130              	.L267:
 3131 0084 00000000 		.word	.LANCHOR16
 3132 0088 00000000 		.word	.LANCHOR13
 3133 008c 00000000 		.word	.LANCHOR4
 3134 0090 00000000 		.word	.LANCHOR10
 3135 0094 00000000 		.word	.LANCHOR20
 3136              		.cfi_endproc
 3137              	.LFE165:
 3139              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3140              		.align	2
 3141              		.global	vTaskSetTimeOutState
 3142              		.thumb
 3143              		.thumb_func
 3145              	vTaskSetTimeOutState:
 3146              	.LFB166:
ARM GAS  /tmp/ccLSYPfk.s 			page 150


3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3147              		.loc 1 3009 0
 3148              		.cfi_startproc
 3149              		@ args = 0, pretend = 0, frame = 0
 3150              		@ frame_needed = 0, uses_anonymous_args = 0
 3151              		@ link register save eliminated.
 3152              	.LVL268:
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3153              		.loc 1 3010 0
 3154 0000 50B9     		cbnz	r0, .L270
 3155              	.LBB151:
 3156              	.LBB152:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3157              		.loc 2 237 0
 3158              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3159 0002 4FF05003 			mov r3, #80												
 3160 0006 72B6     		cpsid i													
 3161 0008 83F31188 		msr basepri, r3											
 3162 000c BFF36F8F 		isb														
 3163 0010 BFF34F8F 		dsb														
 3164 0014 62B6     		cpsie i													
 3165              	
 3166              	@ 0 "" 2
 3167              	.LVL269:
 3168              		.thumb
 3169              	.L271:
 3170              	.LBE152:
 3171              	.LBE151:
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3172              		.loc 1 3010 0 discriminator 1
 3173 0016 FEE7     		b	.L271
 3174              	.L270:
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3175              		.loc 1 3011 0
 3176 0018 034A     		ldr	r2, .L272
 3177 001a 1268     		ldr	r2, [r2]
 3178 001c 0260     		str	r2, [r0]
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3179              		.loc 1 3012 0
 3180 001e 034A     		ldr	r2, .L272+4
 3181 0020 1268     		ldr	r2, [r2]
 3182 0022 4260     		str	r2, [r0, #4]
 3183 0024 7047     		bx	lr
 3184              	.L273:
 3185 0026 00BF     		.align	2
 3186              	.L272:
 3187 0028 00000000 		.word	.LANCHOR18
 3188 002c 00000000 		.word	.LANCHOR14
 3189              		.cfi_endproc
 3190              	.LFE166:
 3192              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3193              		.align	2
 3194              		.global	xTaskCheckForTimeOut
 3195              		.thumb
 3196              		.thumb_func
 3198              	xTaskCheckForTimeOut:
 3199              	.LFB167:
ARM GAS  /tmp/ccLSYPfk.s 			page 151


3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3200              		.loc 1 3017 0
 3201              		.cfi_startproc
 3202              		@ args = 0, pretend = 0, frame = 0
 3203              		@ frame_needed = 0, uses_anonymous_args = 0
 3204              	.LVL270:
 3205 0000 38B5     		push	{r3, r4, r5, lr}
 3206              	.LCFI31:
 3207              		.cfi_def_cfa_offset 16
 3208              		.cfi_offset 3, -16
 3209              		.cfi_offset 4, -12
 3210              		.cfi_offset 5, -8
 3211              		.cfi_offset 14, -4
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3212              		.loc 1 3020 0
 3213 0002 50B9     		cbnz	r0, .L275
 3214              	.LBB153:
 3215              	.LBB154:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3216              		.loc 2 237 0
 3217              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3218 0004 4FF05003 			mov r3, #80												
 3219 0008 72B6     		cpsid i													
 3220 000a 83F31188 		msr basepri, r3											
 3221 000e BFF36F8F 		isb														
 3222 0012 BFF34F8F 		dsb														
 3223 0016 62B6     		cpsie i													
 3224              	
 3225              	@ 0 "" 2
 3226              	.LVL271:
 3227              		.thumb
 3228              	.L276:
 3229              	.LBE154:
 3230              	.LBE153:
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3231              		.loc 1 3020 0 discriminator 1
 3232 0018 FEE7     		b	.L276
 3233              	.L275:
 3234 001a 0446     		mov	r4, r0
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3235              		.loc 1 3021 0
 3236 001c 51B9     		cbnz	r1, .L277
 3237              	.LBB155:
 3238              	.LBB156:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3239              		.loc 2 237 0
 3240              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3241 001e 4FF05003 			mov r3, #80												
 3242 0022 72B6     		cpsid i													
 3243 0024 83F31188 		msr basepri, r3											
 3244 0028 BFF36F8F 		isb														
 3245 002c BFF34F8F 		dsb														
 3246 0030 62B6     		cpsie i													
 3247              	
 3248              	@ 0 "" 2
 3249              	.LVL272:
 3250              		.thumb
ARM GAS  /tmp/ccLSYPfk.s 			page 152


 3251              	.L278:
 3252              	.LBE156:
 3253              	.LBE155:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3254              		.loc 1 3021 0 discriminator 2
 3255 0032 FEE7     		b	.L278
 3256              	.L277:
 3257 0034 0D46     		mov	r5, r1
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3258              		.loc 1 3023 0
 3259 0036 FFF7FEFF 		bl	vPortEnterCritical
 3260              	.LVL273:
 3261              	.LBB157:
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3262              		.loc 1 3026 0
 3263 003a 114B     		ldr	r3, .L285
 3264 003c 1968     		ldr	r1, [r3]
 3265              	.LVL274:
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3266              		.loc 1 3040 0
 3267 003e 2A68     		ldr	r2, [r5]
 3268 0040 B2F1FF3F 		cmp	r2, #-1
 3269 0044 13D0     		beq	.L281
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3270              		.loc 1 3050 0
 3271 0046 2068     		ldr	r0, [r4]
 3272 0048 0E4B     		ldr	r3, .L285+4
 3273 004a 1B68     		ldr	r3, [r3]
 3274 004c 9842     		cmp	r0, r3
 3275 004e 02D0     		beq	.L280
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3276              		.loc 1 3050 0 is_stmt 0 discriminator 1
 3277 0050 6368     		ldr	r3, [r4, #4]
 3278 0052 8B42     		cmp	r3, r1
 3279 0054 0DD9     		bls	.L282
 3280              	.L280:
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3281              		.loc 1 3059 0 is_stmt 1
 3282 0056 6368     		ldr	r3, [r4, #4]
 3283 0058 C81A     		subs	r0, r1, r3
 3284 005a 8242     		cmp	r2, r0
 3285 005c 0BD9     		bls	.L283
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3286              		.loc 1 3062 0
 3287 005e 5B1A     		subs	r3, r3, r1
 3288 0060 1344     		add	r3, r3, r2
 3289 0062 2B60     		str	r3, [r5]
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3290              		.loc 1 3063 0
 3291 0064 2046     		mov	r0, r4
 3292 0066 FFF7FEFF 		bl	vTaskSetTimeOutState
 3293              	.LVL275:
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3294              		.loc 1 3064 0
 3295 006a 0024     		movs	r4, #0
 3296              	.LVL276:
 3297 006c 04E0     		b	.L279
ARM GAS  /tmp/ccLSYPfk.s 			page 153


 3298              	.LVL277:
 3299              	.L281:
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3300              		.loc 1 3045 0
 3301 006e 0024     		movs	r4, #0
 3302              	.LVL278:
 3303 0070 02E0     		b	.L279
 3304              	.LVL279:
 3305              	.L282:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3306              		.loc 1 3057 0
 3307 0072 0124     		movs	r4, #1
 3308              	.LVL280:
 3309 0074 00E0     		b	.L279
 3310              	.LVL281:
 3311              	.L283:
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3312              		.loc 1 3068 0
 3313 0076 0124     		movs	r4, #1
 3314              	.LVL282:
 3315              	.L279:
 3316              	.LBE157:
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3317              		.loc 1 3071 0
 3318 0078 FFF7FEFF 		bl	vPortExitCritical
 3319              	.LVL283:
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3320              		.loc 1 3074 0
 3321 007c 2046     		mov	r0, r4
 3322 007e 38BD     		pop	{r3, r4, r5, pc}
 3323              	.LVL284:
 3324              	.L286:
 3325              		.align	2
 3326              	.L285:
 3327 0080 00000000 		.word	.LANCHOR14
 3328 0084 00000000 		.word	.LANCHOR18
 3329              		.cfi_endproc
 3330              	.LFE167:
 3332              		.section	.text.vTaskMissedYield,"ax",%progbits
 3333              		.align	2
 3334              		.global	vTaskMissedYield
 3335              		.thumb
 3336              		.thumb_func
 3338              	vTaskMissedYield:
 3339              	.LFB168:
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3340              		.loc 1 3078 0
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 0
 3343              		@ frame_needed = 0, uses_anonymous_args = 0
 3344              		@ link register save eliminated.
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3345              		.loc 1 3079 0
 3346 0000 0122     		movs	r2, #1
 3347 0002 014B     		ldr	r3, .L288
 3348 0004 1A60     		str	r2, [r3]
 3349 0006 7047     		bx	lr
ARM GAS  /tmp/ccLSYPfk.s 			page 154


 3350              	.L289:
 3351              		.align	2
 3352              	.L288:
 3353 0008 00000000 		.word	.LANCHOR20
 3354              		.cfi_endproc
 3355              	.LFE168:
 3357              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3358              		.align	2
 3359              		.global	xTaskGetCurrentTaskHandle
 3360              		.thumb
 3361              		.thumb_func
 3363              	xTaskGetCurrentTaskHandle:
 3364              	.LFB174:
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3365              		.loc 1 3663 0
 3366              		.cfi_startproc
 3367              		@ args = 0, pretend = 0, frame = 0
 3368              		@ frame_needed = 0, uses_anonymous_args = 0
 3369              		@ link register save eliminated.
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3370              		.loc 1 3669 0
 3371 0000 014B     		ldr	r3, .L291
 3372 0002 1868     		ldr	r0, [r3]
 3373              	.LVL285:
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3374              		.loc 1 3672 0
 3375 0004 7047     		bx	lr
 3376              	.L292:
 3377 0006 00BF     		.align	2
 3378              	.L291:
 3379 0008 00000000 		.word	.LANCHOR10
 3380              		.cfi_endproc
 3381              	.LFE174:
 3383              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3384              		.align	2
 3385              		.global	xTaskGetSchedulerState
 3386              		.thumb
 3387              		.thumb_func
 3389              	xTaskGetSchedulerState:
 3390              	.LFB175:
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3391              		.loc 1 3680 0
 3392              		.cfi_startproc
 3393              		@ args = 0, pretend = 0, frame = 0
 3394              		@ frame_needed = 0, uses_anonymous_args = 0
 3395              		@ link register save eliminated.
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3396              		.loc 1 3683 0
 3397 0000 054B     		ldr	r3, .L297
 3398 0002 1B68     		ldr	r3, [r3]
 3399 0004 23B1     		cbz	r3, .L295
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3400              		.loc 1 3689 0
 3401 0006 054B     		ldr	r3, .L297+4
 3402 0008 1B68     		ldr	r3, [r3]
 3403 000a 1BB9     		cbnz	r3, .L296
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccLSYPfk.s 			page 155


 3404              		.loc 1 3691 0
 3405 000c 0220     		movs	r0, #2
 3406 000e 7047     		bx	lr
 3407              	.L295:
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3408              		.loc 1 3685 0
 3409 0010 0120     		movs	r0, #1
 3410 0012 7047     		bx	lr
 3411              	.L296:
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3412              		.loc 1 3695 0
 3413 0014 0020     		movs	r0, #0
 3414              	.LVL286:
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3415              		.loc 1 3700 0
 3416 0016 7047     		bx	lr
 3417              	.L298:
 3418              		.align	2
 3419              	.L297:
 3420 0018 00000000 		.word	.LANCHOR11
 3421 001c 00000000 		.word	.LANCHOR16
 3422              		.cfi_endproc
 3423              	.LFE175:
 3425              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3426              		.align	2
 3427              		.global	vTaskPriorityInherit
 3428              		.thumb
 3429              		.thumb_func
 3431              	vTaskPriorityInherit:
 3432              	.LFB176:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3433              		.loc 1 3708 0
 3434              		.cfi_startproc
 3435              		@ args = 0, pretend = 0, frame = 0
 3436              		@ frame_needed = 0, uses_anonymous_args = 0
 3437              	.LVL287:
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3438              		.loc 1 3713 0
 3439 0000 0028     		cmp	r0, #0
 3440 0002 49D0     		beq	.L307
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3441              		.loc 1 3708 0
 3442 0004 38B5     		push	{r3, r4, r5, lr}
 3443              	.LCFI32:
 3444              		.cfi_def_cfa_offset 16
 3445              		.cfi_offset 3, -16
 3446              		.cfi_offset 4, -12
 3447              		.cfi_offset 5, -8
 3448              		.cfi_offset 14, -4
 3449 0006 0346     		mov	r3, r0
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3450              		.loc 1 3718 0
 3451 0008 C16A     		ldr	r1, [r0, #44]
 3452 000a 244A     		ldr	r2, .L308
 3453 000c 1268     		ldr	r2, [r2]
 3454 000e D26A     		ldr	r2, [r2, #44]
 3455 0010 9142     		cmp	r1, r2
ARM GAS  /tmp/ccLSYPfk.s 			page 156


 3456 0012 40D2     		bcs	.L299
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3457              		.loc 1 3723 0
 3458 0014 8269     		ldr	r2, [r0, #24]
 3459 0016 002A     		cmp	r2, #0
 3460 0018 05DB     		blt	.L301
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3461              		.loc 1 3725 0
 3462 001a 204A     		ldr	r2, .L308
 3463 001c 1268     		ldr	r2, [r2]
 3464 001e D26A     		ldr	r2, [r2, #44]
 3465 0020 C2F10702 		rsb	r2, r2, #7
 3466 0024 8261     		str	r2, [r0, #24]
 3467              	.L301:
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3468              		.loc 1 3734 0
 3469 0026 5969     		ldr	r1, [r3, #20]
 3470 0028 DA6A     		ldr	r2, [r3, #44]
 3471 002a 02EB8202 		add	r2, r2, r2, lsl #2
 3472 002e 9200     		lsls	r2, r2, #2
 3473 0030 1B48     		ldr	r0, .L308+4
 3474              	.LVL288:
 3475 0032 0244     		add	r2, r2, r0
 3476 0034 9142     		cmp	r1, r2
 3477 0036 01D1     		bne	.L305
 3478 0038 0122     		movs	r2, #1
 3479 003a 00E0     		b	.L302
 3480              	.L305:
 3481 003c 0022     		movs	r2, #0
 3482              	.L302:
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3483              		.loc 1 3734 0 is_stmt 0 discriminator 4
 3484 003e 32B3     		cbz	r2, .L303
 3485 0040 1C46     		mov	r4, r3
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3486              		.loc 1 3736 0 is_stmt 1
 3487 0042 1D1D     		adds	r5, r3, #4
 3488 0044 2846     		mov	r0, r5
 3489 0046 FFF7FEFF 		bl	uxListRemove
 3490              	.LVL289:
 3491 004a 68B9     		cbnz	r0, .L304
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3492              		.loc 1 3738 0
 3493 004c E26A     		ldr	r2, [r4, #44]
 3494 004e 02EB8203 		add	r3, r2, r2, lsl #2
 3495 0052 9B00     		lsls	r3, r3, #2
 3496 0054 1249     		ldr	r1, .L308+4
 3497 0056 CB58     		ldr	r3, [r1, r3]
 3498 0058 33B9     		cbnz	r3, .L304
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3499              		.loc 1 3738 0 is_stmt 0 discriminator 1
 3500 005a 0123     		movs	r3, #1
 3501 005c 9340     		lsls	r3, r3, r2
 3502 005e 1149     		ldr	r1, .L308+8
 3503 0060 0A68     		ldr	r2, [r1]
 3504 0062 22EA0303 		bic	r3, r2, r3
 3505 0066 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccLSYPfk.s 			page 157


 3506              	.L304:
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3507              		.loc 1 3746 0 is_stmt 1
 3508 0068 0C4B     		ldr	r3, .L308
 3509 006a 1B68     		ldr	r3, [r3]
 3510 006c D86A     		ldr	r0, [r3, #44]
 3511 006e E062     		str	r0, [r4, #44]
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3512              		.loc 1 3747 0
 3513 0070 0123     		movs	r3, #1
 3514 0072 8340     		lsls	r3, r3, r0
 3515 0074 0B49     		ldr	r1, .L308+8
 3516 0076 0A68     		ldr	r2, [r1]
 3517 0078 1343     		orrs	r3, r3, r2
 3518 007a 0B60     		str	r3, [r1]
 3519 007c 00EB8000 		add	r0, r0, r0, lsl #2
 3520 0080 8000     		lsls	r0, r0, #2
 3521 0082 074B     		ldr	r3, .L308+4
 3522 0084 1844     		add	r0, r0, r3
 3523 0086 2946     		mov	r1, r5
 3524 0088 FFF7FEFF 		bl	vListInsertEnd
 3525              	.LVL290:
 3526 008c 38BD     		pop	{r3, r4, r5, pc}
 3527              	.LVL291:
 3528              	.L303:
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3529              		.loc 1 3752 0
 3530 008e 034A     		ldr	r2, .L308
 3531 0090 1268     		ldr	r2, [r2]
 3532 0092 D26A     		ldr	r2, [r2, #44]
 3533 0094 DA62     		str	r2, [r3, #44]
 3534              	.L299:
 3535 0096 38BD     		pop	{r3, r4, r5, pc}
 3536              	.LVL292:
 3537              	.L307:
 3538              	.LCFI33:
 3539              		.cfi_def_cfa_offset 0
 3540              		.cfi_restore 3
 3541              		.cfi_restore 4
 3542              		.cfi_restore 5
 3543              		.cfi_restore 14
 3544 0098 7047     		bx	lr
 3545              	.L309:
 3546 009a 00BF     		.align	2
 3547              	.L308:
 3548 009c 00000000 		.word	.LANCHOR10
 3549 00a0 00000000 		.word	.LANCHOR4
 3550 00a4 00000000 		.word	.LANCHOR13
 3551              		.cfi_endproc
 3552              	.LFE176:
 3554              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3555              		.align	2
 3556              		.global	xTaskPriorityDisinherit
 3557              		.thumb
 3558              		.thumb_func
 3560              	xTaskPriorityDisinherit:
 3561              	.LFB177:
ARM GAS  /tmp/ccLSYPfk.s 			page 158


3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3562              		.loc 1 3774 0
 3563              		.cfi_startproc
 3564              		@ args = 0, pretend = 0, frame = 0
 3565              		@ frame_needed = 0, uses_anonymous_args = 0
 3566              	.LVL293:
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3567              		.loc 1 3778 0
 3568 0000 0028     		cmp	r0, #0
 3569 0002 4FD0     		beq	.L317
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3570              		.loc 1 3774 0
 3571 0004 38B5     		push	{r3, r4, r5, lr}
 3572              	.LCFI34:
 3573              		.cfi_def_cfa_offset 16
 3574              		.cfi_offset 3, -16
 3575              		.cfi_offset 4, -12
 3576              		.cfi_offset 5, -8
 3577              		.cfi_offset 14, -4
 3578 0006 0346     		mov	r3, r0
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3579              		.loc 1 3784 0
 3580 0008 294A     		ldr	r2, .L321
 3581 000a 1268     		ldr	r2, [r2]
 3582 000c 9042     		cmp	r0, r2
 3583 000e 0AD0     		beq	.L312
 3584              	.LBB158:
 3585              	.LBB159:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3586              		.loc 2 237 0
 3587              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3588 0010 4FF05003 			mov r3, #80												
 3589 0014 72B6     		cpsid i													
 3590 0016 83F31188 		msr basepri, r3											
 3591 001a BFF36F8F 		isb														
 3592 001e BFF34F8F 		dsb														
 3593 0022 62B6     		cpsie i													
 3594              	
 3595              	@ 0 "" 2
 3596              	.LVL294:
 3597              		.thumb
 3598              	.L313:
 3599              	.LBE159:
 3600              	.LBE158:
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3601              		.loc 1 3784 0 discriminator 1
 3602 0024 FEE7     		b	.L313
 3603              	.L312:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3604              		.loc 1 3786 0
 3605 0026 826C     		ldr	r2, [r0, #72]
 3606 0028 52B9     		cbnz	r2, .L314
 3607              	.LBB160:
 3608              	.LBB161:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3609              		.loc 2 237 0
 3610              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
ARM GAS  /tmp/ccLSYPfk.s 			page 159


 3611 002a 4FF05003 			mov r3, #80												
 3612 002e 72B6     		cpsid i													
 3613 0030 83F31188 		msr basepri, r3											
 3614 0034 BFF36F8F 		isb														
 3615 0038 BFF34F8F 		dsb														
 3616 003c 62B6     		cpsie i													
 3617              	
 3618              	@ 0 "" 2
 3619              	.LVL295:
 3620              		.thumb
 3621              	.L315:
 3622              	.LBE161:
 3623              	.LBE160:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3624              		.loc 1 3786 0 discriminator 2
 3625 003e FEE7     		b	.L315
 3626              	.L314:
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3627              		.loc 1 3787 0
 3628 0040 013A     		subs	r2, r2, #1
 3629 0042 8264     		str	r2, [r0, #72]
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3630              		.loc 1 3791 0
 3631 0044 C06A     		ldr	r0, [r0, #44]
 3632              	.LVL296:
 3633 0046 596C     		ldr	r1, [r3, #68]
 3634 0048 8842     		cmp	r0, r1
 3635 004a 2DD0     		beq	.L318
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3636              		.loc 1 3794 0
 3637 004c 72BB     		cbnz	r2, .L319
 3638 004e 1C46     		mov	r4, r3
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3639              		.loc 1 3801 0
 3640 0050 1D1D     		adds	r5, r3, #4
 3641 0052 2846     		mov	r0, r5
 3642 0054 FFF7FEFF 		bl	uxListRemove
 3643              	.LVL297:
 3644 0058 70B9     		cbnz	r0, .L316
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3645              		.loc 1 3803 0
 3646 005a E26A     		ldr	r2, [r4, #44]
 3647 005c 02EB8203 		add	r3, r2, r2, lsl #2
 3648 0060 9B00     		lsls	r3, r3, #2
 3649 0062 1449     		ldr	r1, .L321+4
 3650 0064 CB58     		ldr	r3, [r1, r3]
 3651 0066 3BB9     		cbnz	r3, .L316
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3652              		.loc 1 3803 0 is_stmt 0 discriminator 1
 3653 0068 0123     		movs	r3, #1
 3654 006a 03FA02F2 		lsl	r2, r3, r2
 3655 006e 1249     		ldr	r1, .L321+8
 3656 0070 0B68     		ldr	r3, [r1]
 3657 0072 23EA0203 		bic	r3, r3, r2
 3658 0076 0B60     		str	r3, [r1]
 3659              	.L316:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 160


 3660              		.loc 1 3813 0 is_stmt 1
 3661 0078 606C     		ldr	r0, [r4, #68]
 3662 007a E062     		str	r0, [r4, #44]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3663              		.loc 1 3818 0
 3664 007c C0F10703 		rsb	r3, r0, #7
 3665 0080 A361     		str	r3, [r4, #24]
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3666              		.loc 1 3819 0
 3667 0082 0124     		movs	r4, #1
 3668              	.LVL298:
 3669 0084 04FA00F1 		lsl	r1, r4, r0
 3670 0088 0B4A     		ldr	r2, .L321+8
 3671 008a 1368     		ldr	r3, [r2]
 3672 008c 0B43     		orrs	r3, r3, r1
 3673 008e 1360     		str	r3, [r2]
 3674 0090 00EB8000 		add	r0, r0, r0, lsl #2
 3675 0094 8000     		lsls	r0, r0, #2
 3676 0096 074B     		ldr	r3, .L321+4
 3677 0098 1844     		add	r0, r0, r3
 3678 009a 2946     		mov	r1, r5
 3679 009c FFF7FEFF 		bl	vListInsertEnd
 3680              	.LVL299:
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3681              		.loc 1 3829 0
 3682 00a0 2046     		mov	r0, r4
 3683 00a2 38BD     		pop	{r3, r4, r5, pc}
 3684              	.LVL300:
 3685              	.L317:
 3686              	.LCFI35:
 3687              		.cfi_def_cfa_offset 0
 3688              		.cfi_restore 3
 3689              		.cfi_restore 4
 3690              		.cfi_restore 5
 3691              		.cfi_restore 14
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3692              		.loc 1 3776 0
 3693 00a4 0020     		movs	r0, #0
 3694              	.LVL301:
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3695              		.loc 1 3847 0
 3696 00a6 7047     		bx	lr
 3697              	.LVL302:
 3698              	.L318:
 3699              	.LCFI36:
 3700              		.cfi_def_cfa_offset 16
 3701              		.cfi_offset 3, -16
 3702              		.cfi_offset 4, -12
 3703              		.cfi_offset 5, -8
 3704              		.cfi_offset 14, -4
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3705              		.loc 1 3776 0
 3706 00a8 0020     		movs	r0, #0
 3707 00aa 38BD     		pop	{r3, r4, r5, pc}
 3708              	.LVL303:
 3709              	.L319:
 3710 00ac 0020     		movs	r0, #0
ARM GAS  /tmp/ccLSYPfk.s 			page 161


 3711              	.LVL304:
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3712              		.loc 1 3847 0
 3713 00ae 38BD     		pop	{r3, r4, r5, pc}
 3714              	.LVL305:
 3715              	.L322:
 3716              		.align	2
 3717              	.L321:
 3718 00b0 00000000 		.word	.LANCHOR10
 3719 00b4 00000000 		.word	.LANCHOR4
 3720 00b8 00000000 		.word	.LANCHOR13
 3721              		.cfi_endproc
 3722              	.LFE177:
 3724              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3725              		.align	2
 3726              		.global	uxTaskResetEventItemValue
 3727              		.thumb
 3728              		.thumb_func
 3730              	uxTaskResetEventItemValue:
 3731              	.LFB178:
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 3732              		.loc 1 4164 0
 3733              		.cfi_startproc
 3734              		@ args = 0, pretend = 0, frame = 0
 3735              		@ frame_needed = 0, uses_anonymous_args = 0
 3736              		@ link register save eliminated.
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3737              		.loc 1 4167 0
 3738 0000 044B     		ldr	r3, .L324
 3739 0002 1A68     		ldr	r2, [r3]
 3740 0004 9069     		ldr	r0, [r2, #24]
 3741              	.LVL306:
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3742              		.loc 1 4171 0
 3743 0006 1A68     		ldr	r2, [r3]
 3744 0008 1B68     		ldr	r3, [r3]
 3745 000a DB6A     		ldr	r3, [r3, #44]
 3746 000c C3F10703 		rsb	r3, r3, #7
 3747 0010 9361     		str	r3, [r2, #24]
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3748              		.loc 1 4174 0
 3749 0012 7047     		bx	lr
 3750              	.L325:
 3751              		.align	2
 3752              	.L324:
 3753 0014 00000000 		.word	.LANCHOR10
 3754              		.cfi_endproc
 3755              	.LFE178:
 3757              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3758              		.align	2
 3759              		.global	pvTaskIncrementMutexHeldCount
 3760              		.thumb
 3761              		.thumb_func
 3763              	pvTaskIncrementMutexHeldCount:
 3764              	.LFB179:
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3765              		.loc 1 4180 0
ARM GAS  /tmp/ccLSYPfk.s 			page 162


 3766              		.cfi_startproc
 3767              		@ args = 0, pretend = 0, frame = 0
 3768              		@ frame_needed = 0, uses_anonymous_args = 0
 3769              		@ link register save eliminated.
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3770              		.loc 1 4183 0
 3771 0000 054B     		ldr	r3, .L328
 3772 0002 1B68     		ldr	r3, [r3]
 3773 0004 23B1     		cbz	r3, .L327
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3774              		.loc 1 4185 0
 3775 0006 044B     		ldr	r3, .L328
 3776 0008 1A68     		ldr	r2, [r3]
 3777 000a 936C     		ldr	r3, [r2, #72]
 3778 000c 0133     		adds	r3, r3, #1
 3779 000e 9364     		str	r3, [r2, #72]
 3780              	.L327:
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3781              		.loc 1 4188 0
 3782 0010 014B     		ldr	r3, .L328
 3783 0012 1868     		ldr	r0, [r3]
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3784              		.loc 1 4189 0
 3785 0014 7047     		bx	lr
 3786              	.L329:
 3787 0016 00BF     		.align	2
 3788              	.L328:
 3789 0018 00000000 		.word	.LANCHOR10
 3790              		.cfi_endproc
 3791              	.LFE179:
 3793              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3794              		.align	2
 3795              		.global	ulTaskNotifyTake
 3796              		.thumb
 3797              		.thumb_func
 3799              	ulTaskNotifyTake:
 3800              	.LFB180:
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 3801              		.loc 1 4197 0
 3802              		.cfi_startproc
 3803              		@ args = 0, pretend = 0, frame = 0
 3804              		@ frame_needed = 0, uses_anonymous_args = 0
 3805              	.LVL307:
 3806 0000 38B5     		push	{r3, r4, r5, lr}
 3807              	.LCFI37:
 3808              		.cfi_def_cfa_offset 16
 3809              		.cfi_offset 3, -16
 3810              		.cfi_offset 4, -12
 3811              		.cfi_offset 5, -8
 3812              		.cfi_offset 14, -4
 3813 0002 0546     		mov	r5, r0
 3814 0004 0C46     		mov	r4, r1
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3815              		.loc 1 4200 0
 3816 0006 FFF7FEFF 		bl	vPortEnterCritical
 3817              	.LVL308:
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccLSYPfk.s 			page 163


 3818              		.loc 1 4203 0
 3819 000a 184B     		ldr	r3, .L335
 3820 000c 1B68     		ldr	r3, [r3]
 3821 000e DB6C     		ldr	r3, [r3, #76]
 3822 0010 8BB9     		cbnz	r3, .L331
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3823              		.loc 1 4206 0
 3824 0012 164B     		ldr	r3, .L335
 3825 0014 1B68     		ldr	r3, [r3]
 3826 0016 0122     		movs	r2, #1
 3827 0018 83F85020 		strb	r2, [r3, #80]
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3828              		.loc 1 4208 0
 3829 001c 5CB1     		cbz	r4, .L331
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3830              		.loc 1 4210 0
 3831 001e 2046     		mov	r0, r4
 3832 0020 1146     		mov	r1, r2
 3833 0022 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3834              	.LVL309:
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3835              		.loc 1 4217 0
 3836 0026 4FF08052 		mov	r2, #268435456
 3837 002a 114B     		ldr	r3, .L335+4
 3838 002c 1A60     		str	r2, [r3]
 3839              	@ 4217 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3840 002e BFF34F8F 		dsb
 3841              	@ 0 "" 2
 3842              	@ 4217 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3843 0032 BFF36F8F 		isb
 3844              	@ 0 "" 2
 3845              		.thumb
 3846              	.L331:
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3847              		.loc 1 4229 0
 3848 0036 FFF7FEFF 		bl	vPortExitCritical
 3849              	.LVL310:
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3850              		.loc 1 4231 0
 3851 003a FFF7FEFF 		bl	vPortEnterCritical
 3852              	.LVL311:
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3853              		.loc 1 4234 0
 3854 003e 0B4B     		ldr	r3, .L335
 3855 0040 1B68     		ldr	r3, [r3]
 3856 0042 DC6C     		ldr	r4, [r3, #76]
 3857              	.LVL312:
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3858              		.loc 1 4236 0
 3859 0044 4CB1     		cbz	r4, .L332
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3860              		.loc 1 4238 0
 3861 0046 25B1     		cbz	r5, .L333
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3862              		.loc 1 4240 0
 3863 0048 084B     		ldr	r3, .L335
 3864 004a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccLSYPfk.s 			page 164


 3865 004c 0022     		movs	r2, #0
 3866 004e DA64     		str	r2, [r3, #76]
 3867 0050 03E0     		b	.L332
 3868              	.L333:
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3869              		.loc 1 4244 0
 3870 0052 064B     		ldr	r3, .L335
 3871 0054 1B68     		ldr	r3, [r3]
 3872 0056 621E     		subs	r2, r4, #1
 3873 0058 DA64     		str	r2, [r3, #76]
 3874              	.L332:
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3875              		.loc 1 4252 0
 3876 005a 044B     		ldr	r3, .L335
 3877 005c 1B68     		ldr	r3, [r3]
 3878 005e 0022     		movs	r2, #0
 3879 0060 83F85020 		strb	r2, [r3, #80]
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3880              		.loc 1 4254 0
 3881 0064 FFF7FEFF 		bl	vPortExitCritical
 3882              	.LVL313:
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3883              		.loc 1 4257 0
 3884 0068 2046     		mov	r0, r4
 3885 006a 38BD     		pop	{r3, r4, r5, pc}
 3886              	.LVL314:
 3887              	.L336:
 3888              		.align	2
 3889              	.L335:
 3890 006c 00000000 		.word	.LANCHOR10
 3891 0070 04ED00E0 		.word	-536810236
 3892              		.cfi_endproc
 3893              	.LFE180:
 3895              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3896              		.align	2
 3897              		.global	xTaskNotifyWait
 3898              		.thumb
 3899              		.thumb_func
 3901              	xTaskNotifyWait:
 3902              	.LFB181:
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3903              		.loc 1 4265 0
 3904              		.cfi_startproc
 3905              		@ args = 0, pretend = 0, frame = 0
 3906              		@ frame_needed = 0, uses_anonymous_args = 0
 3907              	.LVL315:
 3908 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3909              	.LCFI38:
 3910              		.cfi_def_cfa_offset 24
 3911              		.cfi_offset 3, -24
 3912              		.cfi_offset 4, -20
 3913              		.cfi_offset 5, -16
 3914              		.cfi_offset 6, -12
 3915              		.cfi_offset 7, -8
 3916              		.cfi_offset 14, -4
 3917 0002 0746     		mov	r7, r0
 3918 0004 0C46     		mov	r4, r1
ARM GAS  /tmp/ccLSYPfk.s 			page 165


 3919 0006 1546     		mov	r5, r2
 3920 0008 1E46     		mov	r6, r3
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3921              		.loc 1 4268 0
 3922 000a FFF7FEFF 		bl	vPortEnterCritical
 3923              	.LVL316:
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3924              		.loc 1 4271 0
 3925 000e 204B     		ldr	r3, .L343
 3926 0010 1B68     		ldr	r3, [r3]
 3927 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3928 0016 DBB2     		uxtb	r3, r3
 3929 0018 022B     		cmp	r3, #2
 3930 001a 16D0     		beq	.L338
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3931              		.loc 1 4276 0
 3932 001c 1C4B     		ldr	r3, .L343
 3933 001e 1A68     		ldr	r2, [r3]
 3934 0020 D06C     		ldr	r0, [r2, #76]
 3935 0022 20EA0700 		bic	r0, r0, r7
 3936 0026 D064     		str	r0, [r2, #76]
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3937              		.loc 1 4279 0
 3938 0028 1B68     		ldr	r3, [r3]
 3939 002a 0122     		movs	r2, #1
 3940 002c 83F85020 		strb	r2, [r3, #80]
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3941              		.loc 1 4281 0
 3942 0030 5EB1     		cbz	r6, .L338
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3943              		.loc 1 4283 0
 3944 0032 3046     		mov	r0, r6
 3945 0034 1146     		mov	r1, r2
 3946 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3947              	.LVL317:
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3948              		.loc 1 4290 0
 3949 003a 4FF08052 		mov	r2, #268435456
 3950 003e 154B     		ldr	r3, .L343+4
 3951 0040 1A60     		str	r2, [r3]
 3952              	@ 4290 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3953 0042 BFF34F8F 		dsb
 3954              	@ 0 "" 2
 3955              	@ 4290 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3956 0046 BFF36F8F 		isb
 3957              	@ 0 "" 2
 3958              		.thumb
 3959              	.L338:
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3960              		.loc 1 4302 0
 3961 004a FFF7FEFF 		bl	vPortExitCritical
 3962              	.LVL318:
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3963              		.loc 1 4304 0
 3964 004e FFF7FEFF 		bl	vPortEnterCritical
 3965              	.LVL319:
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccLSYPfk.s 			page 166


 3966              		.loc 1 4308 0
 3967 0052 1DB1     		cbz	r5, .L339
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3968              		.loc 1 4312 0
 3969 0054 0E4B     		ldr	r3, .L343
 3970 0056 1B68     		ldr	r3, [r3]
 3971 0058 DB6C     		ldr	r3, [r3, #76]
 3972 005a 2B60     		str	r3, [r5]
 3973              	.L339:
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3974              		.loc 1 4319 0
 3975 005c 0C4B     		ldr	r3, .L343
 3976 005e 1B68     		ldr	r3, [r3]
 3977 0060 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3978 0064 DBB2     		uxtb	r3, r3
 3979 0066 012B     		cmp	r3, #1
 3980 0068 07D0     		beq	.L341
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 3981              		.loc 1 4328 0
 3982 006a 094B     		ldr	r3, .L343
 3983 006c 1B68     		ldr	r3, [r3]
 3984 006e D96C     		ldr	r1, [r3, #76]
 3985 0070 21EA0401 		bic	r1, r1, r4
 3986 0074 D964     		str	r1, [r3, #76]
 3987              	.LVL320:
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3988              		.loc 1 4329 0
 3989 0076 0124     		movs	r4, #1
 3990              	.LVL321:
 3991 0078 00E0     		b	.L340
 3992              	.LVL322:
 3993              	.L341:
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3994              		.loc 1 4322 0
 3995 007a 0024     		movs	r4, #0
 3996              	.LVL323:
 3997              	.L340:
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3998              		.loc 1 4332 0
 3999 007c 044B     		ldr	r3, .L343
 4000 007e 1B68     		ldr	r3, [r3]
 4001 0080 0022     		movs	r2, #0
 4002 0082 83F85020 		strb	r2, [r3, #80]
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4003              		.loc 1 4334 0
 4004 0086 FFF7FEFF 		bl	vPortExitCritical
 4005              	.LVL324:
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4006              		.loc 1 4337 0
 4007 008a 2046     		mov	r0, r4
 4008 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4009              	.LVL325:
 4010              	.L344:
 4011 008e 00BF     		.align	2
 4012              	.L343:
 4013 0090 00000000 		.word	.LANCHOR10
 4014 0094 04ED00E0 		.word	-536810236
ARM GAS  /tmp/ccLSYPfk.s 			page 167


 4015              		.cfi_endproc
 4016              	.LFE181:
 4018              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4019              		.align	2
 4020              		.global	xTaskGenericNotify
 4021              		.thumb
 4022              		.thumb_func
 4024              	xTaskGenericNotify:
 4025              	.LFB182:
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4026              		.loc 1 4345 0
 4027              		.cfi_startproc
 4028              		@ args = 0, pretend = 0, frame = 0
 4029              		@ frame_needed = 0, uses_anonymous_args = 0
 4030              	.LVL326:
 4031 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4032              	.LCFI39:
 4033              		.cfi_def_cfa_offset 24
 4034              		.cfi_offset 3, -24
 4035              		.cfi_offset 4, -20
 4036              		.cfi_offset 5, -16
 4037              		.cfi_offset 6, -12
 4038              		.cfi_offset 7, -8
 4039              		.cfi_offset 14, -4
 4040              	.LVL327:
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4041              		.loc 1 4350 0
 4042 0002 50B9     		cbnz	r0, .L346
 4043              	.LBB162:
 4044              	.LBB163:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4045              		.loc 2 237 0
 4046              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4047 0004 4FF05003 			mov r3, #80												
 4048 0008 72B6     		cpsid i													
 4049 000a 83F31188 		msr basepri, r3											
 4050 000e BFF36F8F 		isb														
 4051 0012 BFF34F8F 		dsb														
 4052 0016 62B6     		cpsie i													
 4053              	
 4054              	@ 0 "" 2
 4055              	.LVL328:
 4056              		.thumb
 4057              	.L347:
 4058              	.LBE163:
 4059              	.LBE162:
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4060              		.loc 1 4350 0 discriminator 1
 4061 0018 FEE7     		b	.L347
 4062              	.LVL329:
 4063              	.L346:
 4064 001a 0446     		mov	r4, r0
 4065 001c 1F46     		mov	r7, r3
 4066 001e 1546     		mov	r5, r2
 4067 0020 0E46     		mov	r6, r1
 4068              	.LVL330:
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccLSYPfk.s 			page 168


 4069              		.loc 1 4353 0
 4070 0022 FFF7FEFF 		bl	vPortEnterCritical
 4071              	.LVL331:
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4072              		.loc 1 4355 0
 4073 0026 0FB1     		cbz	r7, .L348
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4074              		.loc 1 4357 0
 4075 0028 E36C     		ldr	r3, [r4, #76]
 4076 002a 3B60     		str	r3, [r7]
 4077              	.L348:
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4078              		.loc 1 4360 0
 4079 002c 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4080 0030 DBB2     		uxtb	r3, r3
 4081              	.LVL332:
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4082              		.loc 1 4362 0
 4083 0032 0222     		movs	r2, #2
 4084 0034 84F85020 		strb	r2, [r4, #80]
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4085              		.loc 1 4364 0
 4086 0038 6A1E     		subs	r2, r5, #1
 4087 003a 032A     		cmp	r2, #3
 4088 003c 15D8     		bhi	.L358
 4089 003e DFE802F0 		tbb	[pc, r2]
 4090              	.L351:
 4091 0042 02       		.byte	(.L350-.L351)/2
 4092 0043 07       		.byte	(.L352-.L351)/2
 4093 0044 0C       		.byte	(.L353-.L351)/2
 4094 0045 0F       		.byte	(.L354-.L351)/2
 4095              		.p2align 1
 4096              	.L350:
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4097              		.loc 1 4367 0
 4098 0046 E26C     		ldr	r2, [r4, #76]
 4099 0048 1643     		orrs	r6, r6, r2
 4100              	.LVL333:
 4101 004a E664     		str	r6, [r4, #76]
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4102              		.loc 1 4347 0
 4103 004c 0125     		movs	r5, #1
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4104              		.loc 1 4368 0
 4105 004e 0FE0     		b	.L349
 4106              	.LVL334:
 4107              	.L352:
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4108              		.loc 1 4371 0
 4109 0050 E26C     		ldr	r2, [r4, #76]
 4110 0052 0132     		adds	r2, r2, #1
 4111 0054 E264     		str	r2, [r4, #76]
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4112              		.loc 1 4347 0
 4113 0056 0125     		movs	r5, #1
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4114              		.loc 1 4372 0
ARM GAS  /tmp/ccLSYPfk.s 			page 169


 4115 0058 0AE0     		b	.L349
 4116              	.L353:
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4117              		.loc 1 4375 0
 4118 005a E664     		str	r6, [r4, #76]
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4119              		.loc 1 4347 0
 4120 005c 0125     		movs	r5, #1
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4121              		.loc 1 4376 0
 4122 005e 07E0     		b	.L349
 4123              	.L354:
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4124              		.loc 1 4379 0
 4125 0060 022B     		cmp	r3, #2
 4126 0062 04D0     		beq	.L359
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4127              		.loc 1 4381 0
 4128 0064 E664     		str	r6, [r4, #76]
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4129              		.loc 1 4347 0
 4130 0066 0125     		movs	r5, #1
 4131 0068 02E0     		b	.L349
 4132              	.L358:
 4133 006a 0125     		movs	r5, #1
 4134 006c 00E0     		b	.L349
 4135              	.L359:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4136              		.loc 1 4386 0
 4137 006e 0025     		movs	r5, #0
 4138              	.LVL335:
 4139              	.L349:
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4140              		.loc 1 4400 0
 4141 0070 012B     		cmp	r3, #1
 4142 0072 2ED1     		bne	.L355
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4143              		.loc 1 4402 0
 4144 0074 261D     		adds	r6, r4, #4
 4145 0076 3046     		mov	r0, r6
 4146 0078 FFF7FEFF 		bl	uxListRemove
 4147              	.LVL336:
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4148              		.loc 1 4403 0
 4149 007c E36A     		ldr	r3, [r4, #44]
 4150 007e 0122     		movs	r2, #1
 4151 0080 02FA03F1 		lsl	r1, r2, r3
 4152 0084 1548     		ldr	r0, .L361
 4153 0086 0268     		ldr	r2, [r0]
 4154 0088 0A43     		orrs	r2, r2, r1
 4155 008a 0260     		str	r2, [r0]
 4156 008c 03EB8303 		add	r3, r3, r3, lsl #2
 4157 0090 9B00     		lsls	r3, r3, #2
 4158 0092 1348     		ldr	r0, .L361+4
 4159 0094 1844     		add	r0, r0, r3
 4160 0096 3146     		mov	r1, r6
 4161 0098 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccLSYPfk.s 			page 170


 4162              	.LVL337:
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4163              		.loc 1 4406 0
 4164 009c A36A     		ldr	r3, [r4, #40]
 4165 009e 53B1     		cbz	r3, .L356
 4166              	.LBB164:
 4167              	.LBB165:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4168              		.loc 2 237 0
 4169              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4170 00a0 4FF05003 			mov r3, #80												
 4171 00a4 72B6     		cpsid i													
 4172 00a6 83F31188 		msr basepri, r3											
 4173 00aa BFF36F8F 		isb														
 4174 00ae BFF34F8F 		dsb														
 4175 00b2 62B6     		cpsie i													
 4176              	
 4177              	@ 0 "" 2
 4178              	.LVL338:
 4179              		.thumb
 4180              	.L357:
 4181              	.LBE165:
 4182              	.LBE164:
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4183              		.loc 1 4406 0 discriminator 2
 4184 00b4 FEE7     		b	.L357
 4185              	.L356:
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4186              		.loc 1 4424 0
 4187 00b6 E26A     		ldr	r2, [r4, #44]
 4188 00b8 0A4B     		ldr	r3, .L361+8
 4189 00ba 1B68     		ldr	r3, [r3]
 4190 00bc DB6A     		ldr	r3, [r3, #44]
 4191 00be 9A42     		cmp	r2, r3
 4192 00c0 07D9     		bls	.L355
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4193              		.loc 1 4428 0
 4194 00c2 4FF08052 		mov	r2, #268435456
 4195 00c6 084B     		ldr	r3, .L361+12
 4196 00c8 1A60     		str	r2, [r3]
 4197              	@ 4428 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4198 00ca BFF34F8F 		dsb
 4199              	@ 0 "" 2
 4200              	@ 4428 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4201 00ce BFF36F8F 		isb
 4202              	@ 0 "" 2
 4203              		.thumb
 4204              	.L355:
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4205              		.loc 1 4440 0
 4206 00d2 FFF7FEFF 		bl	vPortExitCritical
 4207              	.LVL339:
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4208              		.loc 1 4443 0
 4209 00d6 2846     		mov	r0, r5
 4210 00d8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4211              	.LVL340:
ARM GAS  /tmp/ccLSYPfk.s 			page 171


 4212              	.L362:
 4213 00da 00BF     		.align	2
 4214              	.L361:
 4215 00dc 00000000 		.word	.LANCHOR13
 4216 00e0 00000000 		.word	.LANCHOR4
 4217 00e4 00000000 		.word	.LANCHOR10
 4218 00e8 04ED00E0 		.word	-536810236
 4219              		.cfi_endproc
 4220              	.LFE182:
 4222              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4223              		.align	2
 4224              		.global	xTaskGenericNotifyFromISR
 4225              		.thumb
 4226              		.thumb_func
 4228              	xTaskGenericNotifyFromISR:
 4229              	.LFB183:
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4230              		.loc 1 4451 0
 4231              		.cfi_startproc
 4232              		@ args = 4, pretend = 0, frame = 0
 4233              		@ frame_needed = 0, uses_anonymous_args = 0
 4234              	.LVL341:
 4235 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4236              	.LCFI40:
 4237              		.cfi_def_cfa_offset 32
 4238              		.cfi_offset 3, -32
 4239              		.cfi_offset 4, -28
 4240              		.cfi_offset 5, -24
 4241              		.cfi_offset 6, -20
 4242              		.cfi_offset 7, -16
 4243              		.cfi_offset 8, -12
 4244              		.cfi_offset 9, -8
 4245              		.cfi_offset 14, -4
 4246 0004 089E     		ldr	r6, [sp, #32]
 4247              	.LVL342:
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4248              		.loc 1 4457 0
 4249 0006 50B9     		cbnz	r0, .L364
 4250              	.LBB166:
 4251              	.LBB167:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4252              		.loc 2 237 0
 4253              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4254 0008 4FF05003 			mov r3, #80												
 4255 000c 72B6     		cpsid i													
 4256 000e 83F31188 		msr basepri, r3											
 4257 0012 BFF36F8F 		isb														
 4258 0016 BFF34F8F 		dsb														
 4259 001a 62B6     		cpsie i													
 4260              	
 4261              	@ 0 "" 2
 4262              	.LVL343:
 4263              		.thumb
 4264              	.L365:
 4265              	.LBE167:
 4266              	.LBE166:
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccLSYPfk.s 			page 172


 4267              		.loc 1 4457 0 discriminator 1
 4268 001c FEE7     		b	.L365
 4269              	.LVL344:
 4270              	.L364:
 4271 001e 0446     		mov	r4, r0
 4272 0020 9946     		mov	r9, r3
 4273 0022 1546     		mov	r5, r2
 4274 0024 8846     		mov	r8, r1
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4275              		.loc 1 4475 0
 4276 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4277              	.LVL345:
 4278              	.LBB168:
 4279              	.LBB169:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4280              		.loc 2 255 0
 4281              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4282 002a EFF31187 			mrs r7, basepri											
 4283 002e 4FF05003 		mov r3, #80												
 4284 0032 72B6     		cpsid i													
 4285 0034 83F31188 		msr basepri, r3											
 4286 0038 BFF36F8F 		isb														
 4287 003c BFF34F8F 		dsb														
 4288 0040 62B6     		cpsie i													
 4289              	
 4290              	@ 0 "" 2
 4291              	.LVL346:
 4292              		.thumb
 4293              	.LBE169:
 4294              	.LBE168:
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4295              		.loc 1 4481 0
 4296 0042 B9F1000F 		cmp	r9, #0
 4297 0046 02D0     		beq	.L366
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4298              		.loc 1 4483 0
 4299 0048 E36C     		ldr	r3, [r4, #76]
 4300 004a C9F80030 		str	r3, [r9]
 4301              	.L366:
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4302              		.loc 1 4486 0
 4303 004e 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4304 0052 DBB2     		uxtb	r3, r3
 4305              	.LVL347:
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4306              		.loc 1 4487 0
 4307 0054 0222     		movs	r2, #2
 4308 0056 84F85020 		strb	r2, [r4, #80]
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4309              		.loc 1 4489 0
 4310 005a 6A1E     		subs	r2, r5, #1
 4311 005c 032A     		cmp	r2, #3
 4312 005e 18D8     		bhi	.L379
 4313 0060 DFE802F0 		tbb	[pc, r2]
 4314              	.L369:
 4315 0064 02       		.byte	(.L368-.L369)/2
 4316 0065 08       		.byte	(.L370-.L369)/2
ARM GAS  /tmp/ccLSYPfk.s 			page 173


 4317 0066 0D       		.byte	(.L371-.L369)/2
 4318 0067 11       		.byte	(.L372-.L369)/2
 4319              		.p2align 1
 4320              	.L368:
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4321              		.loc 1 4492 0
 4322 0068 E26C     		ldr	r2, [r4, #76]
 4323 006a 42EA0802 		orr	r2, r2, r8
 4324 006e E264     		str	r2, [r4, #76]
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4325              		.loc 1 4454 0
 4326 0070 0125     		movs	r5, #1
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4327              		.loc 1 4493 0
 4328 0072 11E0     		b	.L367
 4329              	.L370:
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4330              		.loc 1 4496 0
 4331 0074 E26C     		ldr	r2, [r4, #76]
 4332 0076 0132     		adds	r2, r2, #1
 4333 0078 E264     		str	r2, [r4, #76]
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4334              		.loc 1 4454 0
 4335 007a 0125     		movs	r5, #1
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4336              		.loc 1 4497 0
 4337 007c 0CE0     		b	.L367
 4338              	.L371:
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4339              		.loc 1 4500 0
 4340 007e C4F84C80 		str	r8, [r4, #76]
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4341              		.loc 1 4454 0
 4342 0082 0125     		movs	r5, #1
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4343              		.loc 1 4501 0
 4344 0084 08E0     		b	.L367
 4345              	.L372:
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4346              		.loc 1 4504 0
 4347 0086 022B     		cmp	r3, #2
 4348 0088 05D0     		beq	.L380
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4349              		.loc 1 4506 0
 4350 008a C4F84C80 		str	r8, [r4, #76]
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4351              		.loc 1 4454 0
 4352 008e 0125     		movs	r5, #1
 4353 0090 02E0     		b	.L367
 4354              	.L379:
 4355 0092 0125     		movs	r5, #1
 4356 0094 00E0     		b	.L367
 4357              	.L380:
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4358              		.loc 1 4511 0
 4359 0096 0025     		movs	r5, #0
 4360              	.L367:
ARM GAS  /tmp/ccLSYPfk.s 			page 174


 4361              	.LVL348:
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4362              		.loc 1 4525 0
 4363 0098 012B     		cmp	r3, #1
 4364 009a 37D1     		bne	.L373
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4365              		.loc 1 4528 0
 4366 009c A36A     		ldr	r3, [r4, #40]
 4367              	.LVL349:
 4368 009e 53B1     		cbz	r3, .L374
 4369              	.LBB170:
 4370              	.LBB171:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4371              		.loc 2 237 0
 4372              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4373 00a0 4FF05003 			mov r3, #80												
 4374 00a4 72B6     		cpsid i													
 4375 00a6 83F31188 		msr basepri, r3											
 4376 00aa BFF36F8F 		isb														
 4377 00ae BFF34F8F 		dsb														
 4378 00b2 62B6     		cpsie i													
 4379              	
 4380              	@ 0 "" 2
 4381              	.LVL350:
 4382              		.thumb
 4383              	.L375:
 4384              	.LBE171:
 4385              	.LBE170:
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4386              		.loc 1 4528 0 discriminator 2
 4387 00b4 FEE7     		b	.L375
 4388              	.L374:
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4389              		.loc 1 4530 0
 4390 00b6 184B     		ldr	r3, .L382
 4391 00b8 1B68     		ldr	r3, [r3]
 4392 00ba ABB9     		cbnz	r3, .L376
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4393              		.loc 1 4532 0
 4394 00bc 04F10408 		add	r8, r4, #4
 4395              	.LVL351:
 4396 00c0 4046     		mov	r0, r8
 4397 00c2 FFF7FEFF 		bl	uxListRemove
 4398              	.LVL352:
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4399              		.loc 1 4533 0
 4400 00c6 E36A     		ldr	r3, [r4, #44]
 4401 00c8 0122     		movs	r2, #1
 4402 00ca 02FA03F1 		lsl	r1, r2, r3
 4403 00ce 1348     		ldr	r0, .L382+4
 4404 00d0 0268     		ldr	r2, [r0]
 4405 00d2 0A43     		orrs	r2, r2, r1
 4406 00d4 0260     		str	r2, [r0]
 4407 00d6 03EB8303 		add	r3, r3, r3, lsl #2
 4408 00da 9B00     		lsls	r3, r3, #2
 4409 00dc 1048     		ldr	r0, .L382+8
 4410 00de 1844     		add	r0, r0, r3
ARM GAS  /tmp/ccLSYPfk.s 			page 175


 4411 00e0 4146     		mov	r1, r8
 4412 00e2 FFF7FEFF 		bl	vListInsertEnd
 4413              	.LVL353:
 4414 00e6 04E0     		b	.L377
 4415              	.LVL354:
 4416              	.L376:
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4417              		.loc 1 4539 0
 4418 00e8 0E48     		ldr	r0, .L382+12
 4419 00ea 04F11801 		add	r1, r4, #24
 4420 00ee FFF7FEFF 		bl	vListInsertEnd
 4421              	.LVL355:
 4422              	.L377:
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4423              		.loc 1 4542 0
 4424 00f2 E26A     		ldr	r2, [r4, #44]
 4425 00f4 0C4B     		ldr	r3, .L382+16
 4426 00f6 1B68     		ldr	r3, [r3]
 4427 00f8 DB6A     		ldr	r3, [r3, #44]
 4428 00fa 9A42     		cmp	r2, r3
 4429 00fc 06D9     		bls	.L373
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4430              		.loc 1 4546 0
 4431 00fe 16B1     		cbz	r6, .L378
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4432              		.loc 1 4548 0
 4433 0100 0123     		movs	r3, #1
 4434 0102 3360     		str	r3, [r6]
 4435 0104 02E0     		b	.L373
 4436              	.L378:
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4437              		.loc 1 4555 0
 4438 0106 0122     		movs	r2, #1
 4439 0108 084B     		ldr	r3, .L382+20
 4440 010a 1A60     		str	r2, [r3]
 4441              	.L373:
 4442              	.LVL356:
 4443              	.LBB172:
 4444              	.LBB173:
 4445              		.loc 2 275 0
 4446              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4447 010c 87F31188 			msr basepri, r7	
 4448              	@ 0 "" 2
 4449              		.thumb
 4450              	.LBE173:
 4451              	.LBE172:
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4452              		.loc 1 4567 0
 4453 0110 2846     		mov	r0, r5
 4454 0112 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4455              	.LVL357:
 4456              	.L383:
 4457 0116 00BF     		.align	2
 4458              	.L382:
 4459 0118 00000000 		.word	.LANCHOR16
 4460 011c 00000000 		.word	.LANCHOR13
 4461 0120 00000000 		.word	.LANCHOR4
ARM GAS  /tmp/ccLSYPfk.s 			page 176


 4462 0124 00000000 		.word	.LANCHOR1
 4463 0128 00000000 		.word	.LANCHOR10
 4464 012c 00000000 		.word	.LANCHOR20
 4465              		.cfi_endproc
 4466              	.LFE183:
 4468              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4469              		.align	2
 4470              		.global	vTaskNotifyGiveFromISR
 4471              		.thumb
 4472              		.thumb_func
 4474              	vTaskNotifyGiveFromISR:
 4475              	.LFB184:
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4476              		.loc 1 4575 0
 4477              		.cfi_startproc
 4478              		@ args = 0, pretend = 0, frame = 0
 4479              		@ frame_needed = 0, uses_anonymous_args = 0
 4480              	.LVL358:
 4481 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4482              	.LCFI41:
 4483              		.cfi_def_cfa_offset 24
 4484              		.cfi_offset 3, -24
 4485              		.cfi_offset 4, -20
 4486              		.cfi_offset 5, -16
 4487              		.cfi_offset 6, -12
 4488              		.cfi_offset 7, -8
 4489              		.cfi_offset 14, -4
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4490              		.loc 1 4580 0
 4491 0002 50B9     		cbnz	r0, .L385
 4492              	.LBB174:
 4493              	.LBB175:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4494              		.loc 2 237 0
 4495              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4496 0004 4FF05003 			mov r3, #80												
 4497 0008 72B6     		cpsid i													
 4498 000a 83F31188 		msr basepri, r3											
 4499 000e BFF36F8F 		isb														
 4500 0012 BFF34F8F 		dsb														
 4501 0016 62B6     		cpsie i													
 4502              	
 4503              	@ 0 "" 2
 4504              	.LVL359:
 4505              		.thumb
 4506              	.L386:
 4507              	.LBE175:
 4508              	.LBE174:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4509              		.loc 1 4580 0 discriminator 1
 4510 0018 FEE7     		b	.L386
 4511              	.L385:
 4512 001a 0446     		mov	r4, r0
 4513 001c 0D46     		mov	r5, r1
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4514              		.loc 1 4598 0
 4515 001e FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  /tmp/ccLSYPfk.s 			page 177


 4516              	.LVL360:
 4517              	.LBB176:
 4518              	.LBB177:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4519              		.loc 2 255 0
 4520              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4521 0022 EFF31187 			mrs r7, basepri											
 4522 0026 4FF05003 		mov r3, #80												
 4523 002a 72B6     		cpsid i													
 4524 002c 83F31188 		msr basepri, r3											
 4525 0030 BFF36F8F 		isb														
 4526 0034 BFF34F8F 		dsb														
 4527 0038 62B6     		cpsie i													
 4528              	
 4529              	@ 0 "" 2
 4530              	.LVL361:
 4531              		.thumb
 4532              	.LBE177:
 4533              	.LBE176:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4534              		.loc 1 4604 0
 4535 003a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4536 003e DBB2     		uxtb	r3, r3
 4537              	.LVL362:
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4538              		.loc 1 4605 0
 4539 0040 0222     		movs	r2, #2
 4540 0042 84F85020 		strb	r2, [r4, #80]
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4541              		.loc 1 4609 0
 4542 0046 E26C     		ldr	r2, [r4, #76]
 4543 0048 0132     		adds	r2, r2, #1
 4544 004a E264     		str	r2, [r4, #76]
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4545              		.loc 1 4615 0
 4546 004c 012B     		cmp	r3, #1
 4547 004e 36D1     		bne	.L387
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4548              		.loc 1 4618 0
 4549 0050 A36A     		ldr	r3, [r4, #40]
 4550              	.LVL363:
 4551 0052 53B1     		cbz	r3, .L388
 4552              	.LBB178:
 4553              	.LBB179:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4554              		.loc 2 237 0
 4555              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4556 0054 4FF05003 			mov r3, #80												
 4557 0058 72B6     		cpsid i													
 4558 005a 83F31188 		msr basepri, r3											
 4559 005e BFF36F8F 		isb														
 4560 0062 BFF34F8F 		dsb														
 4561 0066 62B6     		cpsie i													
 4562              	
 4563              	@ 0 "" 2
 4564              	.LVL364:
 4565              		.thumb
ARM GAS  /tmp/ccLSYPfk.s 			page 178


 4566              	.L389:
 4567              	.LBE179:
 4568              	.LBE178:
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4569              		.loc 1 4618 0 discriminator 2
 4570 0068 FEE7     		b	.L389
 4571              	.L388:
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4572              		.loc 1 4620 0
 4573 006a 164B     		ldr	r3, .L394
 4574 006c 1B68     		ldr	r3, [r3]
 4575 006e A3B9     		cbnz	r3, .L390
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4576              		.loc 1 4622 0
 4577 0070 261D     		adds	r6, r4, #4
 4578 0072 3046     		mov	r0, r6
 4579 0074 FFF7FEFF 		bl	uxListRemove
 4580              	.LVL365:
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4581              		.loc 1 4623 0
 4582 0078 E36A     		ldr	r3, [r4, #44]
 4583 007a 0122     		movs	r2, #1
 4584 007c 02FA03F1 		lsl	r1, r2, r3
 4585 0080 1148     		ldr	r0, .L394+4
 4586 0082 0268     		ldr	r2, [r0]
 4587 0084 0A43     		orrs	r2, r2, r1
 4588 0086 0260     		str	r2, [r0]
 4589 0088 03EB8303 		add	r3, r3, r3, lsl #2
 4590 008c 9B00     		lsls	r3, r3, #2
 4591 008e 0F48     		ldr	r0, .L394+8
 4592 0090 1844     		add	r0, r0, r3
 4593 0092 3146     		mov	r1, r6
 4594 0094 FFF7FEFF 		bl	vListInsertEnd
 4595              	.LVL366:
 4596 0098 04E0     		b	.L391
 4597              	.L390:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4598              		.loc 1 4629 0
 4599 009a 0D48     		ldr	r0, .L394+12
 4600 009c 04F11801 		add	r1, r4, #24
 4601 00a0 FFF7FEFF 		bl	vListInsertEnd
 4602              	.LVL367:
 4603              	.L391:
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4604              		.loc 1 4632 0
 4605 00a4 E26A     		ldr	r2, [r4, #44]
 4606 00a6 0B4B     		ldr	r3, .L394+16
 4607 00a8 1B68     		ldr	r3, [r3]
 4608 00aa DB6A     		ldr	r3, [r3, #44]
 4609 00ac 9A42     		cmp	r2, r3
 4610 00ae 06D9     		bls	.L387
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4611              		.loc 1 4636 0
 4612 00b0 15B1     		cbz	r5, .L392
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4613              		.loc 1 4638 0
 4614 00b2 0123     		movs	r3, #1
ARM GAS  /tmp/ccLSYPfk.s 			page 179


 4615 00b4 2B60     		str	r3, [r5]
 4616 00b6 02E0     		b	.L387
 4617              	.L392:
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4618              		.loc 1 4645 0
 4619 00b8 0122     		movs	r2, #1
 4620 00ba 074B     		ldr	r3, .L394+20
 4621 00bc 1A60     		str	r2, [r3]
 4622              	.L387:
 4623              	.LVL368:
 4624              	.LBB180:
 4625              	.LBB181:
 4626              		.loc 2 275 0
 4627              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4628 00be 87F31188 			msr basepri, r7	
 4629              	@ 0 "" 2
 4630              		.thumb
 4631 00c2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4632              	.LVL369:
 4633              	.L395:
 4634              		.align	2
 4635              	.L394:
 4636 00c4 00000000 		.word	.LANCHOR16
 4637 00c8 00000000 		.word	.LANCHOR13
 4638 00cc 00000000 		.word	.LANCHOR4
 4639 00d0 00000000 		.word	.LANCHOR1
 4640 00d4 00000000 		.word	.LANCHOR10
 4641 00d8 00000000 		.word	.LANCHOR20
 4642              	.LBE181:
 4643              	.LBE180:
 4644              		.cfi_endproc
 4645              	.LFE184:
 4647              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4648              		.align	2
 4649              		.global	xTaskNotifyStateClear
 4650              		.thumb
 4651              		.thumb_func
 4653              	xTaskNotifyStateClear:
 4654              	.LFB185:
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4655              		.loc 1 4664 0
 4656              		.cfi_startproc
 4657              		@ args = 0, pretend = 0, frame = 0
 4658              		@ frame_needed = 0, uses_anonymous_args = 0
 4659              	.LVL370:
 4660 0000 10B5     		push	{r4, lr}
 4661              	.LCFI42:
 4662              		.cfi_def_cfa_offset 8
 4663              		.cfi_offset 4, -8
 4664              		.cfi_offset 14, -4
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4665              		.loc 1 4670 0
 4666 0002 0446     		mov	r4, r0
 4667 0004 08B9     		cbnz	r0, .L397
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4668              		.loc 1 4670 0 is_stmt 0 discriminator 1
 4669 0006 094B     		ldr	r3, .L401
ARM GAS  /tmp/ccLSYPfk.s 			page 180


 4670 0008 1C68     		ldr	r4, [r3]
 4671              	.LVL371:
 4672              	.L397:
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4673              		.loc 1 4672 0 is_stmt 1 discriminator 4
 4674 000a FFF7FEFF 		bl	vPortEnterCritical
 4675              	.LVL372:
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4676              		.loc 1 4674 0 discriminator 4
 4677 000e 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4678 0012 DBB2     		uxtb	r3, r3
 4679 0014 022B     		cmp	r3, #2
 4680 0016 04D1     		bne	.L399
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 4681              		.loc 1 4676 0
 4682 0018 0023     		movs	r3, #0
 4683 001a 84F85030 		strb	r3, [r4, #80]
 4684              	.LVL373:
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4685              		.loc 1 4677 0
 4686 001e 0124     		movs	r4, #1
 4687              	.LVL374:
 4688 0020 00E0     		b	.L398
 4689              	.LVL375:
 4690              	.L399:
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4691              		.loc 1 4681 0
 4692 0022 0024     		movs	r4, #0
 4693              	.LVL376:
 4694              	.L398:
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4695              		.loc 1 4684 0
 4696 0024 FFF7FEFF 		bl	vPortExitCritical
 4697              	.LVL377:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4698              		.loc 1 4687 0
 4699 0028 2046     		mov	r0, r4
 4700 002a 10BD     		pop	{r4, pc}
 4701              	.LVL378:
 4702              	.L402:
 4703              		.align	2
 4704              	.L401:
 4705 002c 00000000 		.word	.LANCHOR10
 4706              		.cfi_endproc
 4707              	.LFE185:
 4709              		.global	pxCurrentTCB
 4710              		.section	.bss.xNumOfOverflows,"aw",%nobits
 4711              		.align	2
 4712              		.set	.LANCHOR18,. + 0
 4715              	xNumOfOverflows:
 4716 0000 00000000 		.space	4
 4717              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 4718              		.align	2
 4719              		.set	.LANCHOR2,. + 0
 4722              	pxDelayedTaskList:
 4723 0000 00000000 		.space	4
 4724              		.section	.bss.xSchedulerRunning,"aw",%nobits
ARM GAS  /tmp/ccLSYPfk.s 			page 181


 4725              		.align	2
 4726              		.set	.LANCHOR11,. + 0
 4729              	xSchedulerRunning:
 4730 0000 00000000 		.space	4
 4731              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 4732              		.align	2
 4733              		.set	.LANCHOR7,. + 0
 4736              	xTasksWaitingTermination:
 4737 0000 00000000 		.space	20
 4737      00000000 
 4737      00000000 
 4737      00000000 
 4737      00000000 
 4738              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 4739              		.align	2
 4740              		.set	.LANCHOR8,. + 0
 4743              	pxOverflowDelayedTaskList:
 4744 0000 00000000 		.space	4
 4745              		.section	.bss.uxPendedTicks,"aw",%nobits
 4746              		.align	2
 4747              		.set	.LANCHOR19,. + 0
 4750              	uxPendedTicks:
 4751 0000 00000000 		.space	4
 4752              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 4753              		.align	2
 4754              		.set	.LANCHOR4,. + 0
 4757              	pxReadyTasksLists:
 4758 0000 00000000 		.space	140
 4758      00000000 
 4758      00000000 
 4758      00000000 
 4758      00000000 
 4759              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 4760              		.align	2
 4761              		.set	.LANCHOR16,. + 0
 4764              	uxSchedulerSuspended:
 4765 0000 00000000 		.space	4
 4766              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 4767              		.align	2
 4768              		.set	.LANCHOR15,. + 0
 4771              	uxDeletedTasksWaitingCleanUp:
 4772 0000 00000000 		.space	4
 4773              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 4774              		.align	2
 4775              		.set	.LANCHOR9,. + 0
 4778              	uxCurrentNumberOfTasks:
 4779 0000 00000000 		.space	4
 4780              		.section	.bss.pxCurrentTCB,"aw",%nobits
 4781              		.align	2
 4782              		.set	.LANCHOR10,. + 0
 4785              	pxCurrentTCB:
 4786 0000 00000000 		.space	4
 4787              		.section	.bss.xPendingReadyList,"aw",%nobits
 4788              		.align	2
 4789              		.set	.LANCHOR1,. + 0
 4792              	xPendingReadyList:
 4793 0000 00000000 		.space	20
ARM GAS  /tmp/ccLSYPfk.s 			page 182


 4793      00000000 
 4793      00000000 
 4793      00000000 
 4793      00000000 
 4794              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 4795              		.align	2
 4796              		.set	.LANCHOR17,. + 0
 4799              	xIdleTaskHandle:
 4800 0000 00000000 		.space	4
 4801              		.section	.bss.xTickCount,"aw",%nobits
 4802              		.align	2
 4803              		.set	.LANCHOR14,. + 0
 4806              	xTickCount:
 4807 0000 00000000 		.space	4
 4808              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 4809              		.align	2
 4810              		.set	.LANCHOR3,. + 0
 4813              	xNextTaskUnblockTime:
 4814 0000 00000000 		.space	4
 4815              		.section	.rodata.str1.4,"aMS",%progbits,1
 4816              		.align	2
 4817              	.LC0:
 4818 0000 49444C45 		.ascii	"IDLE\000"
 4818      00
 4819              		.section	.bss.uxTaskNumber,"aw",%nobits
 4820              		.align	2
 4821              		.set	.LANCHOR12,. + 0
 4824              	uxTaskNumber:
 4825 0000 00000000 		.space	4
 4826              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 4827              		.align	2
 4828              		.set	.LANCHOR5,. + 0
 4831              	xDelayedTaskList1:
 4832 0000 00000000 		.space	20
 4832      00000000 
 4832      00000000 
 4832      00000000 
 4832      00000000 
 4833              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 4834              		.align	2
 4835              		.set	.LANCHOR6,. + 0
 4838              	xDelayedTaskList2:
 4839 0000 00000000 		.space	20
 4839      00000000 
 4839      00000000 
 4839      00000000 
 4839      00000000 
 4840              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 4841              		.align	2
 4842              		.set	.LANCHOR0,. + 0
 4845              	xSuspendedTaskList:
 4846 0000 00000000 		.space	20
 4846      00000000 
 4846      00000000 
 4846      00000000 
 4846      00000000 
 4847              		.section	.bss.uxTopReadyPriority,"aw",%nobits
ARM GAS  /tmp/ccLSYPfk.s 			page 183


 4848              		.align	2
 4849              		.set	.LANCHOR13,. + 0
 4852              	uxTopReadyPriority:
 4853 0000 00000000 		.space	4
 4854              		.section	.bss.xYieldPending,"aw",%nobits
 4855              		.align	2
 4856              		.set	.LANCHOR20,. + 0
 4859              	xYieldPending:
 4860 0000 00000000 		.space	4
 4861              		.text
 4862              	.Letext0:
 4863              		.file 3 "/home/reglisse/opt/gcc-arm-none-eabi-4_9-2015q3/lib/gcc/arm-none-eabi/4.9.3/include/stdde
 4864              		.file 4 "/home/reglisse/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/machine/_default_ty
 4865              		.file 5 "/home/reglisse/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/sys/_stdint.h"
 4866              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 4867              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 4868              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 4869              		.file 9 "Drivers/CMSIS/Include/core_cm7.h"
 4870              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccLSYPfk.s 			page 184


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/ccLSYPfk.s:20     .text.prvTaskIsTaskSuspended:00000000 $t
     /tmp/ccLSYPfk.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
     /tmp/ccLSYPfk.s:104    .text.prvTaskIsTaskSuspended:00000048 $d
     /tmp/ccLSYPfk.s:110    .text.prvResetNextTaskUnblockTime:00000000 $t
     /tmp/ccLSYPfk.s:114    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
     /tmp/ccLSYPfk.s:154    .text.prvResetNextTaskUnblockTime:0000002c $d
     /tmp/ccLSYPfk.s:160    .text.prvDeleteTCB:00000000 $t
     /tmp/ccLSYPfk.s:164    .text.prvDeleteTCB:00000000 prvDeleteTCB
     /tmp/ccLSYPfk.s:191    .text.prvInitialiseNewTask:00000000 $t
     /tmp/ccLSYPfk.s:195    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
     /tmp/ccLSYPfk.s:303    .text.prvInitialiseTaskLists:00000000 $t
     /tmp/ccLSYPfk.s:307    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
     /tmp/ccLSYPfk.s:373    .text.prvInitialiseTaskLists:00000048 $d
     /tmp/ccLSYPfk.s:385    .text.prvAddNewTaskToReadyList:00000000 $t
     /tmp/ccLSYPfk.s:389    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
     /tmp/ccLSYPfk.s:492    .text.prvAddNewTaskToReadyList:0000008c $d
     /tmp/ccLSYPfk.s:503    .text.prvAddCurrentTaskToDelayedList:00000000 $t
     /tmp/ccLSYPfk.s:507    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
     /tmp/ccLSYPfk.s:608    .text.prvAddCurrentTaskToDelayedList:00000084 $d
     /tmp/ccLSYPfk.s:619    .text.xTaskCreate:00000000 $t
     /tmp/ccLSYPfk.s:624    .text.xTaskCreate:00000000 xTaskCreate
     /tmp/ccLSYPfk.s:721    .text.vTaskDelete:00000000 $t
     /tmp/ccLSYPfk.s:726    .text.vTaskDelete:00000000 vTaskDelete
     /tmp/ccLSYPfk.s:868    .text.vTaskDelete:000000b8 $d
     /tmp/ccLSYPfk.s:882    .text.uxTaskPriorityGet:00000000 $t
     /tmp/ccLSYPfk.s:887    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
     /tmp/ccLSYPfk.s:923    .text.uxTaskPriorityGet:00000018 $d
     /tmp/ccLSYPfk.s:928    .text.uxTaskPriorityGetFromISR:00000000 $t
     /tmp/ccLSYPfk.s:933    .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
     /tmp/ccLSYPfk.s:991    .text.uxTaskPriorityGetFromISR:00000030 $d
     /tmp/ccLSYPfk.s:996    .text.vTaskPrioritySet:00000000 $t
     /tmp/ccLSYPfk.s:1001   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
     /tmp/ccLSYPfk.s:1193   .text.vTaskPrioritySet:000000e8 $d
     /tmp/ccLSYPfk.s:1201   .text.vTaskResume:00000000 $t
     /tmp/ccLSYPfk.s:1206   .text.vTaskResume:00000000 vTaskResume
     /tmp/ccLSYPfk.s:1307   .text.vTaskResume:0000007c $d
     /tmp/ccLSYPfk.s:1315   .text.xTaskResumeFromISR:00000000 $t
     /tmp/ccLSYPfk.s:1320   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
     /tmp/ccLSYPfk.s:1455   .text.xTaskResumeFromISR:0000009c $d
     /tmp/ccLSYPfk.s:1464   .text.vTaskStartScheduler:00000000 $t
     /tmp/ccLSYPfk.s:1469   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
     /tmp/ccLSYPfk.s:1562   .text.vTaskStartScheduler:0000006c $d
     /tmp/ccLSYPfk.s:2393   .text.prvIdleTask:00000000 prvIdleTask
     /tmp/ccLSYPfk.s:1572   .text.vTaskEndScheduler:00000000 $t
     /tmp/ccLSYPfk.s:1577   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
     /tmp/ccLSYPfk.s:1615   .text.vTaskEndScheduler:00000024 $d
     /tmp/ccLSYPfk.s:1620   .text.vTaskSuspendAll:00000000 $t
     /tmp/ccLSYPfk.s:1625   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
     /tmp/ccLSYPfk.s:1641   .text.vTaskSuspendAll:0000000c $d
     /tmp/ccLSYPfk.s:1646   .text.xTaskGetTickCount:00000000 $t
     /tmp/ccLSYPfk.s:1651   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
     /tmp/ccLSYPfk.s:1667   .text.xTaskGetTickCount:00000008 $d
     /tmp/ccLSYPfk.s:1672   .text.xTaskGetTickCountFromISR:00000000 $t
     /tmp/ccLSYPfk.s:1677   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
     /tmp/ccLSYPfk.s:1700   .text.xTaskGetTickCountFromISR:0000000c $d
ARM GAS  /tmp/ccLSYPfk.s 			page 185


     /tmp/ccLSYPfk.s:1705   .text.uxTaskGetNumberOfTasks:00000000 $t
     /tmp/ccLSYPfk.s:1710   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
     /tmp/ccLSYPfk.s:1725   .text.uxTaskGetNumberOfTasks:00000008 $d
     /tmp/ccLSYPfk.s:1730   .text.pcTaskGetName:00000000 $t
     /tmp/ccLSYPfk.s:1735   .text.pcTaskGetName:00000000 pcTaskGetName
     /tmp/ccLSYPfk.s:1780   .text.pcTaskGetName:00000028 $d
     /tmp/ccLSYPfk.s:1785   .text.xTaskIncrementTick:00000000 $t
     /tmp/ccLSYPfk.s:1790   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
     /tmp/ccLSYPfk.s:2004   .text.xTaskIncrementTick:000000fc $d
     /tmp/ccLSYPfk.s:2019   .text.xTaskResumeAll:00000000 $t
     /tmp/ccLSYPfk.s:2024   .text.xTaskResumeAll:00000000 xTaskResumeAll
     /tmp/ccLSYPfk.s:2208   .text.xTaskResumeAll:000000d8 $d
     /tmp/ccLSYPfk.s:2221   .text.vTaskDelay:00000000 $t
     /tmp/ccLSYPfk.s:2226   .text.vTaskDelay:00000000 vTaskDelay
     /tmp/ccLSYPfk.s:2302   .text.vTaskDelay:0000004c $d
     /tmp/ccLSYPfk.s:2308   .text.prvCheckTasksWaitingTermination:00000000 $t
     /tmp/ccLSYPfk.s:2312   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
     /tmp/ccLSYPfk.s:2382   .text.prvCheckTasksWaitingTermination:00000048 $d
     /tmp/ccLSYPfk.s:2389   .text.prvIdleTask:00000000 $t
     /tmp/ccLSYPfk.s:2431   .text.prvIdleTask:00000020 $d
     /tmp/ccLSYPfk.s:2437   .text.vTaskSwitchContext:00000000 $t
     /tmp/ccLSYPfk.s:2442   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
     /tmp/ccLSYPfk.s:2561   .text.vTaskSwitchContext:00000088 $d
     /tmp/ccLSYPfk.s:2570   .text.vTaskSuspend:00000000 $t
     /tmp/ccLSYPfk.s:2575   .text.vTaskSuspend:00000000 vTaskSuspend
     /tmp/ccLSYPfk.s:2721   .text.vTaskSuspend:000000b8 $d
     /tmp/ccLSYPfk.s:2733   .text.vTaskPlaceOnEventList:00000000 $t
     /tmp/ccLSYPfk.s:2738   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
     /tmp/ccLSYPfk.s:2791   .text.vTaskPlaceOnEventList:00000030 $d
     /tmp/ccLSYPfk.s:2796   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
     /tmp/ccLSYPfk.s:2801   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccLSYPfk.s:2890   .text.vTaskPlaceOnUnorderedEventList:0000005c $d
     /tmp/ccLSYPfk.s:2896   .text.xTaskRemoveFromEventList:00000000 $t
     /tmp/ccLSYPfk.s:2901   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
     /tmp/ccLSYPfk.s:3003   .text.xTaskRemoveFromEventList:00000078 $d
     /tmp/ccLSYPfk.s:3013   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
     /tmp/ccLSYPfk.s:3018   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
     /tmp/ccLSYPfk.s:3131   .text.xTaskRemoveFromUnorderedEventList:00000084 $d
     /tmp/ccLSYPfk.s:3140   .text.vTaskSetTimeOutState:00000000 $t
     /tmp/ccLSYPfk.s:3145   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
     /tmp/ccLSYPfk.s:3187   .text.vTaskSetTimeOutState:00000028 $d
     /tmp/ccLSYPfk.s:3193   .text.xTaskCheckForTimeOut:00000000 $t
     /tmp/ccLSYPfk.s:3198   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
     /tmp/ccLSYPfk.s:3327   .text.xTaskCheckForTimeOut:00000080 $d
     /tmp/ccLSYPfk.s:3333   .text.vTaskMissedYield:00000000 $t
     /tmp/ccLSYPfk.s:3338   .text.vTaskMissedYield:00000000 vTaskMissedYield
     /tmp/ccLSYPfk.s:3353   .text.vTaskMissedYield:00000008 $d
     /tmp/ccLSYPfk.s:3358   .text.xTaskGetCurrentTaskHandle:00000000 $t
     /tmp/ccLSYPfk.s:3363   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
     /tmp/ccLSYPfk.s:3379   .text.xTaskGetCurrentTaskHandle:00000008 $d
     /tmp/ccLSYPfk.s:3384   .text.xTaskGetSchedulerState:00000000 $t
     /tmp/ccLSYPfk.s:3389   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
     /tmp/ccLSYPfk.s:3420   .text.xTaskGetSchedulerState:00000018 $d
     /tmp/ccLSYPfk.s:3426   .text.vTaskPriorityInherit:00000000 $t
     /tmp/ccLSYPfk.s:3431   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
     /tmp/ccLSYPfk.s:3548   .text.vTaskPriorityInherit:0000009c $d
     /tmp/ccLSYPfk.s:3555   .text.xTaskPriorityDisinherit:00000000 $t
ARM GAS  /tmp/ccLSYPfk.s 			page 186


     /tmp/ccLSYPfk.s:3560   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
     /tmp/ccLSYPfk.s:3718   .text.xTaskPriorityDisinherit:000000b0 $d
     /tmp/ccLSYPfk.s:3725   .text.uxTaskResetEventItemValue:00000000 $t
     /tmp/ccLSYPfk.s:3730   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
     /tmp/ccLSYPfk.s:3753   .text.uxTaskResetEventItemValue:00000014 $d
     /tmp/ccLSYPfk.s:3758   .text.pvTaskIncrementMutexHeldCount:00000000 $t
     /tmp/ccLSYPfk.s:3763   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
     /tmp/ccLSYPfk.s:3789   .text.pvTaskIncrementMutexHeldCount:00000018 $d
     /tmp/ccLSYPfk.s:3794   .text.ulTaskNotifyTake:00000000 $t
     /tmp/ccLSYPfk.s:3799   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
     /tmp/ccLSYPfk.s:3890   .text.ulTaskNotifyTake:0000006c $d
     /tmp/ccLSYPfk.s:3896   .text.xTaskNotifyWait:00000000 $t
     /tmp/ccLSYPfk.s:3901   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
     /tmp/ccLSYPfk.s:4013   .text.xTaskNotifyWait:00000090 $d
     /tmp/ccLSYPfk.s:4019   .text.xTaskGenericNotify:00000000 $t
     /tmp/ccLSYPfk.s:4024   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
     /tmp/ccLSYPfk.s:4091   .text.xTaskGenericNotify:00000042 $d
     /tmp/ccLSYPfk.s:4095   .text.xTaskGenericNotify:00000046 $t
     /tmp/ccLSYPfk.s:4215   .text.xTaskGenericNotify:000000dc $d
     /tmp/ccLSYPfk.s:4223   .text.xTaskGenericNotifyFromISR:00000000 $t
     /tmp/ccLSYPfk.s:4228   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
     /tmp/ccLSYPfk.s:4315   .text.xTaskGenericNotifyFromISR:00000064 $d
     /tmp/ccLSYPfk.s:4319   .text.xTaskGenericNotifyFromISR:00000068 $t
     /tmp/ccLSYPfk.s:4459   .text.xTaskGenericNotifyFromISR:00000118 $d
     /tmp/ccLSYPfk.s:4469   .text.vTaskNotifyGiveFromISR:00000000 $t
     /tmp/ccLSYPfk.s:4474   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
     /tmp/ccLSYPfk.s:4636   .text.vTaskNotifyGiveFromISR:000000c4 $d
     /tmp/ccLSYPfk.s:4648   .text.xTaskNotifyStateClear:00000000 $t
     /tmp/ccLSYPfk.s:4653   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
     /tmp/ccLSYPfk.s:4705   .text.xTaskNotifyStateClear:0000002c $d
     /tmp/ccLSYPfk.s:4785   .bss.pxCurrentTCB:00000000 pxCurrentTCB
     /tmp/ccLSYPfk.s:4711   .bss.xNumOfOverflows:00000000 $d
     /tmp/ccLSYPfk.s:4715   .bss.xNumOfOverflows:00000000 xNumOfOverflows
     /tmp/ccLSYPfk.s:4718   .bss.pxDelayedTaskList:00000000 $d
     /tmp/ccLSYPfk.s:4722   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
     /tmp/ccLSYPfk.s:4725   .bss.xSchedulerRunning:00000000 $d
     /tmp/ccLSYPfk.s:4729   .bss.xSchedulerRunning:00000000 xSchedulerRunning
     /tmp/ccLSYPfk.s:4732   .bss.xTasksWaitingTermination:00000000 $d
     /tmp/ccLSYPfk.s:4736   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
     /tmp/ccLSYPfk.s:4739   .bss.pxOverflowDelayedTaskList:00000000 $d
     /tmp/ccLSYPfk.s:4743   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
     /tmp/ccLSYPfk.s:4746   .bss.uxPendedTicks:00000000 $d
     /tmp/ccLSYPfk.s:4750   .bss.uxPendedTicks:00000000 uxPendedTicks
     /tmp/ccLSYPfk.s:4753   .bss.pxReadyTasksLists:00000000 $d
     /tmp/ccLSYPfk.s:4757   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
     /tmp/ccLSYPfk.s:4760   .bss.uxSchedulerSuspended:00000000 $d
     /tmp/ccLSYPfk.s:4764   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
     /tmp/ccLSYPfk.s:4767   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
     /tmp/ccLSYPfk.s:4771   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccLSYPfk.s:4774   .bss.uxCurrentNumberOfTasks:00000000 $d
     /tmp/ccLSYPfk.s:4778   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
     /tmp/ccLSYPfk.s:4781   .bss.pxCurrentTCB:00000000 $d
     /tmp/ccLSYPfk.s:4788   .bss.xPendingReadyList:00000000 $d
     /tmp/ccLSYPfk.s:4792   .bss.xPendingReadyList:00000000 xPendingReadyList
     /tmp/ccLSYPfk.s:4795   .bss.xIdleTaskHandle:00000000 $d
     /tmp/ccLSYPfk.s:4799   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
     /tmp/ccLSYPfk.s:4802   .bss.xTickCount:00000000 $d
ARM GAS  /tmp/ccLSYPfk.s 			page 187


     /tmp/ccLSYPfk.s:4806   .bss.xTickCount:00000000 xTickCount
     /tmp/ccLSYPfk.s:4809   .bss.xNextTaskUnblockTime:00000000 $d
     /tmp/ccLSYPfk.s:4813   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
     /tmp/ccLSYPfk.s:4816   .rodata.str1.4:00000000 $d
     /tmp/ccLSYPfk.s:4820   .bss.uxTaskNumber:00000000 $d
     /tmp/ccLSYPfk.s:4824   .bss.uxTaskNumber:00000000 uxTaskNumber
     /tmp/ccLSYPfk.s:4827   .bss.xDelayedTaskList1:00000000 $d
     /tmp/ccLSYPfk.s:4831   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
     /tmp/ccLSYPfk.s:4834   .bss.xDelayedTaskList2:00000000 $d
     /tmp/ccLSYPfk.s:4838   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
     /tmp/ccLSYPfk.s:4841   .bss.xSuspendedTaskList:00000000 $d
     /tmp/ccLSYPfk.s:4845   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
     /tmp/ccLSYPfk.s:4848   .bss.uxTopReadyPriority:00000000 $d
     /tmp/ccLSYPfk.s:4852   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
     /tmp/ccLSYPfk.s:4855   .bss.xYieldPending:00000000 $d
     /tmp/ccLSYPfk.s:4859   .bss.xYieldPending:00000000 xYieldPending
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
