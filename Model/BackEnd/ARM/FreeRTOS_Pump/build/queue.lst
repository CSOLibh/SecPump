ARM GAS  /tmp/cc81O3qB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvIsQueueFull,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvIsQueueFull:
  25              	.LFB160:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/queue.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  /tmp/cc81O3qB.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  71:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <string.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "stm32f7xx_hal.h"
  79:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "task.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "queue.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  84:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  85:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  86:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  87:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  88:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  89:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
ARM GAS  /tmp/cc81O3qB.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  91:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  92:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  94:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  95:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  96:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  98:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  99:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
 100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
 107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
 108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** structure member). */
 109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
 110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
 111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** zero. */
 115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
 119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
 121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #else
 123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 127:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
 128:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 129:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 130:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
 132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} u;
 142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
ARM GAS  /tmp/cc81O3qB.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } xQUEUE;
 167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 175:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 176:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 177:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	more user friendly. */
 183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	debuggers. */
 192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 202:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 203:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
ARM GAS  /tmp/cc81O3qB.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 205:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 206:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 207:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 208:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static void prvUnlockQueue( Queue_t * const pxQueue );
 210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 212:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 213:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 214:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 215:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue );
 217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 219:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 220:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 221:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static BaseType_t prvIsQueueFull( const Queue_t *pxQueue );
 224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 227:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * back of the queue.
 228:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvIt
 230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 233:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffe
 235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, c
 242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 245:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 246:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
 247:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBase
 249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 251:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 252:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 253:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * as a mutex.
 254:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_FUNCTION static void prvInitialiseMutex( Queue_t *pxNewQueue );
 257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc81O3qB.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 262:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 263:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{														\
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}														\
 277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/cc81O3qB.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	versions. */
 329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return pdPASS;
 330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		supplied. */
 343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		but is already set. */
 363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				later deleted. */
 372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
ARM GAS  /tmp/cc81O3qB.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be in the queue at any time. */
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			storage area. */
 413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				deleted. */
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc81O3qB.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
 448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	defined. */
 455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
ARM GAS  /tmp/cc81O3qB.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
ARM GAS  /tmp/cc81O3qB.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
ARM GAS  /tmp/cc81O3qB.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder. */
 615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			before reaching here. */
 652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/cc81O3qB.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/cc81O3qB.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
 744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue is full. */
 751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
ARM GAS  /tmp/cc81O3qB.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							takes care of that. */
 817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
 830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
ARM GAS  /tmp/cc81O3qB.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the function. */
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				remove this task from the event	list again - but as the
ARM GAS  /tmp/cc81O3qB.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
 905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
ARM GAS  /tmp/cc81O3qB.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
 953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
ARM GAS  /tmp/cc81O3qB.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc81O3qB.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
1084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc81O3qB.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		space'. */
1119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
ARM GAS  /tmp/cc81O3qB.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
ARM GAS  /tmp/cc81O3qB.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Remember the read position in case the queue is only being
1268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				peeked. */
1269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Actually removing data, not just peeking. */
1278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* Record the information required to implement
1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							priority inheritance should it become necessary. */
1286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
ARM GAS  /tmp/cc81O3qB.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The data is not being removed, so reset the read
1316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pointer. */
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					any other tasks waiting for the data. */
1321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/cc81O3qB.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
ARM GAS  /tmp/cc81O3qB.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
1412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
ARM GAS  /tmp/cc81O3qB.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			locked. */
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						force a context switch. */
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
ARM GAS  /tmp/cc81O3qB.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
ARM GAS  /tmp/cc81O3qB.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t *pxQueue;
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
ARM GAS  /tmp/cc81O3qB.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		again. */
1643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
1652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#else
1659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
1663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
ARM GAS  /tmp/cc81O3qB.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
1701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
1704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/cc81O3qB.s 			page 32


1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
1751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				correct. */
1758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
1759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
1783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
ARM GAS  /tmp/cc81O3qB.s 			page 33


1800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	updated. */
1803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
1806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
1809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
1812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						A context switch is required. */
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
1831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
1832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					suspended. */
1833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
1840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						break;
1849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
ARM GAS  /tmp/cc81O3qB.s 			page 34


1857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
1861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						a context switch is required. */
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					break;
1872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--cTxLock;
1877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
1889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--cRxLock;
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
1906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc81O3qB.s 			page 35


1914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
1928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
1944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
1946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
1948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  27              		.loc 1 1955 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
1956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  38              		.loc 1 1958 0
ARM GAS  /tmp/cc81O3qB.s 			page 36


  39 0004 FFF7FEFF 		bl	vPortEnterCritical
  40              	.LVL1:
1959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  41              		.loc 1 1960 0
  42 0008 A26B     		ldr	r2, [r4, #56]
  43 000a E36B     		ldr	r3, [r4, #60]
  44 000c 9A42     		cmp	r2, r3
  45 000e 01D1     		bne	.L3
1961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
  46              		.loc 1 1962 0
  47 0010 0124     		movs	r4, #1
  48              	.LVL2:
  49 0012 00E0     		b	.L2
  50              	.LVL3:
  51              	.L3:
1963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
  52              		.loc 1 1966 0
  53 0014 0024     		movs	r4, #0
  54              	.LVL4:
  55              	.L2:
1967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
  56              		.loc 1 1969 0
  57 0016 FFF7FEFF 		bl	vPortExitCritical
  58              	.LVL5:
1970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
  59              		.loc 1 1972 0
  60 001a 2046     		mov	r0, r4
  61 001c 10BD     		pop	{r4, pc}
  62              		.cfi_endproc
  63              	.LFE160:
  65 001e 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
  66              		.align	2
  67              		.thumb
  68              		.thumb_func
  70              	prvIsQueueEmpty:
  71              	.LFB158:
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
  72              		.loc 1 1916 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              	.LVL6:
  77 0000 10B5     		push	{r4, lr}
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 4, -8
  81              		.cfi_offset 14, -4
  82 0002 0446     		mov	r4, r0
ARM GAS  /tmp/cc81O3qB.s 			page 37


1919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  83              		.loc 1 1919 0
  84 0004 FFF7FEFF 		bl	vPortEnterCritical
  85              	.LVL7:
1921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
  86              		.loc 1 1921 0
  87 0008 A36B     		ldr	r3, [r4, #56]
  88 000a 0BB9     		cbnz	r3, .L7
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
  89              		.loc 1 1923 0
  90 000c 0124     		movs	r4, #1
  91              	.LVL8:
  92 000e 00E0     		b	.L6
  93              	.LVL9:
  94              	.L7:
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
  95              		.loc 1 1927 0
  96 0010 0024     		movs	r4, #0
  97              	.LVL10:
  98              	.L6:
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  99              		.loc 1 1930 0
 100 0012 FFF7FEFF 		bl	vPortExitCritical
 101              	.LVL11:
1933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 102              		.loc 1 1933 0
 103 0016 2046     		mov	r0, r4
 104 0018 10BD     		pop	{r4, pc}
 105              		.cfi_endproc
 106              	.LFE158:
 108 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 109              		.align	2
 110              		.thumb
 111              		.thumb_func
 113              	prvCopyDataToQueue:
 114              	.LFB155:
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 115              		.loc 1 1699 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              	.LVL12:
 120 0000 70B5     		push	{r4, r5, r6, lr}
 121              	.LCFI2:
 122              		.cfi_def_cfa_offset 16
 123              		.cfi_offset 4, -16
 124              		.cfi_offset 5, -12
 125              		.cfi_offset 6, -8
 126              		.cfi_offset 14, -4
 127 0002 0446     		mov	r4, r0
 128 0004 1646     		mov	r6, r2
 129              	.LVL13:
1705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 130              		.loc 1 1705 0
 131 0006 856B     		ldr	r5, [r0, #56]
 132              	.LVL14:
1707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/cc81O3qB.s 			page 38


 133              		.loc 1 1707 0
 134 0008 026C     		ldr	r2, [r0, #64]
 135              	.LVL15:
 136 000a 3AB9     		cbnz	r2, .L10
1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 137              		.loc 1 1711 0
 138 000c 0368     		ldr	r3, [r0]
 139 000e 43BB     		cbnz	r3, .L14
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 140              		.loc 1 1714 0
 141 0010 4068     		ldr	r0, [r0, #4]
 142              	.LVL16:
 143 0012 FFF7FEFF 		bl	xTaskPriorityDisinherit
 144              	.LVL17:
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 145              		.loc 1 1715 0
 146 0016 0023     		movs	r3, #0
 147 0018 6360     		str	r3, [r4, #4]
 148 001a 29E0     		b	.L11
 149              	.LVL18:
 150              	.L10:
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 151              		.loc 1 1724 0
 152 001c 6EB9     		cbnz	r6, .L12
1726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 153              		.loc 1 1726 0
 154 001e 8068     		ldr	r0, [r0, #8]
 155              	.LVL19:
 156 0020 FFF7FEFF 		bl	memcpy
 157              	.LVL20:
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 158              		.loc 1 1727 0
 159 0024 A268     		ldr	r2, [r4, #8]
 160 0026 236C     		ldr	r3, [r4, #64]
 161 0028 1344     		add	r3, r3, r2
 162 002a A360     		str	r3, [r4, #8]
1728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 163              		.loc 1 1728 0
 164 002c 6268     		ldr	r2, [r4, #4]
 165 002e 9342     		cmp	r3, r2
 166 0030 19D3     		bcc	.L15
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 167              		.loc 1 1730 0
 168 0032 2368     		ldr	r3, [r4]
 169 0034 A360     		str	r3, [r4, #8]
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 170              		.loc 1 1700 0
 171 0036 0020     		movs	r0, #0
 172 0038 1AE0     		b	.L11
 173              	.LVL21:
 174              	.L12:
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 175              		.loc 1 1739 0
 176 003a C068     		ldr	r0, [r0, #12]
 177              	.LVL22:
 178 003c FFF7FEFF 		bl	memcpy
 179              	.LVL23:
ARM GAS  /tmp/cc81O3qB.s 			page 39


1740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 180              		.loc 1 1740 0
 181 0040 236C     		ldr	r3, [r4, #64]
 182 0042 5B42     		negs	r3, r3
 183 0044 E268     		ldr	r2, [r4, #12]
 184 0046 1A44     		add	r2, r2, r3
 185 0048 E260     		str	r2, [r4, #12]
1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 186              		.loc 1 1741 0
 187 004a 2168     		ldr	r1, [r4]
 188 004c 8A42     		cmp	r2, r1
 189 004e 02D2     		bcs	.L13
1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 190              		.loc 1 1743 0
 191 0050 6268     		ldr	r2, [r4, #4]
 192 0052 1344     		add	r3, r3, r2
 193 0054 E360     		str	r3, [r4, #12]
 194              	.L13:
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 195              		.loc 1 1750 0
 196 0056 022E     		cmp	r6, #2
 197 0058 07D1     		bne	.L16
1752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 198              		.loc 1 1752 0
 199 005a 45B1     		cbz	r5, .L17
1758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 200              		.loc 1 1758 0
 201 005c 013D     		subs	r5, r5, #1
 202              	.LVL24:
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 203              		.loc 1 1700 0
 204 005e 0020     		movs	r0, #0
 205 0060 06E0     		b	.L11
 206              	.LVL25:
 207              	.L14:
 208 0062 0020     		movs	r0, #0
 209              	.LVL26:
 210 0064 04E0     		b	.L11
 211              	.LVL27:
 212              	.L15:
 213 0066 0020     		movs	r0, #0
 214 0068 02E0     		b	.L11
 215              	.L16:
 216 006a 0020     		movs	r0, #0
 217 006c 00E0     		b	.L11
 218              	.L17:
 219 006e 0020     		movs	r0, #0
 220              	.LVL28:
 221              	.L11:
1771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 222              		.loc 1 1771 0
 223 0070 0135     		adds	r5, r5, #1
 224              	.LVL29:
 225 0072 A563     		str	r5, [r4, #56]
1774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 226              		.loc 1 1774 0
 227 0074 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/cc81O3qB.s 			page 40


 228              		.cfi_endproc
 229              	.LFE155:
 231 0076 00BF     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 232              		.align	2
 233              		.thumb
 234              		.thumb_func
 236              	prvCopyDataFromQueue:
 237              	.LFB156:
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 238              		.loc 1 1778 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              	.LVL30:
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 243              		.loc 1 1779 0
 244 0000 026C     		ldr	r2, [r0, #64]
 245 0002 72B1     		cbz	r2, .L23
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 246              		.loc 1 1778 0
 247 0004 10B5     		push	{r4, lr}
 248              	.LCFI3:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 4, -8
 251              		.cfi_offset 14, -4
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 252              		.loc 1 1781 0
 253 0006 C368     		ldr	r3, [r0, #12]
 254 0008 1344     		add	r3, r3, r2
 255 000a C360     		str	r3, [r0, #12]
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 256              		.loc 1 1782 0
 257 000c 4468     		ldr	r4, [r0, #4]
 258 000e A342     		cmp	r3, r4
 259 0010 01D3     		bcc	.L21
1784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 260              		.loc 1 1784 0
 261 0012 0368     		ldr	r3, [r0]
 262 0014 C360     		str	r3, [r0, #12]
 263              	.L21:
 264 0016 0346     		mov	r3, r0
1790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 265              		.loc 1 1790 0
 266 0018 0846     		mov	r0, r1
 267              	.LVL31:
 268 001a D968     		ldr	r1, [r3, #12]
 269              	.LVL32:
 270 001c FFF7FEFF 		bl	memcpy
 271              	.LVL33:
 272 0020 10BD     		pop	{r4, pc}
 273              	.LVL34:
 274              	.L23:
 275              	.LCFI4:
 276              		.cfi_def_cfa_offset 0
 277              		.cfi_restore 4
 278              		.cfi_restore 14
 279 0022 7047     		bx	lr
ARM GAS  /tmp/cc81O3qB.s 			page 41


 280              		.cfi_endproc
 281              	.LFE156:
 283              		.section	.text.prvUnlockQueue,"ax",%progbits
 284              		.align	2
 285              		.thumb
 286              		.thumb_func
 288              	prvUnlockQueue:
 289              	.LFB157:
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 290              		.loc 1 1796 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              	.LVL35:
 295 0000 38B5     		push	{r3, r4, r5, lr}
 296              	.LCFI5:
 297              		.cfi_def_cfa_offset 16
 298              		.cfi_offset 3, -16
 299              		.cfi_offset 4, -12
 300              		.cfi_offset 5, -8
 301              		.cfi_offset 14, -4
 302 0002 0546     		mov	r5, r0
1803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 303              		.loc 1 1803 0
 304 0004 FFF7FEFF 		bl	vPortEnterCritical
 305              	.LVL36:
 306              	.LBB76:
1805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 307              		.loc 1 1805 0
 308 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 309 000c E4B2     		uxtb	r4, r4
 310              	.LVL37:
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 311              		.loc 1 1808 0
 312 000e 0AE0     		b	.L25
 313              	.L28:
1856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 314              		.loc 1 1856 0
 315 0010 6B6A     		ldr	r3, [r5, #36]
 316 0012 5BB1     		cbz	r3, .L26
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 317              		.loc 1 1858 0
 318 0014 05F12400 		add	r0, r5, #36
 319 0018 FFF7FEFF 		bl	xTaskRemoveFromEventList
 320              	.LVL38:
 321 001c 08B1     		cbz	r0, .L27
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 322              		.loc 1 1862 0
 323 001e FFF7FEFF 		bl	vTaskMissedYield
 324              	.LVL39:
 325              	.L27:
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 326              		.loc 1 1876 0
 327 0022 013C     		subs	r4, r4, #1
 328              	.LVL40:
 329 0024 E4B2     		uxtb	r4, r4
 330              	.LVL41:
ARM GAS  /tmp/cc81O3qB.s 			page 42


 331              	.L25:
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 332              		.loc 1 1808 0
 333 0026 63B2     		sxtb	r3, r4
 334 0028 002B     		cmp	r3, #0
 335 002a F1DC     		bgt	.L28
 336              	.L26:
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 337              		.loc 1 1879 0
 338 002c FF23     		movs	r3, #255
 339 002e 85F84530 		strb	r3, [r5, #69]
 340              	.LBE76:
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 341              		.loc 1 1881 0
 342 0032 FFF7FEFF 		bl	vPortExitCritical
 343              	.LVL42:
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 344              		.loc 1 1884 0
 345 0036 FFF7FEFF 		bl	vPortEnterCritical
 346              	.LVL43:
 347              	.LBB77:
1886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 348              		.loc 1 1886 0
 349 003a 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 350              	.LVL44:
 351 003e E4B2     		uxtb	r4, r4
 352              	.LVL45:
1888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 353              		.loc 1 1888 0
 354 0040 0AE0     		b	.L29
 355              	.L32:
1890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 356              		.loc 1 1890 0
 357 0042 2B69     		ldr	r3, [r5, #16]
 358 0044 5BB1     		cbz	r3, .L30
1892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 359              		.loc 1 1892 0
 360 0046 05F11000 		add	r0, r5, #16
 361 004a FFF7FEFF 		bl	xTaskRemoveFromEventList
 362              	.LVL46:
 363 004e 08B1     		cbz	r0, .L31
1894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 364              		.loc 1 1894 0
 365 0050 FFF7FEFF 		bl	vTaskMissedYield
 366              	.LVL47:
 367              	.L31:
1901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 368              		.loc 1 1901 0
 369 0054 013C     		subs	r4, r4, #1
 370              	.LVL48:
 371 0056 E4B2     		uxtb	r4, r4
 372              	.LVL49:
 373              	.L29:
1888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 374              		.loc 1 1888 0
 375 0058 63B2     		sxtb	r3, r4
 376 005a 002B     		cmp	r3, #0
ARM GAS  /tmp/cc81O3qB.s 			page 43


 377 005c F1DC     		bgt	.L32
 378              	.L30:
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 379              		.loc 1 1909 0
 380 005e FF23     		movs	r3, #255
 381 0060 85F84430 		strb	r3, [r5, #68]
 382              	.LBE77:
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 383              		.loc 1 1911 0
 384 0064 FFF7FEFF 		bl	vPortExitCritical
 385              	.LVL50:
 386 0068 38BD     		pop	{r3, r4, r5, pc}
 387              		.cfi_endproc
 388              	.LFE157:
 390 006a 00BF     		.section	.text.xQueueGenericReset,"ax",%progbits
 391              		.align	2
 392              		.global	xQueueGenericReset
 393              		.thumb
 394              		.thumb_func
 396              	xQueueGenericReset:
 397              	.LFB140:
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 398              		.loc 1 281 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              	.LVL51:
 403 0000 38B5     		push	{r3, r4, r5, lr}
 404              	.LCFI6:
 405              		.cfi_def_cfa_offset 16
 406              		.cfi_offset 3, -16
 407              		.cfi_offset 4, -12
 408              		.cfi_offset 5, -8
 409              		.cfi_offset 14, -4
 410              	.LVL52:
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 411              		.loc 1 284 0
 412 0002 50B9     		cbnz	r0, .L35
 413              	.LBB78:
 414              	.LBB79:
 415              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
ARM GAS  /tmp/cc81O3qB.s 			page 44


  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/cc81O3qB.s 			page 45


  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
ARM GAS  /tmp/cc81O3qB.s 			page 46


 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
ARM GAS  /tmp/cc81O3qB.s 			page 47


 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 416              		.loc 2 237 0
 417              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 418 0004 4FF05003 			mov r3, #80												
 419 0008 72B6     		cpsid i													
 420 000a 83F31188 		msr basepri, r3											
 421 000e BFF36F8F 		isb														
 422 0012 BFF34F8F 		dsb														
ARM GAS  /tmp/cc81O3qB.s 			page 48


 423 0016 62B6     		cpsie i													
 424              	
 425              	@ 0 "" 2
 426              	.LVL53:
 427              		.thumb
 428              	.L36:
 429              	.LBE79:
 430              	.LBE78:
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 431              		.loc 1 284 0 discriminator 1
 432 0018 FEE7     		b	.L36
 433              	.L35:
 434 001a 0446     		mov	r4, r0
 435 001c 0D46     		mov	r5, r1
 286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 436              		.loc 1 286 0
 437 001e FFF7FEFF 		bl	vPortEnterCritical
 438              	.LVL54:
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 439              		.loc 1 288 0
 440 0022 2168     		ldr	r1, [r4]
 441 0024 E26B     		ldr	r2, [r4, #60]
 442 0026 236C     		ldr	r3, [r4, #64]
 443 0028 03FB0210 		mla	r0, r3, r2, r1
 444 002c 6060     		str	r0, [r4, #4]
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 445              		.loc 1 289 0
 446 002e 0020     		movs	r0, #0
 447 0030 A063     		str	r0, [r4, #56]
 290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 448              		.loc 1 290 0
 449 0032 A160     		str	r1, [r4, #8]
 291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 450              		.loc 1 291 0
 451 0034 013A     		subs	r2, r2, #1
 452 0036 02FB0313 		mla	r3, r2, r3, r1
 453 003a E360     		str	r3, [r4, #12]
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 454              		.loc 1 292 0
 455 003c FF23     		movs	r3, #255
 456 003e 84F84430 		strb	r3, [r4, #68]
 293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 457              		.loc 1 293 0
 458 0042 84F84530 		strb	r3, [r4, #69]
 295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 459              		.loc 1 295 0
 460 0046 7DB9     		cbnz	r5, .L37
 302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 461              		.loc 1 302 0
 462 0048 2369     		ldr	r3, [r4, #16]
 463 004a ABB1     		cbz	r3, .L38
 304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 464              		.loc 1 304 0
 465 004c 04F11000 		add	r0, r4, #16
 466 0050 FFF7FEFF 		bl	xTaskRemoveFromEventList
 467              	.LVL55:
 468 0054 80B1     		cbz	r0, .L38
ARM GAS  /tmp/cc81O3qB.s 			page 49


 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 469              		.loc 1 306 0
 470 0056 4FF08052 		mov	r2, #268435456
 471 005a 094B     		ldr	r3, .L40
 472 005c 1A60     		str	r2, [r3]
 473              	@ 306 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 474 005e BFF34F8F 		dsb
 475              	@ 0 "" 2
 476              	@ 306 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 477 0062 BFF36F8F 		isb
 478              	@ 0 "" 2
 479              		.thumb
 480 0066 07E0     		b	.L38
 481              	.L37:
 321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 482              		.loc 1 321 0
 483 0068 04F11000 		add	r0, r4, #16
 484 006c FFF7FEFF 		bl	vListInitialise
 485              	.LVL56:
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 486              		.loc 1 322 0
 487 0070 04F12400 		add	r0, r4, #36
 488 0074 FFF7FEFF 		bl	vListInitialise
 489              	.LVL57:
 490              	.L38:
 325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 491              		.loc 1 325 0
 492 0078 FFF7FEFF 		bl	vPortExitCritical
 493              	.LVL58:
 330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 494              		.loc 1 330 0
 495 007c 0120     		movs	r0, #1
 496 007e 38BD     		pop	{r3, r4, r5, pc}
 497              	.LVL59:
 498              	.L41:
 499              		.align	2
 500              	.L40:
 501 0080 04ED00E0 		.word	-536810236
 502              		.cfi_endproc
 503              	.LFE140:
 505              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 506              		.align	2
 507              		.thumb
 508              		.thumb_func
 510              	prvInitialiseNewQueue:
 511              	.LFB142:
 434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 512              		.loc 1 434 0
 513              		.cfi_startproc
 514              		@ args = 4, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              	.LVL60:
 517 0000 10B5     		push	{r4, lr}
 518              	.LCFI7:
 519              		.cfi_def_cfa_offset 8
 520              		.cfi_offset 4, -8
 521              		.cfi_offset 14, -4
ARM GAS  /tmp/cc81O3qB.s 			page 50


 522 0002 029B     		ldr	r3, [sp, #8]
 523              	.LVL61:
 439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 524              		.loc 1 439 0
 525 0004 0C46     		mov	r4, r1
 526 0006 09B9     		cbnz	r1, .L43
 445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 527              		.loc 1 445 0
 528 0008 1B60     		str	r3, [r3]
 529 000a 00E0     		b	.L44
 530              	.L43:
 450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 531              		.loc 1 450 0
 532 000c 1A60     		str	r2, [r3]
 533              	.L44:
 455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 534              		.loc 1 455 0
 535 000e D863     		str	r0, [r3, #60]
 456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 536              		.loc 1 456 0
 537 0010 1C64     		str	r4, [r3, #64]
 457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 538              		.loc 1 457 0
 539 0012 1846     		mov	r0, r3
 540              	.LVL62:
 541 0014 0121     		movs	r1, #1
 542              	.LVL63:
 543 0016 FFF7FEFF 		bl	xQueueGenericReset
 544              	.LVL64:
 545 001a 10BD     		pop	{r4, pc}
 546              		.cfi_endproc
 547              	.LFE142:
 549              		.section	.text.xQueueGenericCreate,"ax",%progbits
 550              		.align	2
 551              		.global	xQueueGenericCreate
 552              		.thumb
 553              		.thumb_func
 555              	xQueueGenericCreate:
 556              	.LFB141:
 388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 557              		.loc 1 388 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              	.LVL65:
 393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 562              		.loc 1 393 0
 563 0000 50B9     		cbnz	r0, .L47
 564              	.LBB80:
 565              	.LBB81:
 566              		.loc 2 237 0
 567              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 568 0002 4FF05003 			mov r3, #80												
 569 0006 72B6     		cpsid i													
 570 0008 83F31188 		msr basepri, r3											
 571 000c BFF36F8F 		isb														
 572 0010 BFF34F8F 		dsb														
ARM GAS  /tmp/cc81O3qB.s 			page 51


 573 0014 62B6     		cpsie i													
 574              	
 575              	@ 0 "" 2
 576              	.LVL66:
 577              		.thumb
 578              	.L48:
 579              	.LBE81:
 580              	.LBE80:
 393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 581              		.loc 1 393 0 discriminator 1
 582 0016 FEE7     		b	.L48
 583              	.L47:
 388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 584              		.loc 1 388 0
 585 0018 F0B5     		push	{r4, r5, r6, r7, lr}
 586              	.LCFI8:
 587              		.cfi_def_cfa_offset 20
 588              		.cfi_offset 4, -20
 589              		.cfi_offset 5, -16
 590              		.cfi_offset 6, -12
 591              		.cfi_offset 7, -8
 592              		.cfi_offset 14, -4
 593 001a 83B0     		sub	sp, sp, #12
 594              	.LCFI9:
 595              		.cfi_def_cfa_offset 32
 596 001c 0346     		mov	r3, r0
 395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 597              		.loc 1 395 0
 598 001e 11B1     		cbz	r1, .L51
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 599              		.loc 1 404 0
 600 0020 01FB00F0 		mul	r0, r1, r0
 601              	.LVL67:
 602 0024 00E0     		b	.L49
 603              	.LVL68:
 604              	.L51:
 398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 605              		.loc 1 398 0
 606 0026 0020     		movs	r0, #0
 607              	.LVL69:
 608              	.L49:
 609 0028 1D46     		mov	r5, r3
 610 002a 1746     		mov	r7, r2
 611 002c 0C46     		mov	r4, r1
 612              	.LVL70:
 407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 613              		.loc 1 407 0
 614 002e 4830     		adds	r0, r0, #72
 615              	.LVL71:
 616 0030 FFF7FEFF 		bl	pvPortMalloc
 617              	.LVL72:
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 618              		.loc 1 409 0
 619 0034 0646     		mov	r6, r0
 620 0036 38B1     		cbz	r0, .L50
 621              	.LVL73:
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/cc81O3qB.s 			page 52


 622              		.loc 1 424 0
 623 0038 0090     		str	r0, [sp]
 624 003a 2846     		mov	r0, r5
 625              	.LVL74:
 626 003c 2146     		mov	r1, r4
 627 003e 06F14802 		add	r2, r6, #72
 628              	.LVL75:
 629 0042 3B46     		mov	r3, r7
 630 0044 FFF7FEFF 		bl	prvInitialiseNewQueue
 631              	.LVL76:
 632              	.L50:
 428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 633              		.loc 1 428 0
 634 0048 3046     		mov	r0, r6
 635 004a 03B0     		add	sp, sp, #12
 636              	.LCFI10:
 637              		.cfi_def_cfa_offset 20
 638              		@ sp needed
 639 004c F0BD     		pop	{r4, r5, r6, r7, pc}
 640              		.cfi_endproc
 641              	.LFE141:
 643 004e 00BF     		.section	.text.xQueueGenericSend,"ax",%progbits
 644              		.align	2
 645              		.global	xQueueGenericSend
 646              		.thumb
 647              		.thumb_func
 649              	xQueueGenericSend:
 650              	.LFB145:
 725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 651              		.loc 1 725 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 16
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              	.LVL77:
 656 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 657              	.LCFI11:
 658              		.cfi_def_cfa_offset 20
 659              		.cfi_offset 4, -20
 660              		.cfi_offset 5, -16
 661              		.cfi_offset 6, -12
 662              		.cfi_offset 7, -8
 663              		.cfi_offset 14, -4
 664 0002 85B0     		sub	sp, sp, #20
 665              	.LCFI12:
 666              		.cfi_def_cfa_offset 40
 667 0004 0192     		str	r2, [sp, #4]
 668              	.LVL78:
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 669              		.loc 1 730 0
 670 0006 50B9     		cbnz	r0, .L54
 671              	.LBB82:
 672              	.LBB83:
 673              		.loc 2 237 0
 674              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 675 0008 4FF05003 			mov r3, #80												
 676 000c 72B6     		cpsid i													
 677 000e 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cc81O3qB.s 			page 53


 678 0012 BFF36F8F 		isb														
 679 0016 BFF34F8F 		dsb														
 680 001a 62B6     		cpsie i													
 681              	
 682              	@ 0 "" 2
 683              	.LVL79:
 684              		.thumb
 685              	.L55:
 686              	.LBE83:
 687              	.LBE82:
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 688              		.loc 1 730 0 discriminator 1
 689 001c FEE7     		b	.L55
 690              	.LVL80:
 691              	.L54:
 692 001e 0446     		mov	r4, r0
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 693              		.loc 1 731 0
 694 0020 19B9     		cbnz	r1, .L77
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 695              		.loc 1 731 0 is_stmt 0 discriminator 2
 696 0022 026C     		ldr	r2, [r0, #64]
 697              	.LVL81:
 698 0024 1AB9     		cbnz	r2, .L78
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 699              		.loc 1 731 0
 700 0026 0122     		movs	r2, #1
 701 0028 02E0     		b	.L56
 702              	.LVL82:
 703              	.L77:
 704 002a 0122     		movs	r2, #1
 705              	.LVL83:
 706 002c 00E0     		b	.L56
 707              	.L78:
 708 002e 0022     		movs	r2, #0
 709              	.L56:
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 710              		.loc 1 731 0 discriminator 6
 711 0030 52B9     		cbnz	r2, .L57
 712              	.LBB84:
 713              	.LBB85:
 714              		.loc 2 237 0 is_stmt 1
 715              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 716 0032 4FF05003 			mov r3, #80												
 717 0036 72B6     		cpsid i													
 718 0038 83F31188 		msr basepri, r3											
 719 003c BFF36F8F 		isb														
 720 0040 BFF34F8F 		dsb														
 721 0044 62B6     		cpsie i													
 722              	
 723              	@ 0 "" 2
 724              	.LVL84:
 725              		.thumb
 726              	.L58:
 727              	.LBE85:
 728              	.LBE84:
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
ARM GAS  /tmp/cc81O3qB.s 			page 54


 729              		.loc 1 731 0 discriminator 2
 730 0046 FEE7     		b	.L58
 731              	.LVL85:
 732              	.L57:
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733              		.loc 1 732 0
 734 0048 022B     		cmp	r3, #2
 735 004a 03D1     		bne	.L79
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 736              		.loc 1 732 0 is_stmt 0 discriminator 2
 737 004c E26B     		ldr	r2, [r4, #60]
 738 004e 012A     		cmp	r2, #1
 739 0050 02D1     		bne	.L80
 740 0052 02E0     		b	.L59
 741              	.L79:
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 742              		.loc 1 732 0
 743 0054 0122     		movs	r2, #1
 744 0056 00E0     		b	.L59
 745              	.L80:
 746 0058 0022     		movs	r2, #0
 747              	.L59:
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 748              		.loc 1 732 0 discriminator 6
 749 005a 52B9     		cbnz	r2, .L60
 750              	.LBB86:
 751              	.LBB87:
 752              		.loc 2 237 0 is_stmt 1
 753              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 754 005c 4FF05003 			mov r3, #80												
 755 0060 72B6     		cpsid i													
 756 0062 83F31188 		msr basepri, r3											
 757 0066 BFF36F8F 		isb														
 758 006a BFF34F8F 		dsb														
 759 006e 62B6     		cpsie i													
 760              	
 761              	@ 0 "" 2
 762              	.LVL86:
 763              		.thumb
 764              	.L61:
 765              	.LBE87:
 766              	.LBE86:
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 767              		.loc 1 732 0 discriminator 3
 768 0070 FEE7     		b	.L61
 769              	.LVL87:
 770              	.L60:
 771 0072 1D46     		mov	r5, r3
 772 0074 0E46     		mov	r6, r1
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 773              		.loc 1 735 0
 774 0076 FFF7FEFF 		bl	xTaskGetSchedulerState
 775              	.LVL88:
 776 007a 18B9     		cbnz	r0, .L81
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 777              		.loc 1 735 0 is_stmt 0 discriminator 2
 778 007c 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/cc81O3qB.s 			page 55


 779 007e 1BB9     		cbnz	r3, .L82
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 780              		.loc 1 735 0
 781 0080 0123     		movs	r3, #1
 782 0082 02E0     		b	.L62
 783              	.L81:
 784 0084 0123     		movs	r3, #1
 785 0086 00E0     		b	.L62
 786              	.L82:
 787 0088 0023     		movs	r3, #0
 788              	.L62:
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 789              		.loc 1 735 0 discriminator 6
 790 008a 53B9     		cbnz	r3, .L83
 791              	.LBB88:
 792              	.LBB89:
 793              		.loc 2 237 0 is_stmt 1
 794              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 795 008c 4FF05003 			mov r3, #80												
 796 0090 72B6     		cpsid i													
 797 0092 83F31188 		msr basepri, r3											
 798 0096 BFF36F8F 		isb														
 799 009a BFF34F8F 		dsb														
 800 009e 62B6     		cpsie i													
 801              	
 802              	@ 0 "" 2
 803              	.LVL89:
 804              		.thumb
 805              	.L64:
 806              	.LBE89:
 807              	.LBE88:
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 808              		.loc 1 735 0 discriminator 4
 809 00a0 FEE7     		b	.L64
 810              	.L83:
 811 00a2 0027     		movs	r7, #0
 812              	.LVL90:
 813              	.L63:
 745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 814              		.loc 1 745 0
 815 00a4 FFF7FEFF 		bl	vPortEnterCritical
 816              	.LVL91:
 751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 817              		.loc 1 751 0
 818 00a8 A26B     		ldr	r2, [r4, #56]
 819 00aa E36B     		ldr	r3, [r4, #60]
 820 00ac 9A42     		cmp	r2, r3
 821 00ae 01D3     		bcc	.L65
 751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 822              		.loc 1 751 0 is_stmt 0 discriminator 1
 823 00b0 022D     		cmp	r5, #2
 824 00b2 21D1     		bne	.L66
 825              	.L65:
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 826              		.loc 1 754 0 is_stmt 1
 827 00b4 2046     		mov	r0, r4
 828 00b6 3146     		mov	r1, r6
ARM GAS  /tmp/cc81O3qB.s 			page 56


 829 00b8 2A46     		mov	r2, r5
 830 00ba FFF7FEFF 		bl	prvCopyDataToQueue
 831              	.LVL92:
 809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 832              		.loc 1 809 0
 833 00be 636A     		ldr	r3, [r4, #36]
 834 00c0 6BB1     		cbz	r3, .L67
 811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 835              		.loc 1 811 0
 836 00c2 04F12400 		add	r0, r4, #36
 837              	.LVL93:
 838 00c6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 839              	.LVL94:
 840 00ca 88B1     		cbz	r0, .L68
 817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 841              		.loc 1 817 0
 842 00cc 4FF08052 		mov	r2, #268435456
 843 00d0 324B     		ldr	r3, .L85
 844 00d2 1A60     		str	r2, [r3]
 845              	@ 817 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 846 00d4 BFF34F8F 		dsb
 847              	@ 0 "" 2
 848              	@ 817 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 849 00d8 BFF36F8F 		isb
 850              	@ 0 "" 2
 851              		.thumb
 852 00dc 08E0     		b	.L68
 853              	.LVL95:
 854              	.L67:
 824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 855              		.loc 1 824 0
 856 00de 38B1     		cbz	r0, .L68
 830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 857              		.loc 1 830 0
 858 00e0 4FF08052 		mov	r2, #268435456
 859 00e4 2D4B     		ldr	r3, .L85
 860 00e6 1A60     		str	r2, [r3]
 861              	@ 830 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 862 00e8 BFF34F8F 		dsb
 863              	@ 0 "" 2
 864              	@ 830 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 865 00ec BFF36F8F 		isb
 866              	@ 0 "" 2
 867              	.LVL96:
 868              		.thumb
 869              	.L68:
 839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 870              		.loc 1 839 0
 871 00f0 FFF7FEFF 		bl	vPortExitCritical
 872              	.LVL97:
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 873              		.loc 1 840 0
 874 00f4 0120     		movs	r0, #1
 875 00f6 4EE0     		b	.L69
 876              	.L66:
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 877              		.loc 1 844 0
ARM GAS  /tmp/cc81O3qB.s 			page 57


 878 00f8 019B     		ldr	r3, [sp, #4]
 879 00fa 1BB9     		cbnz	r3, .L70
 848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 880              		.loc 1 848 0
 881 00fc FFF7FEFF 		bl	vPortExitCritical
 882              	.LVL98:
 853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 883              		.loc 1 853 0
 884 0100 0020     		movs	r0, #0
 885 0102 48E0     		b	.L69
 886              	.L70:
 855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 887              		.loc 1 855 0
 888 0104 1FB9     		cbnz	r7, .L71
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 889              		.loc 1 859 0
 890 0106 02A8     		add	r0, sp, #8
 891 0108 FFF7FEFF 		bl	vTaskSetTimeOutState
 892              	.LVL99:
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 893              		.loc 1 860 0
 894 010c 0127     		movs	r7, #1
 895              	.LVL100:
 896              	.L71:
 869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 897              		.loc 1 869 0
 898 010e FFF7FEFF 		bl	vPortExitCritical
 899              	.LVL101:
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 900              		.loc 1 874 0
 901 0112 FFF7FEFF 		bl	vTaskSuspendAll
 902              	.LVL102:
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 903              		.loc 1 875 0
 904 0116 FFF7FEFF 		bl	vPortEnterCritical
 905              	.LVL103:
 906 011a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 907 011e 5BB2     		sxtb	r3, r3
 908 0120 B3F1FF3F 		cmp	r3, #-1
 909 0124 02D1     		bne	.L72
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 910              		.loc 1 875 0 is_stmt 0 discriminator 1
 911 0126 0023     		movs	r3, #0
 912 0128 84F84430 		strb	r3, [r4, #68]
 913              	.L72:
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 914              		.loc 1 875 0 discriminator 3
 915 012c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 916 0130 5BB2     		sxtb	r3, r3
 917 0132 B3F1FF3F 		cmp	r3, #-1
 918 0136 02D1     		bne	.L73
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 919              		.loc 1 875 0 discriminator 4
 920 0138 0023     		movs	r3, #0
 921 013a 84F84530 		strb	r3, [r4, #69]
 922              	.L73:
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc81O3qB.s 			page 58


 923              		.loc 1 875 0 discriminator 6
 924 013e FFF7FEFF 		bl	vPortExitCritical
 925              	.LVL104:
 878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 926              		.loc 1 878 0 is_stmt 1 discriminator 6
 927 0142 02A8     		add	r0, sp, #8
 928 0144 01A9     		add	r1, sp, #4
 929              	.LVL105:
 930 0146 FFF7FEFF 		bl	xTaskCheckForTimeOut
 931              	.LVL106:
 932 014a F0B9     		cbnz	r0, .L74
 880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 933              		.loc 1 880 0
 934 014c 2046     		mov	r0, r4
 935 014e FFF7FEFF 		bl	prvIsQueueFull
 936              	.LVL107:
 937 0152 A0B1     		cbz	r0, .L75
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 938              		.loc 1 883 0
 939 0154 04F11000 		add	r0, r4, #16
 940 0158 0199     		ldr	r1, [sp, #4]
 941 015a FFF7FEFF 		bl	vTaskPlaceOnEventList
 942              	.LVL108:
 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 943              		.loc 1 890 0
 944 015e 2046     		mov	r0, r4
 945 0160 FFF7FEFF 		bl	prvUnlockQueue
 946              	.LVL109:
 897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 947              		.loc 1 897 0
 948 0164 FFF7FEFF 		bl	xTaskResumeAll
 949              	.LVL110:
 950 0168 0028     		cmp	r0, #0
 951 016a 9BD1     		bne	.L63
 899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 952              		.loc 1 899 0
 953 016c 4FF08052 		mov	r2, #268435456
 954 0170 0A4B     		ldr	r3, .L85
 955 0172 1A60     		str	r2, [r3]
 956              	@ 899 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 957 0174 BFF34F8F 		dsb
 958              	@ 0 "" 2
 959              	@ 899 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 960 0178 BFF36F8F 		isb
 961              	@ 0 "" 2
 962              		.thumb
 963 017c 92E7     		b	.L63
 964              	.L75:
 905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 965              		.loc 1 905 0
 966 017e 2046     		mov	r0, r4
 967 0180 FFF7FEFF 		bl	prvUnlockQueue
 968              	.LVL111:
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 969              		.loc 1 906 0
 970 0184 FFF7FEFF 		bl	xTaskResumeAll
 971              	.LVL112:
ARM GAS  /tmp/cc81O3qB.s 			page 59


 972 0188 8CE7     		b	.L63
 973              	.L74:
 912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 974              		.loc 1 912 0
 975 018a 2046     		mov	r0, r4
 976 018c FFF7FEFF 		bl	prvUnlockQueue
 977              	.LVL113:
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 978              		.loc 1 913 0
 979 0190 FFF7FEFF 		bl	xTaskResumeAll
 980              	.LVL114:
 916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 981              		.loc 1 916 0
 982 0194 0020     		movs	r0, #0
 983              	.L69:
 919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 984              		.loc 1 919 0
 985 0196 05B0     		add	sp, sp, #20
 986              	.LCFI13:
 987              		.cfi_def_cfa_offset 20
 988              		@ sp needed
 989 0198 F0BD     		pop	{r4, r5, r6, r7, pc}
 990              	.LVL115:
 991              	.L86:
 992 019a 00BF     		.align	2
 993              	.L85:
 994 019c 04ED00E0 		.word	-536810236
 995              		.cfi_endproc
 996              	.LFE145:
 998              		.section	.text.prvInitialiseMutex,"ax",%progbits
 999              		.align	2
 1000              		.thumb
 1001              		.thumb_func
 1003              	prvInitialiseMutex:
 1004              	.LFB143:
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1005              		.loc 1 478 0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 0
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 1009              	.LVL116:
 479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1010              		.loc 1 479 0
 1011 0000 48B1     		cbz	r0, .L90
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1012              		.loc 1 478 0
 1013 0002 08B5     		push	{r3, lr}
 1014              	.LCFI14:
 1015              		.cfi_def_cfa_offset 8
 1016              		.cfi_offset 3, -8
 1017              		.cfi_offset 14, -4
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1018              		.loc 1 485 0
 1019 0004 0023     		movs	r3, #0
 1020 0006 4360     		str	r3, [r0, #4]
 486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1021              		.loc 1 486 0
ARM GAS  /tmp/cc81O3qB.s 			page 60


 1022 0008 0360     		str	r3, [r0]
 489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1023              		.loc 1 489 0
 1024 000a C360     		str	r3, [r0, #12]
 494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1025              		.loc 1 494 0
 1026 000c 1946     		mov	r1, r3
 1027 000e 1A46     		mov	r2, r3
 1028 0010 FFF7FEFF 		bl	xQueueGenericSend
 1029              	.LVL117:
 1030 0014 08BD     		pop	{r3, pc}
 1031              	.LVL118:
 1032              	.L90:
 1033              	.LCFI15:
 1034              		.cfi_def_cfa_offset 0
 1035              		.cfi_restore 3
 1036              		.cfi_restore 14
 1037 0016 7047     		bx	lr
 1038              		.cfi_endproc
 1039              	.LFE143:
 1041              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1042              		.align	2
 1043              		.global	xQueueCreateMutex
 1044              		.thumb
 1045              		.thumb_func
 1047              	xQueueCreateMutex:
 1048              	.LFB144:
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 1049              		.loc 1 508 0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053              	.LVL119:
 1054 0000 10B5     		push	{r4, lr}
 1055              	.LCFI16:
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 4, -8
 1058              		.cfi_offset 14, -4
 1059 0002 0246     		mov	r2, r0
 1060              	.LVL120:
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1061              		.loc 1 512 0
 1062 0004 0120     		movs	r0, #1
 1063              	.LVL121:
 1064 0006 0021     		movs	r1, #0
 1065 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1066              	.LVL122:
 1067 000c 0446     		mov	r4, r0
 1068              	.LVL123:
 513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1069              		.loc 1 513 0
 1070 000e FFF7FEFF 		bl	prvInitialiseMutex
 1071              	.LVL124:
 516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1072              		.loc 1 516 0
 1073 0012 2046     		mov	r0, r4
 1074 0014 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cc81O3qB.s 			page 61


 1075              		.cfi_endproc
 1076              	.LFE144:
 1078 0016 00BF     		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1079              		.align	2
 1080              		.global	xQueueGenericSendFromISR
 1081              		.thumb
 1082              		.thumb_func
 1084              	xQueueGenericSendFromISR:
 1085              	.LFB146:
 923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1086              		.loc 1 923 0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 0
 1089              		@ frame_needed = 0, uses_anonymous_args = 0
 1090              	.LVL125:
 1091 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1092              	.LCFI17:
 1093              		.cfi_def_cfa_offset 32
 1094              		.cfi_offset 3, -32
 1095              		.cfi_offset 4, -28
 1096              		.cfi_offset 5, -24
 1097              		.cfi_offset 6, -20
 1098              		.cfi_offset 7, -16
 1099              		.cfi_offset 8, -12
 1100              		.cfi_offset 9, -8
 1101              		.cfi_offset 14, -4
 1102              	.LVL126:
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1103              		.loc 1 928 0
 1104 0004 50B9     		cbnz	r0, .L94
 1105              	.LBB90:
 1106              	.LBB91:
 1107              		.loc 2 237 0
 1108              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1109 0006 4FF05003 			mov r3, #80												
 1110 000a 72B6     		cpsid i													
 1111 000c 83F31188 		msr basepri, r3											
 1112 0010 BFF36F8F 		isb														
 1113 0014 BFF34F8F 		dsb														
 1114 0018 62B6     		cpsie i													
 1115              	
 1116              	@ 0 "" 2
 1117              	.LVL127:
 1118              		.thumb
 1119              	.L95:
 1120              	.LBE91:
 1121              	.LBE90:
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1122              		.loc 1 928 0 discriminator 1
 1123 001a FEE7     		b	.L95
 1124              	.LVL128:
 1125              	.L94:
 1126 001c 0446     		mov	r4, r0
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1127              		.loc 1 929 0
 1128 001e 19B9     		cbnz	r1, .L105
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
ARM GAS  /tmp/cc81O3qB.s 			page 62


 1129              		.loc 1 929 0 is_stmt 0 discriminator 2
 1130 0020 006C     		ldr	r0, [r0, #64]
 1131              	.LVL129:
 1132 0022 18B9     		cbnz	r0, .L106
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1133              		.loc 1 929 0
 1134 0024 0120     		movs	r0, #1
 1135 0026 02E0     		b	.L96
 1136              	.LVL130:
 1137              	.L105:
 1138 0028 0120     		movs	r0, #1
 1139              	.LVL131:
 1140 002a 00E0     		b	.L96
 1141              	.L106:
 1142 002c 0020     		movs	r0, #0
 1143              	.L96:
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1144              		.loc 1 929 0 discriminator 6
 1145 002e 50B9     		cbnz	r0, .L97
 1146              	.LBB92:
 1147              	.LBB93:
 1148              		.loc 2 237 0 is_stmt 1
 1149              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1150 0030 4FF05003 			mov r3, #80												
 1151 0034 72B6     		cpsid i													
 1152 0036 83F31188 		msr basepri, r3											
 1153 003a BFF36F8F 		isb														
 1154 003e BFF34F8F 		dsb														
 1155 0042 62B6     		cpsie i													
 1156              	
 1157              	@ 0 "" 2
 1158              	.LVL132:
 1159              		.thumb
 1160              	.L98:
 1161              	.LBE93:
 1162              	.LBE92:
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1163              		.loc 1 929 0 discriminator 2
 1164 0044 FEE7     		b	.L98
 1165              	.LVL133:
 1166              	.L97:
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1167              		.loc 1 930 0
 1168 0046 022B     		cmp	r3, #2
 1169 0048 03D1     		bne	.L107
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1170              		.loc 1 930 0 is_stmt 0 discriminator 2
 1171 004a E06B     		ldr	r0, [r4, #60]
 1172 004c 0128     		cmp	r0, #1
 1173 004e 02D1     		bne	.L108
 1174 0050 02E0     		b	.L99
 1175              	.L107:
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1176              		.loc 1 930 0
 1177 0052 0120     		movs	r0, #1
 1178 0054 00E0     		b	.L99
 1179              	.L108:
ARM GAS  /tmp/cc81O3qB.s 			page 63


 1180 0056 0020     		movs	r0, #0
 1181              	.L99:
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1182              		.loc 1 930 0 discriminator 6
 1183 0058 50B9     		cbnz	r0, .L100
 1184              	.LBB94:
 1185              	.LBB95:
 1186              		.loc 2 237 0 is_stmt 1
 1187              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1188 005a 4FF05003 			mov r3, #80												
 1189 005e 72B6     		cpsid i													
 1190 0060 83F31188 		msr basepri, r3											
 1191 0064 BFF36F8F 		isb														
 1192 0068 BFF34F8F 		dsb														
 1193 006c 62B6     		cpsie i													
 1194              	
 1195              	@ 0 "" 2
 1196              	.LVL134:
 1197              		.thumb
 1198              	.L101:
 1199              	.LBE95:
 1200              	.LBE94:
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1201              		.loc 1 930 0 discriminator 3
 1202 006e FEE7     		b	.L101
 1203              	.LVL135:
 1204              	.L100:
 1205 0070 1F46     		mov	r7, r3
 1206 0072 9046     		mov	r8, r2
 1207 0074 8946     		mov	r9, r1
 946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1208              		.loc 1 946 0
 1209 0076 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1210              	.LVL136:
 1211              	.LBB96:
 1212              	.LBB97:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1213              		.loc 2 255 0
 1214              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1215 007a EFF31186 			mrs r6, basepri											
ARM GAS  /tmp/cc81O3qB.s 			page 64


 1216 007e 4FF05003 		mov r3, #80												
 1217 0082 72B6     		cpsid i													
 1218 0084 83F31188 		msr basepri, r3											
 1219 0088 BFF36F8F 		isb														
 1220 008c BFF34F8F 		dsb														
 1221 0090 62B6     		cpsie i													
 1222              	
 1223              	@ 0 "" 2
 1224              	.LVL137:
 1225              		.thumb
 1226              	.LBE97:
 1227              	.LBE96:
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1228              		.loc 1 955 0
 1229 0092 A26B     		ldr	r2, [r4, #56]
 1230 0094 E36B     		ldr	r3, [r4, #60]
 1231 0096 9A42     		cmp	r2, r3
 1232 0098 01D3     		bcc	.L102
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1233              		.loc 1 955 0 is_stmt 0 discriminator 1
 1234 009a 022F     		cmp	r7, #2
 1235 009c 1FD1     		bne	.L109
 1236              	.L102:
 1237              	.LBB98:
 957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1238              		.loc 1 957 0 is_stmt 1
 1239 009e 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1240 00a2 EDB2     		uxtb	r5, r5
 1241              	.LVL138:
 966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1242              		.loc 1 966 0
 1243 00a4 2046     		mov	r0, r4
 1244 00a6 4946     		mov	r1, r9
 1245 00a8 3A46     		mov	r2, r7
 1246 00aa FFF7FEFF 		bl	prvCopyDataToQueue
 1247              	.LVL139:
 970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1248              		.loc 1 970 0
 1249 00ae 6BB2     		sxtb	r3, r5
 1250 00b0 B3F1FF3F 		cmp	r3, #-1
 1251 00b4 0DD1     		bne	.L104
1025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1252              		.loc 1 1025 0
 1253 00b6 636A     		ldr	r3, [r4, #36]
 1254 00b8 9BB1     		cbz	r3, .L110
1027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1255              		.loc 1 1027 0
 1256 00ba 04F12400 		add	r0, r4, #36
 1257 00be FFF7FEFF 		bl	xTaskRemoveFromEventList
 1258              	.LVL140:
 1259 00c2 80B1     		cbz	r0, .L111
1031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1260              		.loc 1 1031 0
 1261 00c4 B8F1000F 		cmp	r8, #0
 1262 00c8 0FD0     		beq	.L112
1033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1263              		.loc 1 1033 0
ARM GAS  /tmp/cc81O3qB.s 			page 65


 1264 00ca 0120     		movs	r0, #1
 1265 00cc C8F80000 		str	r0, [r8]
 1266 00d0 0CE0     		b	.L103
 1267              	.L104:
1056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1268              		.loc 1 1056 0
 1269 00d2 6B1C     		adds	r3, r5, #1
 1270 00d4 DBB2     		uxtb	r3, r3
 1271 00d6 84F84530 		strb	r3, [r4, #69]
1059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1272              		.loc 1 1059 0
 1273 00da 0120     		movs	r0, #1
 1274 00dc 06E0     		b	.L103
 1275              	.LVL141:
 1276              	.L109:
 1277              	.LBE98:
1064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1278              		.loc 1 1064 0
 1279 00de 0020     		movs	r0, #0
 1280 00e0 04E0     		b	.L103
 1281              	.LVL142:
 1282              	.L110:
 1283              	.LBB99:
1059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1284              		.loc 1 1059 0
 1285 00e2 0120     		movs	r0, #1
 1286 00e4 02E0     		b	.L103
 1287              	.L111:
 1288 00e6 0120     		movs	r0, #1
 1289 00e8 00E0     		b	.L103
 1290              	.L112:
 1291 00ea 0120     		movs	r0, #1
 1292              	.LVL143:
 1293              	.L103:
 1294              	.LBE99:
 1295              	.LBB100:
 1296              	.LBB101:
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 272:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 274:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 275:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
ARM GAS  /tmp/cc81O3qB.s 			page 66


 1297              		.loc 2 275 0
 1298              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1299 00ec 86F31188 			msr basepri, r6	
 1300              	@ 0 "" 2
 1301              		.thumb
 1302              	.LBE101:
 1303              	.LBE100:
1070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1304              		.loc 1 1070 0
 1305 00f0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1306              		.cfi_endproc
 1307              	.LFE146:
 1309              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1310              		.align	2
 1311              		.global	xQueueGiveFromISR
 1312              		.thumb
 1313              		.thumb_func
 1315              	xQueueGiveFromISR:
 1316              	.LFB147:
1074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1317              		.loc 1 1074 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 0
 1320              		@ frame_needed = 0, uses_anonymous_args = 0
 1321              	.LVL144:
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1322              		.loc 1 1085 0
 1323 0000 50B9     		cbnz	r0, .L115
 1324              	.LBB102:
 1325              	.LBB103:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1326              		.loc 2 237 0
 1327              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1328 0002 4FF05003 			mov r3, #80												
 1329 0006 72B6     		cpsid i													
 1330 0008 83F31188 		msr basepri, r3											
 1331 000c BFF36F8F 		isb														
 1332 0010 BFF34F8F 		dsb														
 1333 0014 62B6     		cpsie i													
 1334              	
 1335              	@ 0 "" 2
 1336              	.LVL145:
 1337              		.thumb
 1338              	.L116:
 1339              	.LBE103:
 1340              	.LBE102:
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1341              		.loc 1 1085 0 discriminator 1
 1342 0016 FEE7     		b	.L116
 1343              	.L115:
1074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1344              		.loc 1 1074 0
 1345 0018 70B5     		push	{r4, r5, r6, lr}
 1346              	.LCFI18:
 1347              		.cfi_def_cfa_offset 16
 1348              		.cfi_offset 4, -16
 1349              		.cfi_offset 5, -12
ARM GAS  /tmp/cc81O3qB.s 			page 67


 1350              		.cfi_offset 6, -8
 1351              		.cfi_offset 14, -4
 1352 001a 0446     		mov	r4, r0
1089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1353              		.loc 1 1089 0
 1354 001c 036C     		ldr	r3, [r0, #64]
 1355 001e 53B1     		cbz	r3, .L117
 1356              	.LBB104:
 1357              	.LBB105:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1358              		.loc 2 237 0
 1359              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1360 0020 4FF05003 			mov r3, #80												
 1361 0024 72B6     		cpsid i													
 1362 0026 83F31188 		msr basepri, r3											
 1363 002a BFF36F8F 		isb														
 1364 002e BFF34F8F 		dsb														
 1365 0032 62B6     		cpsie i													
 1366              	
 1367              	@ 0 "" 2
 1368              	.LVL146:
 1369              		.thumb
 1370              	.L118:
 1371              	.LBE105:
 1372              	.LBE104:
1089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1373              		.loc 1 1089 0 discriminator 2
 1374 0034 FEE7     		b	.L118
 1375              	.L117:
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1376              		.loc 1 1094 0
 1377 0036 0368     		ldr	r3, [r0]
 1378 0038 1BB9     		cbnz	r3, .L124
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1379              		.loc 1 1094 0 is_stmt 0 discriminator 2
 1380 003a 4368     		ldr	r3, [r0, #4]
 1381 003c 1BB9     		cbnz	r3, .L125
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1382              		.loc 1 1094 0
 1383 003e 0123     		movs	r3, #1
 1384 0040 02E0     		b	.L119
 1385              	.L124:
 1386 0042 0123     		movs	r3, #1
 1387 0044 00E0     		b	.L119
 1388              	.L125:
 1389 0046 0023     		movs	r3, #0
 1390              	.L119:
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1391              		.loc 1 1094 0 discriminator 6
 1392 0048 53B9     		cbnz	r3, .L120
 1393              	.LBB106:
 1394              	.LBB107:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1395              		.loc 2 237 0 is_stmt 1
 1396              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1397 004a 4FF05003 			mov r3, #80												
 1398 004e 72B6     		cpsid i													
ARM GAS  /tmp/cc81O3qB.s 			page 68


 1399 0050 83F31188 		msr basepri, r3											
 1400 0054 BFF36F8F 		isb														
 1401 0058 BFF34F8F 		dsb														
 1402 005c 62B6     		cpsie i													
 1403              	
 1404              	@ 0 "" 2
 1405              	.LVL147:
 1406              		.thumb
 1407              	.L121:
 1408              	.LBE107:
 1409              	.LBE106:
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1410              		.loc 1 1094 0 discriminator 3
 1411 005e FEE7     		b	.L121
 1412              	.L120:
 1413 0060 0D46     		mov	r5, r1
1110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1414              		.loc 1 1110 0
 1415 0062 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1416              	.LVL148:
 1417              	.LBB108:
 1418              	.LBB109:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1419              		.loc 2 255 0
 1420              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1421 0066 EFF31186 			mrs r6, basepri											
 1422 006a 4FF05003 		mov r3, #80												
 1423 006e 72B6     		cpsid i													
 1424 0070 83F31188 		msr basepri, r3											
 1425 0074 BFF36F8F 		isb														
 1426 0078 BFF34F8F 		dsb														
 1427 007c 62B6     		cpsie i													
 1428              	
 1429              	@ 0 "" 2
 1430              	.LVL149:
 1431              		.thumb
 1432              	.LBE109:
 1433              	.LBE108:
 1434              	.LBB110:
1114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1435              		.loc 1 1114 0
 1436 007e A36B     		ldr	r3, [r4, #56]
 1437              	.LVL150:
1119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1438              		.loc 1 1119 0
 1439 0080 E26B     		ldr	r2, [r4, #60]
 1440 0082 9A42     		cmp	r2, r3
 1441 0084 17D9     		bls	.L126
 1442              	.LBB111:
1121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1443              		.loc 1 1121 0
 1444 0086 94F84520 		ldrb	r2, [r4, #69]	@ zero_extendqisi2
 1445              	.LVL151:
1131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1446              		.loc 1 1131 0
 1447 008a 0133     		adds	r3, r3, #1
 1448              	.LVL152:
ARM GAS  /tmp/cc81O3qB.s 			page 69


 1449 008c A363     		str	r3, [r4, #56]
1135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1450              		.loc 1 1135 0
 1451 008e D3B2     		uxtb	r3, r2
 1452              	.LVL153:
 1453 0090 FF2A     		cmp	r2, #255
 1454 0092 0AD1     		bne	.L123
1190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1455              		.loc 1 1190 0
 1456 0094 636A     		ldr	r3, [r4, #36]
 1457 0096 83B1     		cbz	r3, .L127
1192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1458              		.loc 1 1192 0
 1459 0098 04F12400 		add	r0, r4, #36
 1460 009c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1461              	.LVL154:
 1462 00a0 68B1     		cbz	r0, .L128
1196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1463              		.loc 1 1196 0
 1464 00a2 75B1     		cbz	r5, .L129
1198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1465              		.loc 1 1198 0
 1466 00a4 0120     		movs	r0, #1
 1467 00a6 2860     		str	r0, [r5]
 1468 00a8 0CE0     		b	.L122
 1469              	.LVL155:
 1470              	.L123:
1221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1471              		.loc 1 1221 0
 1472 00aa 0133     		adds	r3, r3, #1
 1473 00ac DBB2     		uxtb	r3, r3
 1474 00ae 84F84530 		strb	r3, [r4, #69]
 1475              	.LVL156:
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1476              		.loc 1 1224 0
 1477 00b2 0120     		movs	r0, #1
 1478 00b4 06E0     		b	.L122
 1479              	.LVL157:
 1480              	.L126:
 1481              	.LBE111:
1229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1482              		.loc 1 1229 0
 1483 00b6 0020     		movs	r0, #0
 1484 00b8 04E0     		b	.L122
 1485              	.LVL158:
 1486              	.L127:
 1487              	.LBB112:
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1488              		.loc 1 1224 0
 1489 00ba 0120     		movs	r0, #1
 1490 00bc 02E0     		b	.L122
 1491              	.LVL159:
 1492              	.L128:
 1493 00be 0120     		movs	r0, #1
 1494 00c0 00E0     		b	.L122
 1495              	.L129:
 1496 00c2 0120     		movs	r0, #1
ARM GAS  /tmp/cc81O3qB.s 			page 70


 1497              	.L122:
 1498              	.LVL160:
 1499              	.LBE112:
 1500              	.LBE110:
 1501              	.LBB113:
 1502              	.LBB114:
 1503              		.loc 2 275 0
 1504              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1505 00c4 86F31188 			msr basepri, r6	
 1506              	@ 0 "" 2
 1507              		.thumb
 1508              	.LBE114:
 1509              	.LBE113:
1235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1510              		.loc 1 1235 0
 1511 00c8 70BD     		pop	{r4, r5, r6, pc}
 1512              		.cfi_endproc
 1513              	.LFE147:
 1515 00ca 00BF     		.section	.text.xQueueGenericReceive,"ax",%progbits
 1516              		.align	2
 1517              		.global	xQueueGenericReceive
 1518              		.thumb
 1519              		.thumb_func
 1521              	xQueueGenericReceive:
 1522              	.LFB148:
1239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1523              		.loc 1 1239 0
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 16
 1526              		@ frame_needed = 0, uses_anonymous_args = 0
 1527              	.LVL161:
 1528 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1529              	.LCFI19:
 1530              		.cfi_def_cfa_offset 24
 1531              		.cfi_offset 4, -24
 1532              		.cfi_offset 5, -20
 1533              		.cfi_offset 6, -16
 1534              		.cfi_offset 7, -12
 1535              		.cfi_offset 8, -8
 1536              		.cfi_offset 14, -4
 1537 0004 84B0     		sub	sp, sp, #16
 1538              	.LCFI20:
 1539              		.cfi_def_cfa_offset 40
 1540 0006 0192     		str	r2, [sp, #4]
 1541              	.LVL162:
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1542              		.loc 1 1245 0
 1543 0008 50B9     		cbnz	r0, .L132
 1544              	.LBB115:
 1545              	.LBB116:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1546              		.loc 2 237 0
 1547              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1548 000a 4FF05003 			mov r3, #80												
 1549 000e 72B6     		cpsid i													
 1550 0010 83F31188 		msr basepri, r3											
 1551 0014 BFF36F8F 		isb														
ARM GAS  /tmp/cc81O3qB.s 			page 71


 1552 0018 BFF34F8F 		dsb														
 1553 001c 62B6     		cpsie i													
 1554              	
 1555              	@ 0 "" 2
 1556              	.LVL163:
 1557              		.thumb
 1558              	.L133:
 1559              	.LBE116:
 1560              	.LBE115:
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1561              		.loc 1 1245 0 discriminator 1
 1562 001e FEE7     		b	.L133
 1563              	.LVL164:
 1564              	.L132:
 1565 0020 0446     		mov	r4, r0
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1566              		.loc 1 1246 0
 1567 0022 19B9     		cbnz	r1, .L153
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1568              		.loc 1 1246 0 is_stmt 0 discriminator 2
 1569 0024 026C     		ldr	r2, [r0, #64]
 1570              	.LVL165:
 1571 0026 1AB9     		cbnz	r2, .L154
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1572              		.loc 1 1246 0
 1573 0028 0122     		movs	r2, #1
 1574 002a 02E0     		b	.L134
 1575              	.LVL166:
 1576              	.L153:
 1577 002c 0122     		movs	r2, #1
 1578              	.LVL167:
 1579 002e 00E0     		b	.L134
 1580              	.L154:
 1581 0030 0022     		movs	r2, #0
 1582              	.L134:
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1583              		.loc 1 1246 0 discriminator 6
 1584 0032 52B9     		cbnz	r2, .L135
 1585              	.LBB117:
 1586              	.LBB118:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1587              		.loc 2 237 0 is_stmt 1
 1588              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1589 0034 4FF05003 			mov r3, #80												
 1590 0038 72B6     		cpsid i													
 1591 003a 83F31188 		msr basepri, r3											
 1592 003e BFF36F8F 		isb														
 1593 0042 BFF34F8F 		dsb														
 1594 0046 62B6     		cpsie i													
 1595              	
 1596              	@ 0 "" 2
 1597              	.LVL168:
 1598              		.thumb
 1599              	.L136:
 1600              	.LBE118:
 1601              	.LBE117:
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  /tmp/cc81O3qB.s 			page 72


 1602              		.loc 1 1246 0 discriminator 2
 1603 0048 FEE7     		b	.L136
 1604              	.LVL169:
 1605              	.L135:
 1606 004a 1F46     		mov	r7, r3
 1607 004c 8846     		mov	r8, r1
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1608              		.loc 1 1249 0
 1609 004e FFF7FEFF 		bl	xTaskGetSchedulerState
 1610              	.LVL170:
 1611 0052 18B9     		cbnz	r0, .L155
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1612              		.loc 1 1249 0 is_stmt 0 discriminator 2
 1613 0054 019B     		ldr	r3, [sp, #4]
 1614 0056 1BB9     		cbnz	r3, .L156
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1615              		.loc 1 1249 0
 1616 0058 0123     		movs	r3, #1
 1617 005a 02E0     		b	.L137
 1618              	.L155:
 1619 005c 0123     		movs	r3, #1
 1620 005e 00E0     		b	.L137
 1621              	.L156:
 1622 0060 0023     		movs	r3, #0
 1623              	.L137:
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1624              		.loc 1 1249 0 discriminator 6
 1625 0062 53B9     		cbnz	r3, .L157
 1626              	.LBB119:
 1627              	.LBB120:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1628              		.loc 2 237 0 is_stmt 1
 1629              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1630 0064 4FF05003 			mov r3, #80												
 1631 0068 72B6     		cpsid i													
 1632 006a 83F31188 		msr basepri, r3											
 1633 006e BFF36F8F 		isb														
 1634 0072 BFF34F8F 		dsb														
 1635 0076 62B6     		cpsie i													
 1636              	
 1637              	@ 0 "" 2
 1638              	.LVL171:
 1639              		.thumb
 1640              	.L139:
 1641              	.LBE120:
 1642              	.LBE119:
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1643              		.loc 1 1249 0 discriminator 3
 1644 0078 FEE7     		b	.L139
 1645              	.L157:
 1646 007a 0026     		movs	r6, #0
 1647              	.LVL172:
 1648              	.L138:
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1649              		.loc 1 1259 0
 1650 007c FFF7FEFF 		bl	vPortEnterCritical
 1651              	.LVL173:
ARM GAS  /tmp/cc81O3qB.s 			page 73


 1652              	.LBB121:
1261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1653              		.loc 1 1261 0
 1654 0080 A56B     		ldr	r5, [r4, #56]
 1655              	.LVL174:
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1656              		.loc 1 1265 0
 1657 0082 85B3     		cbz	r5, .L140
1269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1658              		.loc 1 1269 0
 1659 0084 E668     		ldr	r6, [r4, #12]
 1660              	.LVL175:
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1661              		.loc 1 1271 0
 1662 0086 2046     		mov	r0, r4
 1663 0088 4146     		mov	r1, r8
 1664 008a FFF7FEFF 		bl	prvCopyDataFromQueue
 1665              	.LVL176:
1273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1666              		.loc 1 1273 0
 1667 008e B7B9     		cbnz	r7, .L141
1278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1668              		.loc 1 1278 0
 1669 0090 013D     		subs	r5, r5, #1
 1670              	.LVL177:
 1671 0092 A563     		str	r5, [r4, #56]
1282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1672              		.loc 1 1282 0
 1673 0094 2368     		ldr	r3, [r4]
 1674 0096 13B9     		cbnz	r3, .L142
1286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1675              		.loc 1 1286 0
 1676 0098 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1677              	.LVL178:
 1678 009c 6060     		str	r0, [r4, #4]
 1679              	.L142:
1295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1680              		.loc 1 1295 0
 1681 009e 2369     		ldr	r3, [r4, #16]
 1682 00a0 EBB1     		cbz	r3, .L143
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1683              		.loc 1 1297 0
 1684 00a2 04F11000 		add	r0, r4, #16
 1685 00a6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1686              	.LVL179:
 1687 00aa C0B1     		cbz	r0, .L143
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1688              		.loc 1 1299 0
 1689 00ac 4FF08052 		mov	r2, #268435456
 1690 00b0 3D4B     		ldr	r3, .L159
 1691 00b2 1A60     		str	r2, [r3]
 1692              	@ 1299 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1693 00b4 BFF34F8F 		dsb
 1694              	@ 0 "" 2
 1695              	@ 1299 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1696 00b8 BFF36F8F 		isb
 1697              	@ 0 "" 2
ARM GAS  /tmp/cc81O3qB.s 			page 74


 1698              		.thumb
 1699 00bc 0FE0     		b	.L143
 1700              	.LVL180:
 1701              	.L141:
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1702              		.loc 1 1317 0
 1703 00be E660     		str	r6, [r4, #12]
1321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1704              		.loc 1 1321 0
 1705 00c0 636A     		ldr	r3, [r4, #36]
 1706 00c2 63B1     		cbz	r3, .L143
1323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1707              		.loc 1 1323 0
 1708 00c4 04F12400 		add	r0, r4, #36
 1709 00c8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1710              	.LVL181:
 1711 00cc 38B1     		cbz	r0, .L143
1326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1712              		.loc 1 1326 0
 1713 00ce 4FF08052 		mov	r2, #268435456
 1714 00d2 354B     		ldr	r3, .L159
 1715 00d4 1A60     		str	r2, [r3]
 1716              	@ 1326 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1717 00d6 BFF34F8F 		dsb
 1718              	@ 0 "" 2
 1719              	@ 1326 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1720 00da BFF36F8F 		isb
 1721              	@ 0 "" 2
 1722              	.LVL182:
 1723              		.thumb
 1724              	.L143:
1339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1725              		.loc 1 1339 0
 1726 00de FFF7FEFF 		bl	vPortExitCritical
 1727              	.LVL183:
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1728              		.loc 1 1340 0
 1729 00e2 0120     		movs	r0, #1
 1730 00e4 5DE0     		b	.L144
 1731              	.LVL184:
 1732              	.L140:
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1733              		.loc 1 1344 0
 1734 00e6 019B     		ldr	r3, [sp, #4]
 1735 00e8 1BB9     		cbnz	r3, .L145
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1736              		.loc 1 1348 0
 1737 00ea FFF7FEFF 		bl	vPortExitCritical
 1738              	.LVL185:
1350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1739              		.loc 1 1350 0
 1740 00ee 0020     		movs	r0, #0
 1741 00f0 57E0     		b	.L144
 1742              	.L145:
1352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1743              		.loc 1 1352 0
 1744 00f2 1EB9     		cbnz	r6, .L146
ARM GAS  /tmp/cc81O3qB.s 			page 75


1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1745              		.loc 1 1356 0
 1746 00f4 02A8     		add	r0, sp, #8
 1747 00f6 FFF7FEFF 		bl	vTaskSetTimeOutState
 1748              	.LVL186:
1357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1749              		.loc 1 1357 0
 1750 00fa 0126     		movs	r6, #1
 1751              	.LVL187:
 1752              	.L146:
 1753              	.LBE121:
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1754              		.loc 1 1366 0
 1755 00fc FFF7FEFF 		bl	vPortExitCritical
 1756              	.LVL188:
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1757              		.loc 1 1371 0
 1758 0100 FFF7FEFF 		bl	vTaskSuspendAll
 1759              	.LVL189:
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1760              		.loc 1 1372 0
 1761 0104 FFF7FEFF 		bl	vPortEnterCritical
 1762              	.LVL190:
 1763 0108 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1764 010c 5BB2     		sxtb	r3, r3
 1765 010e B3F1FF3F 		cmp	r3, #-1
 1766 0112 02D1     		bne	.L147
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1767              		.loc 1 1372 0 is_stmt 0 discriminator 1
 1768 0114 0023     		movs	r3, #0
 1769 0116 84F84430 		strb	r3, [r4, #68]
 1770              	.L147:
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1771              		.loc 1 1372 0 discriminator 3
 1772 011a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1773 011e 5BB2     		sxtb	r3, r3
 1774 0120 B3F1FF3F 		cmp	r3, #-1
 1775 0124 02D1     		bne	.L148
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1776              		.loc 1 1372 0 discriminator 4
 1777 0126 0023     		movs	r3, #0
 1778 0128 84F84530 		strb	r3, [r4, #69]
 1779              	.L148:
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1780              		.loc 1 1372 0 discriminator 6
 1781 012c FFF7FEFF 		bl	vPortExitCritical
 1782              	.LVL191:
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1783              		.loc 1 1375 0 is_stmt 1 discriminator 6
 1784 0130 02A8     		add	r0, sp, #8
 1785 0132 01A9     		add	r1, sp, #4
 1786              	.LVL192:
 1787 0134 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1788              	.LVL193:
 1789 0138 38BB     		cbnz	r0, .L149
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1790              		.loc 1 1377 0
ARM GAS  /tmp/cc81O3qB.s 			page 76


 1791 013a 2046     		mov	r0, r4
 1792 013c FFF7FEFF 		bl	prvIsQueueEmpty
 1793              	.LVL194:
 1794 0140 E8B1     		cbz	r0, .L150
1383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1795              		.loc 1 1383 0
 1796 0142 2368     		ldr	r3, [r4]
 1797 0144 33B9     		cbnz	r3, .L151
1385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1798              		.loc 1 1385 0
 1799 0146 FFF7FEFF 		bl	vPortEnterCritical
 1800              	.LVL195:
1387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1801              		.loc 1 1387 0
 1802 014a 6068     		ldr	r0, [r4, #4]
 1803 014c FFF7FEFF 		bl	vTaskPriorityInherit
 1804              	.LVL196:
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1805              		.loc 1 1389 0
 1806 0150 FFF7FEFF 		bl	vPortExitCritical
 1807              	.LVL197:
 1808              	.L151:
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1809              		.loc 1 1398 0
 1810 0154 04F12400 		add	r0, r4, #36
 1811 0158 0199     		ldr	r1, [sp, #4]
 1812 015a FFF7FEFF 		bl	vTaskPlaceOnEventList
 1813              	.LVL198:
1399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1814              		.loc 1 1399 0
 1815 015e 2046     		mov	r0, r4
 1816 0160 FFF7FEFF 		bl	prvUnlockQueue
 1817              	.LVL199:
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1818              		.loc 1 1400 0
 1819 0164 FFF7FEFF 		bl	xTaskResumeAll
 1820              	.LVL200:
 1821 0168 0028     		cmp	r0, #0
 1822 016a 87D1     		bne	.L138
1402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1823              		.loc 1 1402 0
 1824 016c 4FF08052 		mov	r2, #268435456
 1825 0170 0D4B     		ldr	r3, .L159
 1826 0172 1A60     		str	r2, [r3]
 1827              	@ 1402 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1828 0174 BFF34F8F 		dsb
 1829              	@ 0 "" 2
 1830              	@ 1402 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1831 0178 BFF36F8F 		isb
 1832              	@ 0 "" 2
 1833              		.thumb
 1834 017c 7EE7     		b	.L138
 1835              	.L150:
1412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1836              		.loc 1 1412 0
 1837 017e 2046     		mov	r0, r4
 1838 0180 FFF7FEFF 		bl	prvUnlockQueue
ARM GAS  /tmp/cc81O3qB.s 			page 77


 1839              	.LVL201:
1413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1840              		.loc 1 1413 0
 1841 0184 FFF7FEFF 		bl	xTaskResumeAll
 1842              	.LVL202:
 1843 0188 78E7     		b	.L138
 1844              	.L149:
1418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1845              		.loc 1 1418 0
 1846 018a 2046     		mov	r0, r4
 1847 018c FFF7FEFF 		bl	prvUnlockQueue
 1848              	.LVL203:
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1849              		.loc 1 1419 0
 1850 0190 FFF7FEFF 		bl	xTaskResumeAll
 1851              	.LVL204:
1421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1852              		.loc 1 1421 0
 1853 0194 2046     		mov	r0, r4
 1854 0196 FFF7FEFF 		bl	prvIsQueueEmpty
 1855              	.LVL205:
 1856 019a 0028     		cmp	r0, #0
 1857 019c 3FF46EAF 		beq	.L138
1424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1858              		.loc 1 1424 0
 1859 01a0 0020     		movs	r0, #0
 1860              	.LVL206:
 1861              	.L144:
1432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1862              		.loc 1 1432 0
 1863 01a2 04B0     		add	sp, sp, #16
 1864              	.LCFI21:
 1865              		.cfi_def_cfa_offset 24
 1866              		@ sp needed
 1867 01a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1868              	.LVL207:
 1869              	.L160:
 1870              		.align	2
 1871              	.L159:
 1872 01a8 04ED00E0 		.word	-536810236
 1873              		.cfi_endproc
 1874              	.LFE148:
 1876              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1877              		.align	2
 1878              		.global	xQueueReceiveFromISR
 1879              		.thumb
 1880              		.thumb_func
 1882              	xQueueReceiveFromISR:
 1883              	.LFB149:
1436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1884              		.loc 1 1436 0
 1885              		.cfi_startproc
 1886              		@ args = 0, pretend = 0, frame = 0
 1887              		@ frame_needed = 0, uses_anonymous_args = 0
 1888              	.LVL208:
 1889 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1890              	.LCFI22:
ARM GAS  /tmp/cc81O3qB.s 			page 78


 1891              		.cfi_def_cfa_offset 32
 1892              		.cfi_offset 3, -32
 1893              		.cfi_offset 4, -28
 1894              		.cfi_offset 5, -24
 1895              		.cfi_offset 6, -20
 1896              		.cfi_offset 7, -16
 1897              		.cfi_offset 8, -12
 1898              		.cfi_offset 9, -8
 1899              		.cfi_offset 14, -4
 1900              	.LVL209:
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1901              		.loc 1 1441 0
 1902 0004 50B9     		cbnz	r0, .L162
 1903              	.LBB122:
 1904              	.LBB123:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1905              		.loc 2 237 0
 1906              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1907 0006 4FF05003 			mov r3, #80												
 1908 000a 72B6     		cpsid i													
 1909 000c 83F31188 		msr basepri, r3											
 1910 0010 BFF36F8F 		isb														
 1911 0014 BFF34F8F 		dsb														
 1912 0018 62B6     		cpsie i													
 1913              	
 1914              	@ 0 "" 2
 1915              	.LVL210:
 1916              		.thumb
 1917              	.L163:
 1918              	.LBE123:
 1919              	.LBE122:
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1920              		.loc 1 1441 0 discriminator 1
 1921 001a FEE7     		b	.L163
 1922              	.L162:
 1923 001c 0446     		mov	r4, r0
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1924              		.loc 1 1442 0
 1925 001e 19B9     		cbnz	r1, .L169
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1926              		.loc 1 1442 0 is_stmt 0 discriminator 2
 1927 0020 036C     		ldr	r3, [r0, #64]
 1928 0022 1BB9     		cbnz	r3, .L170
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1929              		.loc 1 1442 0
 1930 0024 0123     		movs	r3, #1
 1931 0026 02E0     		b	.L164
 1932              	.L169:
 1933 0028 0123     		movs	r3, #1
 1934 002a 00E0     		b	.L164
 1935              	.L170:
 1936 002c 0023     		movs	r3, #0
 1937              	.L164:
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1938              		.loc 1 1442 0 discriminator 6
 1939 002e 53B9     		cbnz	r3, .L165
 1940              	.LBB124:
ARM GAS  /tmp/cc81O3qB.s 			page 79


 1941              	.LBB125:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1942              		.loc 2 237 0 is_stmt 1
 1943              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1944 0030 4FF05003 			mov r3, #80												
 1945 0034 72B6     		cpsid i													
 1946 0036 83F31188 		msr basepri, r3											
 1947 003a BFF36F8F 		isb														
 1948 003e BFF34F8F 		dsb														
 1949 0042 62B6     		cpsie i													
 1950              	
 1951              	@ 0 "" 2
 1952              	.LVL211:
 1953              		.thumb
 1954              	.L166:
 1955              	.LBE125:
 1956              	.LBE124:
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1957              		.loc 1 1442 0 discriminator 2
 1958 0044 FEE7     		b	.L166
 1959              	.L165:
 1960 0046 1746     		mov	r7, r2
 1961 0048 8946     		mov	r9, r1
1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1962              		.loc 1 1458 0
 1963 004a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1964              	.LVL212:
 1965              	.LBB126:
 1966              	.LBB127:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1967              		.loc 2 255 0
 1968              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1969 004e EFF31186 			mrs r6, basepri											
 1970 0052 4FF05003 		mov r3, #80												
 1971 0056 72B6     		cpsid i													
 1972 0058 83F31188 		msr basepri, r3											
 1973 005c BFF36F8F 		isb														
 1974 0060 BFF34F8F 		dsb														
 1975 0064 62B6     		cpsie i													
 1976              	
 1977              	@ 0 "" 2
 1978              	.LVL213:
 1979              		.thumb
 1980              	.LBE127:
 1981              	.LBE126:
 1982              	.LBB128:
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1983              		.loc 1 1462 0
 1984 0066 D4F83880 		ldr	r8, [r4, #56]
 1985              	.LVL214:
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1986              		.loc 1 1465 0
 1987 006a B8F1000F 		cmp	r8, #0
 1988 006e 1ED0     		beq	.L171
 1989              	.LBB129:
1467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1990              		.loc 1 1467 0
ARM GAS  /tmp/cc81O3qB.s 			page 80


 1991 0070 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 1992 0074 EDB2     		uxtb	r5, r5
 1993              	.LVL215:
1471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1994              		.loc 1 1471 0
 1995 0076 2046     		mov	r0, r4
 1996 0078 4946     		mov	r1, r9
 1997 007a FFF7FEFF 		bl	prvCopyDataFromQueue
 1998              	.LVL216:
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1999              		.loc 1 1472 0
 2000 007e 08F1FF33 		add	r3, r8, #-1
 2001 0082 A363     		str	r3, [r4, #56]
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2002              		.loc 1 1478 0
 2003 0084 6BB2     		sxtb	r3, r5
 2004 0086 B3F1FF3F 		cmp	r3, #-1
 2005 008a 0AD1     		bne	.L168
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2006              		.loc 1 1480 0
 2007 008c 2369     		ldr	r3, [r4, #16]
 2008 008e 83B1     		cbz	r3, .L172
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2009              		.loc 1 1482 0
 2010 0090 04F11000 		add	r0, r4, #16
 2011 0094 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2012              	.LVL217:
 2013 0098 68B1     		cbz	r0, .L173
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2014              		.loc 1 1486 0
 2015 009a 77B1     		cbz	r7, .L174
1488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2016              		.loc 1 1488 0
 2017 009c 0120     		movs	r0, #1
 2018 009e 3860     		str	r0, [r7]
 2019 00a0 0CE0     		b	.L167
 2020              	.L168:
1509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2021              		.loc 1 1509 0
 2022 00a2 6B1C     		adds	r3, r5, #1
 2023 00a4 DBB2     		uxtb	r3, r3
 2024 00a6 84F84430 		strb	r3, [r4, #68]
1512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2025              		.loc 1 1512 0
 2026 00aa 0120     		movs	r0, #1
 2027 00ac 06E0     		b	.L167
 2028              	.LVL218:
 2029              	.L171:
 2030              	.LBE129:
1516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2031              		.loc 1 1516 0
 2032 00ae 0020     		movs	r0, #0
 2033 00b0 04E0     		b	.L167
 2034              	.LVL219:
 2035              	.L172:
 2036              	.LBB130:
1512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/cc81O3qB.s 			page 81


 2037              		.loc 1 1512 0
 2038 00b2 0120     		movs	r0, #1
 2039 00b4 02E0     		b	.L167
 2040              	.L173:
 2041 00b6 0120     		movs	r0, #1
 2042 00b8 00E0     		b	.L167
 2043              	.L174:
 2044 00ba 0120     		movs	r0, #1
 2045              	.LVL220:
 2046              	.L167:
 2047              	.LBE130:
 2048              	.LBE128:
 2049              	.LBB131:
 2050              	.LBB132:
 2051              		.loc 2 275 0
 2052              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2053 00bc 86F31188 			msr basepri, r6	
 2054              	@ 0 "" 2
 2055              		.thumb
 2056              	.LBE132:
 2057              	.LBE131:
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2058              		.loc 1 1523 0
 2059 00c0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2060              		.cfi_endproc
 2061              	.LFE149:
 2063              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2064              		.align	2
 2065              		.global	xQueuePeekFromISR
 2066              		.thumb
 2067              		.thumb_func
 2069              	xQueuePeekFromISR:
 2070              	.LFB150:
1527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2071              		.loc 1 1527 0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              	.LVL221:
 2076 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2077              	.LCFI23:
 2078              		.cfi_def_cfa_offset 24
 2079              		.cfi_offset 3, -24
 2080              		.cfi_offset 4, -20
 2081              		.cfi_offset 5, -16
 2082              		.cfi_offset 6, -12
 2083              		.cfi_offset 7, -8
 2084              		.cfi_offset 14, -4
 2085              	.LVL222:
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2086              		.loc 1 1533 0
 2087 0002 50B9     		cbnz	r0, .L177
 2088              	.LBB133:
 2089              	.LBB134:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2090              		.loc 2 237 0
 2091              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
ARM GAS  /tmp/cc81O3qB.s 			page 82


 2092 0004 4FF05003 			mov r3, #80												
 2093 0008 72B6     		cpsid i													
 2094 000a 83F31188 		msr basepri, r3											
 2095 000e BFF36F8F 		isb														
 2096 0012 BFF34F8F 		dsb														
 2097 0016 62B6     		cpsie i													
 2098              	
 2099              	@ 0 "" 2
 2100              	.LVL223:
 2101              		.thumb
 2102              	.L178:
 2103              	.LBE134:
 2104              	.LBE133:
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2105              		.loc 1 1533 0 discriminator 1
 2106 0018 FEE7     		b	.L178
 2107              	.L177:
 2108 001a 0446     		mov	r4, r0
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2109              		.loc 1 1534 0
 2110 001c 19B9     		cbnz	r1, .L185
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2111              		.loc 1 1534 0 is_stmt 0 discriminator 2
 2112 001e 036C     		ldr	r3, [r0, #64]
 2113 0020 1BB9     		cbnz	r3, .L186
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2114              		.loc 1 1534 0
 2115 0022 0123     		movs	r3, #1
 2116 0024 02E0     		b	.L179
 2117              	.L185:
 2118 0026 0123     		movs	r3, #1
 2119 0028 00E0     		b	.L179
 2120              	.L186:
 2121 002a 0023     		movs	r3, #0
 2122              	.L179:
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2123              		.loc 1 1534 0 discriminator 6
 2124 002c 53B9     		cbnz	r3, .L180
 2125              	.LBB135:
 2126              	.LBB136:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2127              		.loc 2 237 0 is_stmt 1
 2128              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2129 002e 4FF05003 			mov r3, #80												
 2130 0032 72B6     		cpsid i													
 2131 0034 83F31188 		msr basepri, r3											
 2132 0038 BFF36F8F 		isb														
 2133 003c BFF34F8F 		dsb														
 2134 0040 62B6     		cpsie i													
 2135              	
 2136              	@ 0 "" 2
 2137              	.LVL224:
 2138              		.thumb
 2139              	.L181:
 2140              	.LBE136:
 2141              	.LBE135:
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
ARM GAS  /tmp/cc81O3qB.s 			page 83


 2142              		.loc 1 1534 0 discriminator 2
 2143 0042 FEE7     		b	.L181
 2144              	.L180:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2145              		.loc 1 1535 0
 2146 0044 236C     		ldr	r3, [r4, #64]
 2147 0046 53B9     		cbnz	r3, .L182
 2148              	.LBB137:
 2149              	.LBB138:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2150              		.loc 2 237 0
 2151              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2152 0048 4FF05003 			mov r3, #80												
 2153 004c 72B6     		cpsid i													
 2154 004e 83F31188 		msr basepri, r3											
 2155 0052 BFF36F8F 		isb														
 2156 0056 BFF34F8F 		dsb														
 2157 005a 62B6     		cpsie i													
 2158              	
 2159              	@ 0 "" 2
 2160              	.LVL225:
 2161              		.thumb
 2162              	.L183:
 2163              	.LBE138:
 2164              	.LBE137:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2165              		.loc 1 1535 0 discriminator 3
 2166 005c FEE7     		b	.L183
 2167              	.L182:
 2168 005e 0D46     		mov	r5, r1
1551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2169              		.loc 1 1551 0
 2170 0060 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2171              	.LVL226:
 2172              	.LBB139:
 2173              	.LBB140:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2174              		.loc 2 255 0
 2175              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2176 0064 EFF31186 			mrs r6, basepri											
 2177 0068 4FF05003 		mov r3, #80												
 2178 006c 72B6     		cpsid i													
 2179 006e 83F31188 		msr basepri, r3											
 2180 0072 BFF36F8F 		isb														
 2181 0076 BFF34F8F 		dsb														
 2182 007a 62B6     		cpsie i													
 2183              	
 2184              	@ 0 "" 2
 2185              	.LVL227:
 2186              		.thumb
 2187              	.LBE140:
 2188              	.LBE139:
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2189              		.loc 1 1556 0
 2190 007c A36B     		ldr	r3, [r4, #56]
 2191 007e 3BB1     		cbz	r3, .L187
1562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
ARM GAS  /tmp/cc81O3qB.s 			page 84


 2192              		.loc 1 1562 0
 2193 0080 E768     		ldr	r7, [r4, #12]
 2194              	.LVL228:
1563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2195              		.loc 1 1563 0
 2196 0082 2046     		mov	r0, r4
 2197 0084 2946     		mov	r1, r5
 2198 0086 FFF7FEFF 		bl	prvCopyDataFromQueue
 2199              	.LVL229:
1564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2200              		.loc 1 1564 0
 2201 008a E760     		str	r7, [r4, #12]
 2202              	.LVL230:
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2203              		.loc 1 1566 0
 2204 008c 0120     		movs	r0, #1
 2205 008e 00E0     		b	.L184
 2206              	.LVL231:
 2207              	.L187:
1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2208              		.loc 1 1570 0
 2209 0090 0020     		movs	r0, #0
 2210              	.L184:
 2211              	.LVL232:
 2212              	.LBB141:
 2213              	.LBB142:
 2214              		.loc 2 275 0
 2215              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2216 0092 86F31188 			msr basepri, r6	
 2217              	@ 0 "" 2
 2218              		.thumb
 2219              	.LBE142:
 2220              	.LBE141:
1577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2221              		.loc 1 1577 0
 2222 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2223              		.cfi_endproc
 2224              	.LFE150:
 2226              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2227              		.align	2
 2228              		.global	uxQueueMessagesWaiting
 2229              		.thumb
 2230              		.thumb_func
 2232              	uxQueueMessagesWaiting:
 2233              	.LFB151:
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2234              		.loc 1 1581 0
 2235              		.cfi_startproc
 2236              		@ args = 0, pretend = 0, frame = 0
 2237              		@ frame_needed = 0, uses_anonymous_args = 0
 2238              	.LVL233:
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2239              		.loc 1 1584 0
 2240 0000 50B9     		cbnz	r0, .L190
 2241              	.LBB143:
 2242              	.LBB144:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
ARM GAS  /tmp/cc81O3qB.s 			page 85


 2243              		.loc 2 237 0
 2244              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2245 0002 4FF05003 			mov r3, #80												
 2246 0006 72B6     		cpsid i													
 2247 0008 83F31188 		msr basepri, r3											
 2248 000c BFF36F8F 		isb														
 2249 0010 BFF34F8F 		dsb														
 2250 0014 62B6     		cpsie i													
 2251              	
 2252              	@ 0 "" 2
 2253              	.LVL234:
 2254              		.thumb
 2255              	.L191:
 2256              	.LBE144:
 2257              	.LBE143:
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2258              		.loc 1 1584 0 discriminator 1
 2259 0016 FEE7     		b	.L191
 2260              	.L190:
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2261              		.loc 1 1581 0
 2262 0018 10B5     		push	{r4, lr}
 2263              	.LCFI24:
 2264              		.cfi_def_cfa_offset 8
 2265              		.cfi_offset 4, -8
 2266              		.cfi_offset 14, -4
 2267 001a 0446     		mov	r4, r0
1586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2268              		.loc 1 1586 0
 2269 001c FFF7FEFF 		bl	vPortEnterCritical
 2270              	.LVL235:
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2271              		.loc 1 1588 0
 2272 0020 A46B     		ldr	r4, [r4, #56]
 2273              	.LVL236:
1590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2274              		.loc 1 1590 0
 2275 0022 FFF7FEFF 		bl	vPortExitCritical
 2276              	.LVL237:
1593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2277              		.loc 1 1593 0
 2278 0026 2046     		mov	r0, r4
 2279 0028 10BD     		pop	{r4, pc}
 2280              		.cfi_endproc
 2281              	.LFE151:
 2283 002a 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2284              		.align	2
 2285              		.global	uxQueueSpacesAvailable
 2286              		.thumb
 2287              		.thumb_func
 2289              	uxQueueSpacesAvailable:
 2290              	.LFB152:
1597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2291              		.loc 1 1597 0
 2292              		.cfi_startproc
 2293              		@ args = 0, pretend = 0, frame = 0
 2294              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc81O3qB.s 			page 86


 2295              	.LVL238:
1602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2296              		.loc 1 1602 0
 2297 0000 50B9     		cbnz	r0, .L194
 2298              	.LBB145:
 2299              	.LBB146:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2300              		.loc 2 237 0
 2301              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2302 0002 4FF05003 			mov r3, #80												
 2303 0006 72B6     		cpsid i													
 2304 0008 83F31188 		msr basepri, r3											
 2305 000c BFF36F8F 		isb														
 2306 0010 BFF34F8F 		dsb														
 2307 0014 62B6     		cpsie i													
 2308              	
 2309              	@ 0 "" 2
 2310              	.LVL239:
 2311              		.thumb
 2312              	.L195:
 2313              	.LBE146:
 2314              	.LBE145:
1602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2315              		.loc 1 1602 0 discriminator 1
 2316 0016 FEE7     		b	.L195
 2317              	.L194:
1597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2318              		.loc 1 1597 0
 2319 0018 10B5     		push	{r4, lr}
 2320              	.LCFI25:
 2321              		.cfi_def_cfa_offset 8
 2322              		.cfi_offset 4, -8
 2323              		.cfi_offset 14, -4
 2324 001a 0446     		mov	r4, r0
1604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2325              		.loc 1 1604 0
 2326 001c FFF7FEFF 		bl	vPortEnterCritical
 2327              	.LVL240:
1606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2328              		.loc 1 1606 0
 2329 0020 E36B     		ldr	r3, [r4, #60]
 2330 0022 A46B     		ldr	r4, [r4, #56]
 2331              	.LVL241:
 2332 0024 1C1B     		subs	r4, r3, r4
 2333              	.LVL242:
1608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2334              		.loc 1 1608 0
 2335 0026 FFF7FEFF 		bl	vPortExitCritical
 2336              	.LVL243:
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2337              		.loc 1 1611 0
 2338 002a 2046     		mov	r0, r4
 2339 002c 10BD     		pop	{r4, pc}
 2340              		.cfi_endproc
 2341              	.LFE152:
 2343 002e 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2344              		.align	2
ARM GAS  /tmp/cc81O3qB.s 			page 87


 2345              		.global	uxQueueMessagesWaitingFromISR
 2346              		.thumb
 2347              		.thumb_func
 2349              	uxQueueMessagesWaitingFromISR:
 2350              	.LFB153:
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2351              		.loc 1 1615 0
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 0
 2354              		@ frame_needed = 0, uses_anonymous_args = 0
 2355              		@ link register save eliminated.
 2356              	.LVL244:
1618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2357              		.loc 1 1618 0
 2358 0000 50B9     		cbnz	r0, .L198
 2359              	.LBB147:
 2360              	.LBB148:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2361              		.loc 2 237 0
 2362              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2363 0002 4FF05003 			mov r3, #80												
 2364 0006 72B6     		cpsid i													
 2365 0008 83F31188 		msr basepri, r3											
 2366 000c BFF36F8F 		isb														
 2367 0010 BFF34F8F 		dsb														
 2368 0014 62B6     		cpsie i													
 2369              	
 2370              	@ 0 "" 2
 2371              	.LVL245:
 2372              		.thumb
 2373              	.L199:
 2374              	.LBE148:
 2375              	.LBE147:
1618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2376              		.loc 1 1618 0 discriminator 1
 2377 0016 FEE7     		b	.L199
 2378              	.L198:
1620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2379              		.loc 1 1620 0
 2380 0018 806B     		ldr	r0, [r0, #56]
 2381              	.LVL246:
1623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2382              		.loc 1 1623 0
 2383 001a 7047     		bx	lr
 2384              		.cfi_endproc
 2385              	.LFE153:
 2387              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2388              		.align	2
 2389              		.global	xQueueIsQueueEmptyFromISR
 2390              		.thumb
 2391              		.thumb_func
 2393              	xQueueIsQueueEmptyFromISR:
 2394              	.LFB159:
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2395              		.loc 1 1937 0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc81O3qB.s 			page 88


 2398              		@ frame_needed = 0, uses_anonymous_args = 0
 2399              		@ link register save eliminated.
 2400              	.LVL247:
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2401              		.loc 1 1940 0
 2402 0000 50B9     		cbnz	r0, .L201
 2403              	.LBB149:
 2404              	.LBB150:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2405              		.loc 2 237 0
 2406              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2407 0002 4FF05003 			mov r3, #80												
 2408 0006 72B6     		cpsid i													
 2409 0008 83F31188 		msr basepri, r3											
 2410 000c BFF36F8F 		isb														
 2411 0010 BFF34F8F 		dsb														
 2412 0014 62B6     		cpsie i													
 2413              	
 2414              	@ 0 "" 2
 2415              	.LVL248:
 2416              		.thumb
 2417              	.L202:
 2418              	.LBE150:
 2419              	.LBE149:
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2420              		.loc 1 1940 0 discriminator 1
 2421 0016 FEE7     		b	.L202
 2422              	.L201:
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2423              		.loc 1 1941 0
 2424 0018 836B     		ldr	r3, [r0, #56]
 2425 001a 0BB9     		cbnz	r3, .L204
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2426              		.loc 1 1943 0
 2427 001c 0120     		movs	r0, #1
 2428              	.LVL249:
 2429 001e 7047     		bx	lr
 2430              	.LVL250:
 2431              	.L204:
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2432              		.loc 1 1947 0
 2433 0020 0020     		movs	r0, #0
 2434              	.LVL251:
1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2435              		.loc 1 1951 0
 2436 0022 7047     		bx	lr
 2437              		.cfi_endproc
 2438              	.LFE159:
 2440              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2441              		.align	2
 2442              		.global	xQueueIsQueueFullFromISR
 2443              		.thumb
 2444              		.thumb_func
 2446              	xQueueIsQueueFullFromISR:
 2447              	.LFB161:
1973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc81O3qB.s 			page 89


1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2448              		.loc 1 1976 0
 2449              		.cfi_startproc
 2450              		@ args = 0, pretend = 0, frame = 0
 2451              		@ frame_needed = 0, uses_anonymous_args = 0
 2452              		@ link register save eliminated.
 2453              	.LVL252:
1977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 2454              		.loc 1 1979 0
 2455 0000 50B9     		cbnz	r0, .L206
 2456              	.LBB151:
 2457              	.LBB152:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2458              		.loc 2 237 0
 2459              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2460 0002 4FF05003 			mov r3, #80												
 2461 0006 72B6     		cpsid i													
 2462 0008 83F31188 		msr basepri, r3											
 2463 000c BFF36F8F 		isb														
 2464 0010 BFF34F8F 		dsb														
 2465 0014 62B6     		cpsie i													
 2466              	
 2467              	@ 0 "" 2
 2468              	.LVL253:
 2469              		.thumb
 2470              	.L207:
 2471              	.LBE152:
 2472              	.LBE151:
 2473              		.loc 1 1979 0 discriminator 1
 2474 0016 FEE7     		b	.L207
 2475              	.L206:
1980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2476              		.loc 1 1980 0
 2477 0018 826B     		ldr	r2, [r0, #56]
 2478 001a C36B     		ldr	r3, [r0, #60]
 2479 001c 9A42     		cmp	r2, r3
 2480 001e 01D1     		bne	.L209
1981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 2481              		.loc 1 1982 0
 2482 0020 0120     		movs	r0, #1
 2483              	.LVL254:
 2484 0022 7047     		bx	lr
 2485              	.LVL255:
 2486              	.L209:
1983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
1985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 2487              		.loc 1 1986 0
 2488 0024 0020     		movs	r0, #0
 2489              	.LVL256:
1987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc81O3qB.s 			page 90


1989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2490              		.loc 1 1990 0
 2491 0026 7047     		bx	lr
 2492              		.cfi_endproc
 2493              	.LFE161:
 2495              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2496              		.align	2
 2497              		.global	vQueueAddToRegistry
 2498              		.thumb
 2499              		.thumb_func
 2501              	vQueueAddToRegistry:
 2502              	.LFB162:
1991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
1998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				posting? */
2009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
ARM GAS  /tmp/cc81O3qB.s 			page 91


2035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				leave with nothing? */
2086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
ARM GAS  /tmp/cc81O3qB.s 			page 92


2092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/cc81O3qB.s 			page 93


2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return pdTRUE;
2181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
ARM GAS  /tmp/cc81O3qB.s 			page 94


2206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
ARM GAS  /tmp/cc81O3qB.s 			page 95


2263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2503              		.loc 1 2271 0
 2504              		.cfi_startproc
 2505              		@ args = 0, pretend = 0, frame = 0
 2506              		@ frame_needed = 0, uses_anonymous_args = 0
 2507              		@ link register save eliminated.
 2508              	.LVL257:
2272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a free slot. */
2276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2509              		.loc 1 2276 0
 2510 0000 0023     		movs	r3, #0
 2511 0002 0BE0     		b	.L211
 2512              	.LVL258:
 2513              	.L214:
2277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2514              		.loc 1 2278 0
 2515 0004 074A     		ldr	r2, .L215
 2516 0006 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2517 000a 32B9     		cbnz	r2, .L212
2279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2518              		.loc 1 2281 0
 2519 000c 054A     		ldr	r2, .L215
 2520 000e 42F83310 		str	r1, [r2, r3, lsl #3]
2282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2521              		.loc 1 2282 0
 2522 0012 02EBC303 		add	r3, r2, r3, lsl #3
 2523              	.LVL259:
 2524 0016 5860     		str	r0, [r3, #4]
2283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 2525              		.loc 1 2285 0
 2526 0018 7047     		bx	lr
 2527              	.LVL260:
 2528              	.L212:
2276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2529              		.loc 1 2276 0 discriminator 2
 2530 001a 0133     		adds	r3, r3, #1
 2531              	.LVL261:
 2532              	.L211:
2276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2533              		.loc 1 2276 0 is_stmt 0 discriminator 1
 2534 001c 072B     		cmp	r3, #7
ARM GAS  /tmp/cc81O3qB.s 			page 96


 2535 001e F1D9     		bls	.L214
 2536 0020 7047     		bx	lr
 2537              	.L216:
 2538 0022 00BF     		.align	2
 2539              	.L215:
 2540 0024 00000000 		.word	xQueueRegistry
 2541              		.cfi_endproc
 2542              	.LFE162:
 2544              		.section	.text.pcQueueGetName,"ax",%progbits
 2545              		.align	2
 2546              		.global	pcQueueGetName
 2547              		.thumb
 2548              		.thumb_func
 2550              	pcQueueGetName:
 2551              	.LFB163:
2286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2552              		.loc 1 2300 0 is_stmt 1
 2553              		.cfi_startproc
 2554              		@ args = 0, pretend = 0, frame = 0
 2555              		@ frame_needed = 0, uses_anonymous_args = 0
 2556              		@ link register save eliminated.
 2557              	.LVL262:
2301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2558              		.loc 1 2306 0
 2559 0000 0023     		movs	r3, #0
 2560 0002 0AE0     		b	.L218
 2561              	.LVL263:
 2562              	.L221:
2307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2563              		.loc 1 2308 0
 2564 0004 074A     		ldr	r2, .L222
 2565 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2566 000a 5268     		ldr	r2, [r2, #4]
 2567 000c 8242     		cmp	r2, r0
 2568 000e 03D1     		bne	.L219
2309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
ARM GAS  /tmp/cc81O3qB.s 			page 97


 2569              		.loc 1 2310 0
 2570 0010 044A     		ldr	r2, .L222
 2571 0012 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2572              	.LVL264:
2311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 2573              		.loc 1 2311 0
 2574 0016 7047     		bx	lr
 2575              	.LVL265:
 2576              	.L219:
2306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2577              		.loc 1 2306 0 discriminator 2
 2578 0018 0133     		adds	r3, r3, #1
 2579              	.LVL266:
 2580              	.L218:
2306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2581              		.loc 1 2306 0 is_stmt 0 discriminator 1
 2582 001a 072B     		cmp	r3, #7
 2583 001c F2D9     		bls	.L221
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2584              		.loc 1 2302 0 is_stmt 1
 2585 001e 0020     		movs	r0, #0
 2586              	.LVL267:
2312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pcReturn;
2320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2587              		.loc 1 2320 0
 2588 0020 7047     		bx	lr
 2589              	.L223:
 2590 0022 00BF     		.align	2
 2591              	.L222:
 2592 0024 00000000 		.word	xQueueRegistry
 2593              		.cfi_endproc
 2594              	.LFE163:
 2596              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2597              		.align	2
 2598              		.global	vQueueUnregisterQueue
 2599              		.thumb
 2600              		.thumb_func
 2602              	vQueueUnregisterQueue:
 2603              	.LFB164:
2321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2604              		.loc 1 2328 0
 2605              		.cfi_startproc
 2606              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc81O3qB.s 			page 98


 2607              		@ frame_needed = 0, uses_anonymous_args = 0
 2608              		@ link register save eliminated.
 2609              	.LVL268:
2329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		registry. */
2333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2610              		.loc 1 2333 0
 2611 0000 0023     		movs	r3, #0
 2612 0002 0EE0     		b	.L225
 2613              	.LVL269:
 2614              	.L228:
2334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2615              		.loc 1 2335 0
 2616 0004 084A     		ldr	r2, .L229
 2617 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2618 000a 5268     		ldr	r2, [r2, #4]
 2619 000c 8242     		cmp	r2, r0
 2620 000e 07D1     		bne	.L226
2336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 2621              		.loc 1 2338 0
 2622 0010 054A     		ldr	r2, .L229
 2623 0012 0021     		movs	r1, #0
 2624 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				added again. */
2343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2625              		.loc 1 2343 0
 2626 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2627              	.LVL270:
 2628 001c 5960     		str	r1, [r3, #4]
2344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 2629              		.loc 1 2344 0
 2630 001e 7047     		bx	lr
 2631              	.LVL271:
 2632              	.L226:
2333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2633              		.loc 1 2333 0 discriminator 2
 2634 0020 0133     		adds	r3, r3, #1
 2635              	.LVL272:
 2636              	.L225:
2333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2637              		.loc 1 2333 0 is_stmt 0 discriminator 1
 2638 0022 072B     		cmp	r3, #7
 2639 0024 EED9     		bls	.L228
 2640 0026 7047     		bx	lr
 2641              	.L230:
 2642              		.align	2
 2643              	.L229:
 2644 0028 00000000 		.word	xQueueRegistry
 2645              		.cfi_endproc
ARM GAS  /tmp/cc81O3qB.s 			page 99


 2646              	.LFE164:
 2648              		.section	.text.vQueueDelete,"ax",%progbits
 2649              		.align	2
 2650              		.global	vQueueDelete
 2651              		.thumb
 2652              		.thumb_func
 2654              	vQueueDelete:
 2655              	.LFB154:
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2656              		.loc 1 1627 0 is_stmt 1
 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 0
 2659              		@ frame_needed = 0, uses_anonymous_args = 0
 2660              	.LVL273:
1630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2661              		.loc 1 1630 0
 2662 0000 50B9     		cbnz	r0, .L232
 2663              	.LBB153:
 2664              	.LBB154:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2665              		.loc 2 237 0
 2666              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2667 0002 4FF05003 			mov r3, #80												
 2668 0006 72B6     		cpsid i													
 2669 0008 83F31188 		msr basepri, r3											
 2670 000c BFF36F8F 		isb														
 2671 0010 BFF34F8F 		dsb														
 2672 0014 62B6     		cpsie i													
 2673              	
 2674              	@ 0 "" 2
 2675              	.LVL274:
 2676              		.thumb
 2677              	.L233:
 2678              	.LBE154:
 2679              	.LBE153:
1630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2680              		.loc 1 1630 0 discriminator 1
 2681 0016 FEE7     		b	.L233
 2682              	.L232:
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2683              		.loc 1 1627 0
 2684 0018 10B5     		push	{r4, lr}
 2685              	.LCFI26:
 2686              		.cfi_def_cfa_offset 8
 2687              		.cfi_offset 4, -8
 2688              		.cfi_offset 14, -4
 2689 001a 0446     		mov	r4, r0
1635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2690              		.loc 1 1635 0
 2691 001c FFF7FEFF 		bl	vQueueUnregisterQueue
 2692              	.LVL275:
1643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2693              		.loc 1 1643 0
 2694 0020 2046     		mov	r0, r4
 2695 0022 FFF7FEFF 		bl	vPortFree
 2696              	.LVL276:
 2697 0026 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cc81O3qB.s 			page 100


 2698              		.cfi_endproc
 2699              	.LFE154:
 2701              		.comm	xQueueRegistry,64,4
 2702              		.text
 2703              	.Letext0:
 2704              		.file 3 "/home/reglisse/opt/gcc-arm-none-eabi-4_9-2015q3/lib/gcc/arm-none-eabi/4.9.3/include/stdde
 2705              		.file 4 "/home/reglisse/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/machine/_default_ty
 2706              		.file 5 "/home/reglisse/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/sys/_stdint.h"
 2707              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 2708              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2709              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2710              		.file 9 "Drivers/CMSIS/Include/core_cm7.h"
 2711              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/cc81O3qB.s 			page 101


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
     /tmp/cc81O3qB.s:20     .text.prvIsQueueFull:00000000 $t
     /tmp/cc81O3qB.s:24     .text.prvIsQueueFull:00000000 prvIsQueueFull
     /tmp/cc81O3qB.s:66     .text.prvIsQueueEmpty:00000000 $t
     /tmp/cc81O3qB.s:70     .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
     /tmp/cc81O3qB.s:109    .text.prvCopyDataToQueue:00000000 $t
     /tmp/cc81O3qB.s:113    .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
     /tmp/cc81O3qB.s:232    .text.prvCopyDataFromQueue:00000000 $t
     /tmp/cc81O3qB.s:236    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
     /tmp/cc81O3qB.s:284    .text.prvUnlockQueue:00000000 $t
     /tmp/cc81O3qB.s:288    .text.prvUnlockQueue:00000000 prvUnlockQueue
     /tmp/cc81O3qB.s:391    .text.xQueueGenericReset:00000000 $t
     /tmp/cc81O3qB.s:396    .text.xQueueGenericReset:00000000 xQueueGenericReset
     /tmp/cc81O3qB.s:501    .text.xQueueGenericReset:00000080 $d
     /tmp/cc81O3qB.s:506    .text.prvInitialiseNewQueue:00000000 $t
     /tmp/cc81O3qB.s:510    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
     /tmp/cc81O3qB.s:550    .text.xQueueGenericCreate:00000000 $t
     /tmp/cc81O3qB.s:555    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
     /tmp/cc81O3qB.s:644    .text.xQueueGenericSend:00000000 $t
     /tmp/cc81O3qB.s:649    .text.xQueueGenericSend:00000000 xQueueGenericSend
     /tmp/cc81O3qB.s:994    .text.xQueueGenericSend:0000019c $d
     /tmp/cc81O3qB.s:999    .text.prvInitialiseMutex:00000000 $t
     /tmp/cc81O3qB.s:1003   .text.prvInitialiseMutex:00000000 prvInitialiseMutex
     /tmp/cc81O3qB.s:1042   .text.xQueueCreateMutex:00000000 $t
     /tmp/cc81O3qB.s:1047   .text.xQueueCreateMutex:00000000 xQueueCreateMutex
     /tmp/cc81O3qB.s:1079   .text.xQueueGenericSendFromISR:00000000 $t
     /tmp/cc81O3qB.s:1084   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
     /tmp/cc81O3qB.s:1310   .text.xQueueGiveFromISR:00000000 $t
     /tmp/cc81O3qB.s:1315   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
     /tmp/cc81O3qB.s:1516   .text.xQueueGenericReceive:00000000 $t
     /tmp/cc81O3qB.s:1521   .text.xQueueGenericReceive:00000000 xQueueGenericReceive
     /tmp/cc81O3qB.s:1872   .text.xQueueGenericReceive:000001a8 $d
     /tmp/cc81O3qB.s:1877   .text.xQueueReceiveFromISR:00000000 $t
     /tmp/cc81O3qB.s:1882   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
     /tmp/cc81O3qB.s:2064   .text.xQueuePeekFromISR:00000000 $t
     /tmp/cc81O3qB.s:2069   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
     /tmp/cc81O3qB.s:2227   .text.uxQueueMessagesWaiting:00000000 $t
     /tmp/cc81O3qB.s:2232   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
     /tmp/cc81O3qB.s:2284   .text.uxQueueSpacesAvailable:00000000 $t
     /tmp/cc81O3qB.s:2289   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
     /tmp/cc81O3qB.s:2344   .text.uxQueueMessagesWaitingFromISR:00000000 $t
     /tmp/cc81O3qB.s:2349   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
     /tmp/cc81O3qB.s:2388   .text.xQueueIsQueueEmptyFromISR:00000000 $t
     /tmp/cc81O3qB.s:2393   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
     /tmp/cc81O3qB.s:2441   .text.xQueueIsQueueFullFromISR:00000000 $t
     /tmp/cc81O3qB.s:2446   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
     /tmp/cc81O3qB.s:2496   .text.vQueueAddToRegistry:00000000 $t
     /tmp/cc81O3qB.s:2501   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
     /tmp/cc81O3qB.s:2540   .text.vQueueAddToRegistry:00000024 $d
                            *COM*:00000040 xQueueRegistry
     /tmp/cc81O3qB.s:2545   .text.pcQueueGetName:00000000 $t
     /tmp/cc81O3qB.s:2550   .text.pcQueueGetName:00000000 pcQueueGetName
     /tmp/cc81O3qB.s:2592   .text.pcQueueGetName:00000024 $d
     /tmp/cc81O3qB.s:2597   .text.vQueueUnregisterQueue:00000000 $t
     /tmp/cc81O3qB.s:2602   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
     /tmp/cc81O3qB.s:2644   .text.vQueueUnregisterQueue:00000028 $d
ARM GAS  /tmp/cc81O3qB.s 			page 102


     /tmp/cc81O3qB.s:2649   .text.vQueueDelete:00000000 $t
     /tmp/cc81O3qB.s:2654   .text.vQueueDelete:00000000 vQueueDelete
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
